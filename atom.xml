<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Code Chemistry]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-06-13T06:59:28.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Jason Yuan]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[234 Palindrome Linked List]]></title>
    <link href="http://yoursite.com/2016/06/12/234-Palindrome-Linked-List/"/>
    <id>http://yoursite.com/2016/06/12/234-Palindrome-Linked-List/</id>
    <published>2016-06-12T23:58:49.000Z</published>
    <updated>2016-06-13T06:59:28.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>设计一种方式检查一个链表是否为回文链表。</p>
</blockquote>
<p><strong>样例</strong><br>1-&gt;2-&gt;1就是一个回文链表。</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>方法一：快慢指针，慢指针一边走一边将经过的节点放入stack，当快指针走到终点，慢指针正好走到中点，并且已经将前半段放入stack，根据stack的特性，之后依次取出跟后半段比对。</li>
<li>方法二：依旧使用快慢指针，取到中点，然后将后半段翻转，比较</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type head: ListNode</span><br><span class="line">        :rtype: bool</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> head == <span class="keyword">None</span> <span class="keyword">or</span> head.next == <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        </span><br><span class="line">        stack = []</span><br><span class="line">        slow, fast = head, head</span><br><span class="line">        <span class="keyword">while</span> fast != <span class="keyword">None</span> <span class="keyword">and</span> fast.next != <span class="keyword">None</span>:</span><br><span class="line">            stack.append(slow.val)</span><br><span class="line">            slow = slow.next</span><br><span class="line">            fast = fast.next.next</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> fast == <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            slow = slow.next</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> slow != <span class="keyword">None</span>:</span><br><span class="line">            cur = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> slow.val != cur:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            slow = slow.next</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type head: ListNode</span><br><span class="line">        :rtype: bool</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> head == <span class="keyword">None</span> <span class="keyword">or</span> head.next == <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        </span><br><span class="line">        slow, fast = head, head</span><br><span class="line">        <span class="keyword">while</span> fast != <span class="keyword">None</span> <span class="keyword">and</span> fast.next != <span class="keyword">None</span>:</span><br><span class="line">            slow = slow.next</span><br><span class="line">            fast = fast.next.next</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> fast == <span class="keyword">None</span>:</span><br><span class="line">            secHalf = self.reverse(slow)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            secHalf = self.reverse(slow.next)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> secHalf != <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">if</span> secHalf.val != head.val:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            secHalf = secHalf.next</span><br><span class="line">            head = head.next</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        </span><br><span class="line">        prev = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">while</span> head != <span class="keyword">None</span>:</span><br><span class="line">            temp = head.next</span><br><span class="line">            head.next = prev</span><br><span class="line">            prev = head</span><br><span class="line">            head = temp</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> prev</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>设计一种方式检查一个链表是否为回文链表。</p>
</blockquote>
<p><strong>样例</strong><br>1-&gt;2-&gt;1就是一个回文链表。</p>
<h3 id="解题思路"]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="Palindrome" scheme="http://yoursite.com/tags/Palindrome/"/>
    
      <category term="Two Pointers" scheme="http://yoursite.com/tags/Two-Pointers/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[511 Swap Two Nodes in Linked List]]></title>
    <link href="http://yoursite.com/2016/06/12/511-Swap-Two-Nodes-in-Linked-List/"/>
    <id>http://yoursite.com/2016/06/12/511-Swap-Two-Nodes-in-Linked-List/</id>
    <published>2016-06-12T17:13:19.000Z</published>
    <updated>2016-06-13T00:13:49.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给你一个链表以及两个权值v1和v2，交换链表中权值为v1和v2的这两个节点。保证链表中节点权值各不相同，如果没有找到对应节点，那么什么也不用做。</p>
</blockquote>
<h3 id="解题思路">解题思路</h3><ul>
<li>基础的链表操作，写一个helper函数，根据head和value找出和value相等的节点和prev节点</li>
<li>比如给出3-&gt;4-&gt;1-&gt;5-&gt;Null 和 1 返回Node(4)和Node(1)</li>
<li>注意<strong>边界情况</strong>，如果v1=4, v2=1 <strong>那么current1和pre2重合，要特殊考虑</strong></li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param &#123;ListNode&#125; head, a ListNode</span></span><br><span class="line">    <span class="comment"># @oaram &#123;int&#125; v1 an integer</span></span><br><span class="line">    <span class="comment"># @param &#123;int&#125; v2 an integer</span></span><br><span class="line">    <span class="comment"># @return &#123;ListNode&#125; a new head of singly-linked list</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swapNodes</span><span class="params">(self, head, v1, v2)</span>:</span></span><br><span class="line">        <span class="comment"># Write your code here</span></span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummy.next = head</span><br><span class="line">        prev1, cur1 = self.findNode(dummy, v1)</span><br><span class="line">        prev2, cur2 = self.findNode(dummy, v2)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> cur1 <span class="keyword">and</span> cur2:</span><br><span class="line">            prev1.next = cur2</span><br><span class="line">            temp = cur2.next</span><br><span class="line">            <span class="keyword">if</span> cur1.next == cur2:</span><br><span class="line">                cur2.next = cur1</span><br><span class="line">                cur1.next = temp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur2.next = cur1.next</span><br><span class="line">                prev2.next = cur1</span><br><span class="line">                cur1.next = temp</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findNode</span><span class="params">(self, head, value)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> head.next != <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">if</span> head.next.val == value:</span><br><span class="line">                <span class="keyword">return</span> head, head.next</span><br><span class="line">            head = head.next</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span>, <span class="keyword">None</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给你一个链表以及两个权值v1和v2，交换链表中权值为v1和v2的这两个节点。保证链表中节点权值各不相同，如果没有找到对应节点，那么什么也不用做。</p>
</blockquote>
<h3 id="解题思路">]]>
    </summary>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[21 Merge Two Sorted List]]></title>
    <link href="http://yoursite.com/2016/06/12/21-Merge-Two-Sorted-List/"/>
    <id>http://yoursite.com/2016/06/12/21-Merge-Two-Sorted-List/</id>
    <published>2016-06-12T16:31:45.000Z</published>
    <updated>2016-06-12T23:35:30.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>将两个排序链表合并为一个新的排序链表</p>
</blockquote>
<p><strong>样例</strong><br>给出 1-&gt;3-&gt;8-&gt;11-&gt;15-&gt;null，2-&gt;null，<br>返回 1-&gt;2-&gt;3-&gt;8-&gt;11-&gt;15-&gt;null。</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>基础链表操作，每次比较连个链表的头，把相对小的加入新链表</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1, l2)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type l1: ListNode</span><br><span class="line">        :type l2: ListNode</span><br><span class="line">        :rtype: ListNode</span><br><span class="line">        """</span></span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        current = dummy</span><br><span class="line">        <span class="keyword">while</span> l1 != <span class="keyword">None</span> <span class="keyword">and</span> l2 != <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">if</span> l1.val &lt; l2.val:</span><br><span class="line">                current.next = l1</span><br><span class="line">                l1 = l1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                current.next = l2</span><br><span class="line">                l2 = l2.next</span><br><span class="line">            current = current.next</span><br><span class="line">        <span class="keyword">if</span> l1 != <span class="keyword">None</span>:</span><br><span class="line">            current.next = l1</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            current.next = l2</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>将两个排序链表合并为一个新的排序链表</p>
</blockquote>
<p><strong>样例</strong><br>给出 1-&gt;3-&gt;8-&gt;11-&gt;15-&gt;null，2-]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[166 Nth to Last Node in List]]></title>
    <link href="http://yoursite.com/2016/06/12/166-Nth-to-Last-Node-in-List/"/>
    <id>http://yoursite.com/2016/06/12/166-Nth-to-Last-Node-in-List/</id>
    <published>2016-06-12T16:08:00.000Z</published>
    <updated>2016-06-12T23:08:29.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>找到单链表倒数第n个节点，保证链表中节点的最少数量为n。</p>
</blockquote>
<p><strong>样例</strong><br>给出链表<strong> 3-&gt;2-&gt;1-&gt;5-&gt;null</strong>和n = 2，返回倒数第二个节点的值1.</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>快慢指针， 快指针先走n步，然后快慢指针一起同步速走，快指针走到头，慢指针即为所求</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span><br><span class="line">Definition of ListNode</span><br><span class="line">class ListNode(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self, val, next=None):</span><br><span class="line">        self.val = val</span><br><span class="line">        self.next = next</span><br><span class="line">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="string">"""</span><br><span class="line">    @param head: The first node of linked list.</span><br><span class="line">    @param n: An integer.</span><br><span class="line">    @return: Nth to last node of a singly linked list. </span><br><span class="line">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nthToLast</span><span class="params">(self, head, n)</span>:</span></span><br><span class="line">        <span class="comment"># write your code here</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        </span><br><span class="line">        slow, fast = head, head</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(n):</span><br><span class="line">            fast = fast.next</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> fast != <span class="keyword">None</span>:</span><br><span class="line">            slow = slow.next</span><br><span class="line">            fast = fast.next</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> slow</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>找到单链表倒数第n个节点，保证链表中节点的最少数量为n。</p>
</blockquote>
<p><strong>样例</strong><br>给出链表<strong> 3-&gt;2-&gt;1-&gt;5]]>
    </summary>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[221 Add Two Numbers II]]></title>
    <link href="http://yoursite.com/2016/06/12/221-Add-Two-Numbers-II/"/>
    <id>http://yoursite.com/2016/06/12/221-Add-Two-Numbers-II/</id>
    <published>2016-06-12T15:55:31.000Z</published>
    <updated>2016-06-12T22:56:42.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>假定用一个链表表示两个数，其中每个节点仅包含一个数字。假设这两个数的数字顺序排列，请设计一种方法将两个数相加，并将其结果表现为链表的形式。</p>
</blockquote>
<p><strong>样例</strong><br>给出 6-&gt;1-&gt;7 + 2-&gt;9-&gt;5。即，617 + 295。<br>返回 9-&gt;1-&gt;2。即，912 。</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>整体思路与Add Two Numbers一样，只不过链表和其表示的数值吮吸相同</li>
<li>借助helper函数，反转链表</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param l1: the first list</span></span><br><span class="line">    <span class="comment"># @param l2: the second list</span></span><br><span class="line">    <span class="comment"># @return: the sum list of l1 and l2 </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addLists2</span><span class="params">(self, l1, l2)</span>:</span></span><br><span class="line">        <span class="comment"># Write your code here</span></span><br><span class="line">        l1 = self.reverse(l1)</span><br><span class="line">        l2 = self.reverse(l2)</span><br><span class="line">        carry = <span class="number">0</span></span><br><span class="line">        Dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        head = Dummy</span><br><span class="line">        <span class="keyword">while</span> l1 != <span class="keyword">None</span> <span class="keyword">and</span> l2 != <span class="keyword">None</span>:</span><br><span class="line">            sum = (l1.val + l2.val + carry) % <span class="number">10</span></span><br><span class="line">            carry = <span class="number">1</span> <span class="keyword">if</span> (l1.val + l2.val + carry) &gt; <span class="number">9</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            head.next = ListNode(sum)</span><br><span class="line">            head = head.next</span><br><span class="line">            l1 = l1.next</span><br><span class="line">            l2 = l2.next</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">while</span> l1 != <span class="keyword">None</span>:</span><br><span class="line">            sum = (l1.val + carry) % <span class="number">10</span></span><br><span class="line">            carry = <span class="number">1</span> <span class="keyword">if</span> l1.val + carry &gt; <span class="number">9</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            head.next = ListNode(sum)</span><br><span class="line">            l1 = l1.next</span><br><span class="line">            head = head.next</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> l2 != <span class="keyword">None</span>:</span><br><span class="line">            sum = (l2.val + carry) % <span class="number">10</span></span><br><span class="line">            carry = <span class="number">1</span> <span class="keyword">if</span> l2.val + carry &gt; <span class="number">9</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            head.next = ListNode(sum)</span><br><span class="line">            l2 = l2.next</span><br><span class="line">            head = head.next</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> carry:</span><br><span class="line">            head.next = ListNode(carry)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> self.reverse(Dummy.next)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">            </span><br><span class="line">        prev = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">while</span> head != <span class="keyword">None</span>:</span><br><span class="line">            temp = head.next</span><br><span class="line">            head.next = prev</span><br><span class="line">            prev = head</span><br><span class="line">            head = temp</span><br><span class="line">        <span class="keyword">return</span> prev</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>假定用一个链表表示两个数，其中每个节点仅包含一个数字。假设这两个数的数字顺序排列，请设计一种方法将两个数相加，并将其结果表现为链表的形式。</p>
</blockquote>
<p><strong>样例</st]]>
    </summary>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2 Add Two Numbers]]></title>
    <link href="http://yoursite.com/2016/06/12/2-Add-Two-Numbers/"/>
    <id>http://yoursite.com/2016/06/12/2-Add-Two-Numbers/</id>
    <published>2016-06-12T15:40:48.000Z</published>
    <updated>2016-06-12T22:41:21.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>你有两个用链表代表的整数，其中每个节点包含一个数字。数字存储按照在原来整数中相反的顺序，使得第一个数字位于链表的开头。写出一个函数将两个整数相加，用链表形式返回和。</p>
</blockquote>
<p><strong>样例</strong><br>给出两个链表 3-&gt;1-&gt;5-&gt;null和5-&gt;9-&gt;2-&gt;null，返回 8-&gt;0-&gt;8-&gt;null</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>简单的链表操作，注意声明一个carry来记录进位的结果</li>
<li>最后要记得check如果carry == 1的情况，否则9-&gt;9 + 1 = 0-&gt;0</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span><span class="params">(self, l1, l2)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type l1: ListNode</span><br><span class="line">        :type l2: ListNode</span><br><span class="line">        :rtype: ListNode</span><br><span class="line">        """</span></span><br><span class="line">        carry = <span class="number">0</span></span><br><span class="line">        Dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        head = Dummy</span><br><span class="line">        <span class="keyword">while</span> l1 != <span class="keyword">None</span> <span class="keyword">and</span> l2 != <span class="keyword">None</span>:</span><br><span class="line">            sum = (l1.val + l2.val + carry) % <span class="number">10</span></span><br><span class="line">            carry = <span class="number">1</span> <span class="keyword">if</span> (l1.val + l2.val + carry) &gt; <span class="number">9</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            head.next = ListNode(sum)</span><br><span class="line">            head = head.next</span><br><span class="line">            l1 = l1.next</span><br><span class="line">            l2 = l2.next</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">while</span> l1 != <span class="keyword">None</span>:</span><br><span class="line">            sum = (l1.val + carry) % <span class="number">10</span></span><br><span class="line">            carry = <span class="number">1</span> <span class="keyword">if</span> l1.val + carry &gt; <span class="number">9</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            head.next = ListNode(sum)</span><br><span class="line">            l1 = l1.next</span><br><span class="line">            head = head.next</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> l2 != <span class="keyword">None</span>:</span><br><span class="line">            sum = (l2.val + carry) % <span class="number">10</span></span><br><span class="line">            carry = <span class="number">1</span> <span class="keyword">if</span> l2.val + carry &gt; <span class="number">9</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            head.next = ListNode(sum)</span><br><span class="line">            l2 = l2.next</span><br><span class="line">            head = head.next</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> carry:</span><br><span class="line">            head.next = ListNode(carry)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Dummy.next</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>你有两个用链表代表的整数，其中每个节点包含一个数字。数字存储按照在原来整数中相反的顺序，使得第一个数字位于链表的开头。写出一个函数将两个整数相加，用链表形式返回和。</p>
</blockquote>
<p><]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[147 Insertion Sort List]]></title>
    <link href="http://yoursite.com/2016/06/12/147-Insertion-Sort-List/"/>
    <id>http://yoursite.com/2016/06/12/147-Insertion-Sort-List/</id>
    <published>2016-06-12T14:43:54.000Z</published>
    <updated>2016-06-12T21:44:28.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>用插入排序对链表排序</p>
</blockquote>
<p><strong>样例</strong><br>Given 1-&gt;3-&gt;2-&gt;0-&gt;null, return 0-&gt;1-&gt;2-&gt;3-&gt;null</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>写一个helper函数，根据一个head和一个Node，可以将Node插入到一段linked list中升序排列的正确位置</li>
<li>一个current指针来遍历要排序的链表，<strong>需要记录一个last值，否则会超时</strong><ul>
<li>如果current &gt;= last，current继续前进</li>
<li>如果current &lt; last，利用helper函数把current插入到前面</li>
</ul>
</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insertionSortList</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type head: ListNode</span><br><span class="line">        :rtype: ListNode</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        </span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummy.next = head</span><br><span class="line">        last = head.val</span><br><span class="line">        <span class="keyword">while</span> head.next != <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">if</span> head.next.val &gt;= last:</span><br><span class="line">                last = head.next.val</span><br><span class="line">                head = head.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.insert(dummy, ListNode(head.next.val))</span><br><span class="line">                head.next = head.next.next</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, head, node)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> head.next != <span class="keyword">None</span> <span class="keyword">and</span> head.next.val &lt;= node.val:</span><br><span class="line">            head = head.next</span><br><span class="line">        node.next = head.next</span><br><span class="line">        head.next = node</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>用插入排序对链表排序</p>
</blockquote>
<p><strong>样例</strong><br>Given 1-&gt;3-&gt;2-&gt;0-&gt;null, return 0-&gt;1]]>
    </summary>
    
      <category term="Insertion Sort" scheme="http://yoursite.com/tags/Insertion-Sort/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[24 Swap Nodes in Pairs]]></title>
    <link href="http://yoursite.com/2016/06/11/24-Swap-Nodes-in-Pairs/"/>
    <id>http://yoursite.com/2016/06/11/24-Swap-Nodes-in-Pairs/</id>
    <published>2016-06-11T23:02:28.000Z</published>
    <updated>2016-06-12T06:04:21.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给一个链表，两两交换其中的节点，然后返回交换后的链表。</p>
</blockquote>
<p><strong>样例</strong><br>给出 1-&gt;2-&gt;3-&gt;4, 你应该返回的链表是 2-&gt;1-&gt;4-&gt;3。</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>由于第一个节点要参与调换 =&gt; Dummy node帮忙</li>
<li>快慢指针，外加一个temp指针，倒来倒去。特别注意while循环的结束条件，不清楚可以用几个小的特殊的例子跑一下。</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swapPairs</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type head: ListNode</span><br><span class="line">        :rtype: ListNode</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> head == <span class="keyword">None</span> <span class="keyword">or</span> head.next == <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        </span><br><span class="line">        Dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        Dummy.next = head</span><br><span class="line">        </span><br><span class="line">        slow, fast = Dummy, Dummy.next</span><br><span class="line">        <span class="keyword">while</span> fast != <span class="keyword">None</span> <span class="keyword">and</span> fast.next != <span class="keyword">None</span>:</span><br><span class="line">            temp = fast.next.next</span><br><span class="line">            slow.next = fast.next</span><br><span class="line">            fast.next.next = fast</span><br><span class="line">            fast.next = temp</span><br><span class="line">            </span><br><span class="line">            slow = fast</span><br><span class="line">            fast = fast.next</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Dummy.next</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给一个链表，两两交换其中的节点，然后返回交换后的链表。</p>
</blockquote>
<p><strong>样例</strong><br>给出 1-&gt;2-&gt;3-&gt;4, 你应该返回的链表是]]>
    </summary>
    
      <category term="Dummy Node" scheme="http://yoursite.com/tags/Dummy-Node/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="Two Pointers" scheme="http://yoursite.com/tags/Two-Pointers/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[217 Remove Duplicates from Unsorted List]]></title>
    <link href="http://yoursite.com/2016/06/11/217-Remove-Duplicates-from-Unsorted-List/"/>
    <id>http://yoursite.com/2016/06/11/217-Remove-Duplicates-from-Unsorted-List/</id>
    <published>2016-06-11T22:43:32.000Z</published>
    <updated>2016-06-12T05:44:11.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>设计一种方法，从无序链表中删除重复项。</p>
</blockquote>
<p><strong>样例</strong><br>给出 1-&gt;3-&gt;2-&gt;1-&gt;4. 返回 1-&gt;3-&gt;2-&gt;4</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>遍历链表，用一hash表记录出现过的节点的值，如果出现过则删除，未出现过则加入hash表</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span><br><span class="line">Definition of ListNode</span><br><span class="line">class ListNode(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self, val, next=None):</span><br><span class="line">        self.val = val</span><br><span class="line">        self.next = next</span><br><span class="line">"""</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param head, a ListNode</span></span><br><span class="line">    <span class="comment"># @return a ListNode</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeDuplicates</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="comment"># Write your code here</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        </span><br><span class="line">        res = head</span><br><span class="line">        map = &#123;&#125;</span><br><span class="line">        map[head.val] = <span class="keyword">True</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> head.next != <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">if</span> head.next.val <span class="keyword">not</span> <span class="keyword">in</span> map:</span><br><span class="line">                map[head.next.val] = <span class="keyword">True</span></span><br><span class="line">                head = head.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                head.next = head.next.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>设计一种方法，从无序链表中删除重复项。</p>
</blockquote>
<p><strong>样例</strong><br>给出 1-&gt;3-&gt;2-&gt;1-&gt;4. 返回 1-&gt;3]]>
    </summary>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[228 Middle of Linked List]]></title>
    <link href="http://yoursite.com/2016/06/11/228-Middle-of-Linked-List/"/>
    <id>http://yoursite.com/2016/06/11/228-Middle-of-Linked-List/</id>
    <published>2016-06-11T20:48:12.000Z</published>
    <updated>2016-06-12T03:51:05.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>找链表的中点。</p>
</blockquote>
<p><strong>样例</strong><br>链表 1-&gt;2-&gt;3的中点是2。链表 1-&gt;2的中点是1。</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>快慢指针一起跑，快的到终点，慢的到中点</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span><br><span class="line">Definition of ListNode</span><br><span class="line">class ListNode(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self, val, next=None):</span><br><span class="line">        self.val = val</span><br><span class="line">        self.next = next</span><br><span class="line">"""</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param head: the head of linked list.</span></span><br><span class="line">    <span class="comment"># @return: a middle node of the linked list</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">middleNode</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="comment"># Write your code here</span></span><br><span class="line">        <span class="keyword">if</span> head <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> head.next <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">            </span><br><span class="line">        slow, fast = head, head.next</span><br><span class="line">        <span class="keyword">while</span> fast <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> fast.next <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            slow = slow.next</span><br><span class="line">            fast = fast.next.next</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> slow</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>找链表的中点。</p>
</blockquote>
<p><strong>样例</strong><br>链表 1-&gt;2-&gt;3的中点是2。链表 1-&gt;2的中点是1。</p>
<h3 id="解题]]>
    </summary>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[372 Delete Node in the Middle of the Singly Linked List]]></title>
    <link href="http://yoursite.com/2016/06/11/372-Delete-Node-in-the-Middle-of-the-Singly-Linked-List/"/>
    <id>http://yoursite.com/2016/06/11/372-Delete-Node-in-the-Middle-of-the-Singly-Linked-List/</id>
    <published>2016-06-11T16:18:42.000Z</published>
    <updated>2016-06-11T23:19:32.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个单链表中的一个等待被删除的节点(非表头或表尾)。请在在O(1)时间复杂度删除该链表节点。</p>
</blockquote>
<p><strong>样例</strong><br>给定 1-&gt;2-&gt;3-&gt;4，和节点 3，删除 3 之后，链表应该变为 1-&gt;2-&gt;4。</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>复制要删除的节点下一个节点的值给要删除的节点，把当前节点的next指针指向下一个节点的next指针指向的节点</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span><br><span class="line">Definition of ListNode</span><br><span class="line">class ListNode(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self, val, next=None):</span><br><span class="line">        self.val = val</span><br><span class="line">        self.next = next</span><br><span class="line">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param node: the node in the list should be deleted</span></span><br><span class="line">    <span class="comment"># @return: nothing</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteNode</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="comment"># write your code here</span></span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> node.next <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        node.val = node.next.val</span><br><span class="line">        node.next = node.next.next</span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个单链表中的一个等待被删除的节点(非表头或表尾)。请在在O(1)时间复杂度删除该链表节点。</p>
</blockquote>
<p><strong>样例</strong><br>给定 1-&gt;2-&]]>
    </summary>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[203 Remove Linked List Elements]]></title>
    <link href="http://yoursite.com/2016/06/09/203-Remove-Linked-List-Elements/"/>
    <id>http://yoursite.com/2016/06/09/203-Remove-Linked-List-Elements/</id>
    <published>2016-06-09T23:01:08.000Z</published>
    <updated>2016-06-10T06:01:58.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>删除链表中等于给定值val的所有节点。</p>
</blockquote>
<p><strong>样例</strong><br>给出链表 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;5-&gt;3, 和 val = 3, 你需要返回删除3之后的链表：1-&gt;2-&gt;4-&gt;5。</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>最基础的链表操作，由于第一个节点可能被删除，所以借助Dummy Node</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeElements</span><span class="params">(self, head, val)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type head: ListNode</span><br><span class="line">        :type val: int</span><br><span class="line">        :rtype: ListNode</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> head <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        </span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummy.next = head</span><br><span class="line">        current = dummy</span><br><span class="line">        <span class="keyword">while</span> current.next != <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">if</span> current.next.val == val:</span><br><span class="line">                current.next = current.next.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                current = current.next</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>删除链表中等于给定值val的所有节点。</p>
</blockquote>
<p><strong>样例</strong><br>给出链表 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;5-&gt;]]>
    </summary>
    
      <category term="Dummy Node" scheme="http://yoursite.com/tags/Dummy-Node/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[142 Linked List Cycle II]]></title>
    <link href="http://yoursite.com/2016/06/06/142-Linked-List-Cycle-II/"/>
    <id>http://yoursite.com/2016/06/06/142-Linked-List-Cycle-II/</id>
    <published>2016-06-07T01:26:03.000Z</published>
    <updated>2016-06-07T08:26:52.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个链表，如果链表中存在环，则返回到链表中环的起始节点的值，如果没有环，返回null。</p>
</blockquote>
<p><strong>样例</strong><br>给出 <strong>-21-&gt;10-&gt;4-&gt;5, tail connects to node index 1</strong>，返回<strong>10</strong></p>
<h3 id="解题思路">解题思路</h3><ul>
<li>首先跟Linked List Cycle一样，还是快慢指针，从头开始走，如果没有相遇快指针就走到尾了，则说明没有环，返回NULL</li>
<li>如果相遇了，把慢指针<strong>重新放到</strong>开头，快慢指针一起<strong>一步一步走</strong>再次相遇即是环的入口，不要问我为什么…想知道的可以去看一下数学证明</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detectCycle</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type head: ListNode</span><br><span class="line">        :rtype: ListNode</span><br><span class="line">        """</span></span><br><span class="line">        slow, fast = head, head</span><br><span class="line">        <span class="keyword">while</span> fast <span class="keyword">and</span> fast.next:</span><br><span class="line">            slow = slow.next</span><br><span class="line">            fast = fast.next.next</span><br><span class="line">            <span class="keyword">if</span> slow == fast:</span><br><span class="line">                slow = head</span><br><span class="line">                <span class="keyword">while</span> slow != fast:</span><br><span class="line">                    slow = slow.next</span><br><span class="line">                    fast = fast.next</span><br><span class="line">                <span class="keyword">return</span> slow</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个链表，如果链表中存在环，则返回到链表中环的起始节点的值，如果没有环，返回null。</p>
</blockquote>
<p><strong>样例</strong><br>给出 <strong>-21-]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="Two Pointers" scheme="http://yoursite.com/tags/Two-Pointers/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[141 Linked List Cycle]]></title>
    <link href="http://yoursite.com/2016/06/06/141-Linked-List-Cycle/"/>
    <id>http://yoursite.com/2016/06/06/141-Linked-List-Cycle/</id>
    <published>2016-06-07T01:13:33.000Z</published>
    <updated>2016-06-07T08:14:17.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个链表，判断它是否有环。</p>
</blockquote>
<p><strong>样例</strong><br>给出 <strong>-21-&gt;10-&gt;4-&gt;5, tail connects to node index 1</strong>，返回 true</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>快慢指针，都从起点出发， 慢指针一次一步，快指针一次两步，如果有环则一定存在某时刻快慢指针相交</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type head: ListNode</span><br><span class="line">        :rtype: bool</span><br><span class="line">        """</span></span><br><span class="line">        slow, fast = head, head</span><br><span class="line">        <span class="keyword">while</span> fast <span class="keyword">and</span> fast.next:</span><br><span class="line">            slow = slow.next</span><br><span class="line">            fast = fast.next.next</span><br><span class="line">            <span class="keyword">if</span> slow == fast:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个链表，判断它是否有环。</p>
</blockquote>
<p><strong>样例</strong><br>给出 <strong>-21-&gt;10-&gt;4-&gt;5, tail conne]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="Two Pointers" scheme="http://yoursite.com/tags/Two-Pointers/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[92 Reverse Linked List II]]></title>
    <link href="http://yoursite.com/2016/06/06/92-Reverse-Linked-List-II/"/>
    <id>http://yoursite.com/2016/06/06/92-Reverse-Linked-List-II/</id>
    <published>2016-06-07T01:03:37.000Z</published>
    <updated>2016-06-07T08:05:07.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>翻转链表中第m个节点到第n个节点的部分<br><strong>注意事项</strong><br>m，n满足1 ≤ m ≤ n ≤ 链表长度</p>
</blockquote>
<p><strong>样例</strong><br>给出链表<strong>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;null</strong>， m = 2 和n = 4，返回<strong>1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;null</strong></p>
<h3 id="解题思路">解题思路</h3><ul>
<li>同Reverse Linked List相似，首先找到四个关键的preM, M, N, postN</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseBetween</span><span class="params">(self, head, m, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type head: ListNode</span><br><span class="line">        :type m: int</span><br><span class="line">        :type n: int</span><br><span class="line">        :rtype: ListNode</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> m == n:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummy.next = head</span><br><span class="line">        prevmNode, nNode = dummy, dummy</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m - <span class="number">1</span>):</span><br><span class="line">            prevmNode = prevmNode.next</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            nNode = nNode.next</span><br><span class="line">            </span><br><span class="line">        mNode = prevmNode.next</span><br><span class="line">        postnNode = nNode.next</span><br><span class="line">        prev = postnNode</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(n - m + <span class="number">1</span>):</span><br><span class="line">            temp = mNode.next</span><br><span class="line">            mNode.next = prev</span><br><span class="line">            prev = mNode</span><br><span class="line">            mNode = temp</span><br><span class="line">        prevmNode.next = nNode</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>翻转链表中第m个节点到第n个节点的部分<br><strong>注意事项</strong><br>m，n满足1 ≤ m ≤ n ≤ 链表长度</p>
</blockquote>
<p><strong>样例</st]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="Two Pointers" scheme="http://yoursite.com/tags/Two-Pointers/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[206 Reverse Linked List]]></title>
    <link href="http://yoursite.com/2016/06/06/206-Reverse-Linked-List/"/>
    <id>http://yoursite.com/2016/06/06/206-Reverse-Linked-List/</id>
    <published>2016-06-07T00:57:32.000Z</published>
    <updated>2016-06-07T07:59:38.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>翻转一个链表</p>
</blockquote>
<p><strong>样例</strong><br>给出一个链表<strong>1-&gt;2-&gt;3-&gt;null</strong>，这个翻转后的链表为<strong>3-&gt;2-&gt;1-&gt;null</strong></p>
<h3 id="解题思路">解题思路</h3><ul>
<li>基础链表问题，同向双指针<ul>
<li>temp = head.next //让temp记住head.next指向的节点</li>
<li>head.next = prev //剪短head与原来head.next之间的关系，将head.next指向prev</li>
<li>prev指向head，即向前移动一步</li>
<li>head指向temp，也是向前移动一步</li>
</ul>
</li>
<li>方法二 Recursion</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一 ：Non-recursion</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseList</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type head: ListNode</span><br><span class="line">        :rtype: ListNode</span><br><span class="line">        """</span></span><br><span class="line">        prev = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            temp = head.next</span><br><span class="line">            head.next = prev</span><br><span class="line">            prev = head</span><br><span class="line">            head = temp</span><br><span class="line">        <span class="keyword">return</span> prev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二 ：Recursion</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseList</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type head: ListNode</span><br><span class="line">        :rtype: ListNode</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> head <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> head.next <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        next = self.reverseList(head.next)</span><br><span class="line">        head.next.next = head</span><br><span class="line">        head.next = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">return</span> next</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>翻转一个链表</p>
</blockquote>
<p><strong>样例</strong><br>给出一个链表<strong>1-&gt;2-&gt;3-&gt;null</strong>，这个翻转后的链表]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="Recursion" scheme="http://yoursite.com/tags/Recursion/"/>
    
      <category term="Two Pointers" scheme="http://yoursite.com/tags/Two-Pointers/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[23 Merge k Sorted Lists]]></title>
    <link href="http://yoursite.com/2016/06/05/23-Merge-k-Sorted-Lists/"/>
    <id>http://yoursite.com/2016/06/05/23-Merge-k-Sorted-Lists/</id>
    <published>2016-06-06T01:29:15.000Z</published>
    <updated>2016-06-06T08:30:14.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>合并k个排序链表，并且返回合并后的排序链表。尝试分析和描述其复杂度。</p>
</blockquote>
<p><strong>样例</strong><br>给出3个排序链表<strong>[2-&gt;4-&gt;null, null, -1-&gt;null]</strong>，返回 <strong>-1-&gt;2-&gt;4-&gt;null</strong></p>
<h3 id="解题思路">解题思路</h3><ul>
<li>方法一：两两合并，最终合并成一个linked list，返回结果<ul>
<li>相当于8-&gt;4-&gt;2-&gt;1, 一共logk层，每层都是n个节点(n表示k个链表的节点总和)，所以时间复杂度是O(nlogk)</li>
<li>实现上可以采用递归，divide and conquer的思想把合并k个链表分成两个合并k/2个链表的任务，一直划分，知道任务中只剩一个链表或者两个链表。</li>
<li>也可以采用非递归的方式</li>
</ul>
</li>
<li>方法二：维护一个k个大小的min heap<ul>
<li>每次取出最小的数O(1)，并且插入一个新的数O(logk)，一共操作n次，所以时间复杂度是O(nlogk)</li>
<li>如果不使用min heap，而是通过for循环每次找到最小，一次操作是O(k)，所以总的时间复杂度是O(nk)</li>
</ul>
</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一 递归</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeKLists</span><span class="params">(self, lists)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type lists: List[ListNode]</span><br><span class="line">        :rtype: ListNode</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> lists == [] <span class="keyword">or</span> lists == [[]]:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">return</span> self.helper(lists)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, lists)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(lists) &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> lists[<span class="number">0</span>]</span><br><span class="line">        left = self.helper(lists[:len(lists) / <span class="number">2</span>])</span><br><span class="line">        right = self.helper(lists[len(lists) / <span class="number">2</span>:])</span><br><span class="line">        <span class="keyword">return</span> self.merge(left, right)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, head1, head2)</span>:</span></span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        tail = dummy</span><br><span class="line">        <span class="keyword">while</span> head1 <span class="keyword">and</span> head2:</span><br><span class="line">            <span class="keyword">if</span> head1.val &lt; head2.val:</span><br><span class="line">                tail.next = head1</span><br><span class="line">                head1 = head1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tail.next = head2</span><br><span class="line">                head2 = head2.next</span><br><span class="line">            tail = tail.next</span><br><span class="line">        <span class="keyword">if</span> head1:</span><br><span class="line">            tail.next = head1</span><br><span class="line">        <span class="keyword">if</span> head2:</span><br><span class="line">            tail.next = head2</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二 非递归</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeKLists</span><span class="params">(self, lists)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type lists: List[ListNode]</span><br><span class="line">        :rtype: ListNode</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> lists:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> len(lists) &gt; <span class="number">1</span>:</span><br><span class="line">            new_lists = []</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(lists) - <span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">                merge_list = self.merge(lists[i], lists[i + <span class="number">1</span>])</span><br><span class="line">                new_lists.append(merge_list)</span><br><span class="line">            <span class="keyword">if</span> len(lists) % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">                new_lists.append(lists[len(lists) - <span class="number">1</span>])</span><br><span class="line">                </span><br><span class="line">            lists = new_lists</span><br><span class="line">        <span class="keyword">return</span> lists[<span class="number">0</span>]</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, head1, head2)</span>:</span></span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        tail = dummy</span><br><span class="line">        <span class="keyword">while</span> head1 <span class="keyword">and</span> head2:</span><br><span class="line">            <span class="keyword">if</span> head1.val &lt; head2.val:</span><br><span class="line">                tail.next = head1</span><br><span class="line">                head1 = head1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tail.next = head2</span><br><span class="line">                head2 = head2.next</span><br><span class="line">            tail = tail.next</span><br><span class="line">        <span class="keyword">if</span> head1:</span><br><span class="line">            tail.next = head1</span><br><span class="line">        <span class="keyword">if</span> head2:</span><br><span class="line">            tail.next = head2</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 方法三 k个数的min heap</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeKLists</span><span class="params">(self, lists)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type lists: List[ListNode]</span><br><span class="line">        :rtype: ListNode</span><br><span class="line">        """</span></span><br><span class="line">        heap = []</span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> lists:</span><br><span class="line">            <span class="keyword">if</span> node: </span><br><span class="line">                heap.append((node.val, node))</span><br><span class="line">        heapq.heapify(heap)</span><br><span class="line">        head = ListNode(<span class="number">0</span>)</span><br><span class="line">        curr = head</span><br><span class="line">        <span class="keyword">while</span> heap:</span><br><span class="line">            pop = heapq.heappop(heap)</span><br><span class="line">            curr.next = ListNode(pop[<span class="number">0</span>])</span><br><span class="line">            curr = curr.next</span><br><span class="line">            <span class="keyword">if</span> pop[<span class="number">1</span>].next: </span><br><span class="line">                heapq.heappush(heap, (pop[<span class="number">1</span>].next.val, pop[<span class="number">1</span>].next))</span><br><span class="line">        <span class="keyword">return</span> head.next</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>合并k个排序链表，并且返回合并后的排序链表。尝试分析和描述其复杂度。</p>
</blockquote>
<p><strong>样例</strong><br>给出3个排序链表<strong>[2-&gt;4-&]]>
    </summary>
    
      <category term="Divide and Conquer" scheme="http://yoursite.com/tags/Divide-and-Conquer/"/>
    
      <category term="Heap" scheme="http://yoursite.com/tags/Heap/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="Recursion" scheme="http://yoursite.com/tags/Recursion/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[109 Convert Sorted List to Binary Search Tree]]></title>
    <link href="http://yoursite.com/2016/06/05/109-Convert-Sorted-List-to-Binary-Search-Tree/"/>
    <id>http://yoursite.com/2016/06/05/109-Convert-Sorted-List-to-Binary-Search-Tree/</id>
    <published>2016-06-05T20:38:38.000Z</published>
    <updated>2016-06-06T03:40:00.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出一个所有元素以升序排序的单链表，将它转换成一棵高度平衡的二分查找树</p>
</blockquote>
<h3 id="解题思路">解题思路</h3><ul>
<li>跟二叉树相关 - 分治法，递归求解</li>
<li>链表问题，有序链表，如果将节点中的所有值都存入数组，本题目可以转化为Convert Sorted Array to Binary Search Tree，时间复杂度是O(n)，前序构建二叉树</li>
<li>数组访问任意一个元素时间复杂度是O(1)，而链表不行。如果在链表上每次查找中点，总时间复杂度O(nlogn)<ul>
<li>构建树的层数 - logn</li>
<li>每一次找中点 - O(n)</li>
</ul>
</li>
<li>另外一种优化O(nlogn) =&gt; O(n)，因为对于BST来说，中序遍历的结果就是一个从小到大的有序序列。所以尝试通过遍历一个有序的linked list，利用类似中序遍历的方式构建BST。从下到上构建这棵树，用一个current变量记录链表的当前节点。sortedListToBSTHelper的定义是：将current指针开头的，从start到end的linked list转变为BST，每次current指针指向下一个node。</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortedListToBST</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type head: ListNode</span><br><span class="line">        :rtype: TreeNode</span><br><span class="line">        """</span></span><br><span class="line">        self.current = head</span><br><span class="line">        size = self.getListLength(head)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.sortedListToBSTHelper(size)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getListLength</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        size = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            size += <span class="number">1</span></span><br><span class="line">            head = head.next</span><br><span class="line">        <span class="keyword">return</span> size</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortedListToBSTHelper</span><span class="params">(self, size)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> size &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        left = self.sortedListToBSTHelper(size / <span class="number">2</span>)</span><br><span class="line">        root = TreeNode(self.current.val)</span><br><span class="line">        self.current = self.current.next</span><br><span class="line">        right = self.sortedListToBSTHelper(size - <span class="number">1</span> - size / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        root.left = left</span><br><span class="line">        root.right = right</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出一个所有元素以升序排序的单链表，将它转换成一棵高度平衡的二分查找树</p>
</blockquote>
<h3 id="解题思路">解题思路</h3><ul>
<li>跟二叉树相关 - 分治法，递归求解</]]>
    </summary>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[108 Convert Sorted Array to Binary Search Tree]]></title>
    <link href="http://yoursite.com/2016/06/05/108-Convert-Sorted-Array-to-Binary-Search-Tree/"/>
    <id>http://yoursite.com/2016/06/05/108-Convert-Sorted-Array-to-Binary-Search-Tree/</id>
    <published>2016-06-05T20:07:46.000Z</published>
    <updated>2016-06-06T03:09:04.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给一个排序数组（从小到大），将其转换为一棵高度最小的排序二叉树。</p>
</blockquote>
<p><strong>样例</strong><br>给出数组 [1,2,3,4,5,6,7], 返回<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     <span class="number">4</span></span><br><span class="line">   /   \</span><br><span class="line">  <span class="number">2</span>     <span class="number">6</span></span><br><span class="line"> / \    / \</span><br><span class="line"><span class="number">1</span>   <span class="number">3</span>  <span class="number">5</span>   <span class="number">7</span></span><br></pre></td></tr></table></figure></p>
<h3 id="解题思路">解题思路</h3><ul>
<li>根据排序数组构建查找二叉树，分治的思想，每次向下递归构建左右子树</li>
<li>时间复杂度O(n) 可以简单想每个元素被访问到了几次</li>
<li>空间复杂度O(logn) 递归的栈的大小</li>
<li>相似题目Convert Sorted List to Binary Search Tree</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortedArrayToBST</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type nums: List[int]</span><br><span class="line">        :rtype: TreeNode</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> nums:</span><br><span class="line">            <span class="keyword">return</span> self.buildTree(nums, <span class="number">0</span>, len(nums) - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">buildTree</span><span class="params">(self, nums, start, end)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> start &gt; end:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        root = TreeNode(nums[(start + end) / <span class="number">2</span>])</span><br><span class="line">        root.left = self.buildTree(nums, start, (start + end) / <span class="number">2</span> - <span class="number">1</span>)</span><br><span class="line">        root.right = self.buildTree(nums, (start + end) / <span class="number">2</span> + <span class="number">1</span>, end)</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给一个排序数组（从小到大），将其转换为一棵高度最小的排序二叉树。</p>
</blockquote>
<p><strong>样例</strong><br>给出数组 [1,2,3,4,5,6,7], 返回<br>]]>
    </summary>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Binary Search Tree" scheme="http://yoursite.com/tags/Binary-Search-Tree/"/>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[82 Remove Duplicates from Sorted List II]]></title>
    <link href="http://yoursite.com/2016/06/05/82-Remove-Duplicates-from-Sorted-List-II/"/>
    <id>http://yoursite.com/2016/06/05/82-Remove-Duplicates-from-Sorted-List-II/</id>
    <published>2016-06-05T19:16:25.000Z</published>
    <updated>2016-06-06T02:17:04.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个排序链表，删除所有重复的元素只留下原链表中没有重复的元素。</p>
</blockquote>
<p><strong>样例</strong><br>给出 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5-&gt;null，返回 1-&gt;2-&gt;5-&gt;null<br>给出 1-&gt;1-&gt;1-&gt;2-&gt;3-&gt;null，返回 2-&gt;3-&gt;null</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>基础链表操作，与Remove Duplicates from Sorted List I的区别是如果有重复，重复的节点全部删除</li>
<li>因为头节点有被删除的可能，所以使用dummy node</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteDuplicates</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type head: ListNode</span><br><span class="line">        :rtype: ListNode</span><br><span class="line">        """</span></span><br><span class="line">        DummyNode = ListNode(<span class="number">0</span>)</span><br><span class="line">        DummyNode.next = head</span><br><span class="line">        </span><br><span class="line">        current = DummyNode</span><br><span class="line">        <span class="keyword">while</span> current.next != <span class="keyword">None</span> <span class="keyword">and</span> current.next.next != <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">if</span> current.next.val == current.next.next.val:</span><br><span class="line">                temp = current.next.val</span><br><span class="line">                <span class="keyword">while</span> current.next != <span class="keyword">None</span> <span class="keyword">and</span> current.next.val == temp:</span><br><span class="line">                    current.next = current.next.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                current = current.next</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> DummyNode.next</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个排序链表，删除所有重复的元素只留下原链表中没有重复的元素。</p>
</blockquote>
<p><strong>样例</strong><br>给出 1-&gt;2-&gt;3-&gt;3-&gt;]]>
    </summary>
    
      <category term="Dummy Node" scheme="http://yoursite.com/tags/Dummy-Node/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
</feed>
