<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Code Chemistry]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-06-26T23:00:29.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Jason Yuan]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[544 Top k Largest Numbers]]></title>
    <link href="http://yoursite.com/2016/06/26/544-Top-k-Largest-Numbers/"/>
    <id>http://yoursite.com/2016/06/26/544-Top-k-Largest-Numbers/</id>
    <published>2016-06-26T15:59:50.000Z</published>
    <updated>2016-06-26T23:00:29.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>在一个数组中找到前K大的数</p>
</blockquote>
<p><strong>样例</strong><br>给出 [3,10,1000,-99,4,100], k = 3.<br>返回 [1000, 100, 10]</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>方法一：快速排序，然后取出前k大的数。时间复杂度O(n*logn + k)</li>
<li><p>方法二：维护一个大小为k的最大堆/最小堆，代码如下。时间复杂度为O(n * logk)</p>
</li>
<li><p>关于Heap</p>
<ul>
<li>在python中有两个接口：<strong>heapq</strong>和<strong>Queue.PriorityQueue</strong>。其中PriorityQueue module is using the <strong>heapq</strong> module which is slower because it adds locks, encapsulation, and a nice object oriented API.</li>
<li>heapq的使用：<ul>
<li>heapq.<strong>heappush</strong>: Push the value <em>item</em> onto the <em>heap</em>, maintaining the heap invariant.</li>
<li>heapq.<strong>heappop</strong>: Pop and return the smallest item from the <em>heap</em>, maintaining the heap invariant.</li>
<li>heapq.<strong>heapify</strong>: Transform list <em>x</em> into a heap, in-place, in linear time.</li>
</ul>
</li>
<li>Queue.PriorityQueue的使用 (myqueue = Queue.PriorityQueue)<ul>
<li>myqueue.put()</li>
<li>myqueue.get()</li>
<li>myqueue.qsize()</li>
<li>myqueue.empty()</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="string">'''</span><br><span class="line">    @param &#123;int[]&#125; nums an integer array</span><br><span class="line">    @param &#123;int&#125; k an integer</span><br><span class="line">    @return &#123;int[]&#125; the top k largest numbers in array</span><br><span class="line">    '''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">topk</span><span class="params">(self, nums, k)</span>:</span></span><br><span class="line">        <span class="comment"># Write your code here</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums <span class="keyword">or</span> k == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">            </span><br><span class="line">        MaxHeap = Queue.PriorityQueue()</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            MaxHeap.put(-num)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">            res.append(-MaxHeap.get())</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>在一个数组中找到前K大的数</p>
</blockquote>
<p><strong>样例</strong><br>给出 [3,10,1000,-99,4,100], k = 3.<br>返回 [1000, 1]]>
    </summary>
    
      <category term="Heap" scheme="http://yoursite.com/tags/Heap/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="Priority Queue" scheme="http://yoursite.com/tags/Priority-Queue/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[128 Hash Function]]></title>
    <link href="http://yoursite.com/2016/06/25/128-Hash-Function/"/>
    <id>http://yoursite.com/2016/06/25/128-Hash-Function/</id>
    <published>2016-06-25T23:15:32.000Z</published>
    <updated>2016-06-26T06:16:12.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>在数据结构中，哈希函数是用来将一个字符串（或任何其他类型）转化为小于哈希表大小且大于等于零的整数。一个好的哈希函数可以尽可能少地产生冲突。一种广泛使用的哈希函数算法是使用数值33，假设任何字符串都是基于33的一个大整数。给出一个字符串作为key和一个哈希表的大小，返回这个字符串的哈希值。</p>
</blockquote>
<p>对于key=”abcd” 并且 size=100， 返回 78</p>
<h3 id="解题思路：">解题思路：</h3><ul>
<li><p>关于哈希表：</p>
<ul>
<li>哈希表在内存中是一个事先开辟好的数组，通过hash function把一个key转化为某一个index，来实现O(1)的查找</li>
<li>理想状态下，每次算出的index都是唯一的，而实际上会有Collision</li>
<li>hash function设计标准是越乱越没有规则越好，以避免Collision，一般是通过某种方式将key转化为一个integer然后对hash table size取模</li>
<li>哈希表的size最好要是所要存的数字数量的10倍，当size不够时，需要rehashing。</li>
</ul>
</li>
<li><p>如何处理冲突 - Collision</p>
<ul>
<li>Open hashing - 冲突的话，index下面采用linked list</li>
<li>Closed hashing - 如果有冲突，则向前或者向后位移。致命缺点，不支持删除，所以几乎没人采用</li>
</ul>
</li>
<li><p>将key转化为整数的方式有：</p>
<ul>
<li>MD5, 但是耗费较大</li>
<li>APR hash function - magic number 33(只是经验值)</li>
</ul>
</li>
<li><p>Python中char和integer之间的转换</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#62;&#62;&#62;ord(&#34;a&#34;)&#10;97&#10;&#62;&#62;&#62;chr(97)&#10;&#39;a&#39;</span><br></pre></td></tr></table></figure>
</li>
<li><p>小技巧，如何计算a * 33^3 + b * 33^2 + c * 33 + d</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum = a * 33&#10;sum = (a * 33 + b) * 33&#10;sum = (a * 33^2 + b * 33 + c) * 33&#10;sum = (a * 33^3 + b * 33^2 + c * 33 + d) * 33&#10;...</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="string">"""</span><br><span class="line">    @param key: A String you should hash</span><br><span class="line">    @param HASH_SIZE: An integer</span><br><span class="line">    @return an integer</span><br><span class="line">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hashCode</span><span class="params">(self, key, HASH_SIZE)</span>:</span></span><br><span class="line">        sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> key:</span><br><span class="line">            sum = sum * <span class="number">33</span> + ord(char)</span><br><span class="line">            sum = sum % HASH_SIZE</span><br><span class="line">        <span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>在数据结构中，哈希函数是用来将一个字符串（或任何其他类型）转化为小于哈希表大小且大于等于零的整数。一个好的哈希函数可以尽可能少地产生冲突。一种广泛使用的哈希函数算法是使用数值33，假设任何字符串都是基于33的一]]>
    </summary>
    
      <category term="Hash" scheme="http://yoursite.com/tags/Hash/"/>
    
      <category term="Hash Function" scheme="http://yoursite.com/tags/Hash-Function/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[49 Sort Letters by Case]]></title>
    <link href="http://yoursite.com/2016/06/19/49-Sort-Letters-by-Case/"/>
    <id>http://yoursite.com/2016/06/19/49-Sort-Letters-by-Case/</id>
    <published>2016-06-20T02:09:04.000Z</published>
    <updated>2016-06-20T09:09:56.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个只包含字母的字符串，按照先小写字母后大写字母的顺序进行排序。</p>
</blockquote>
<p>给出<strong>“abAcD”</strong>，一个可能的答案为<strong>“acbAD”</strong></p>
<p>小写字母或者大写字母他们之间不一定要保持在原始字符串中的相对位置。<br>在原地扫描一遍完成</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>Two Pointers  - 对撞型指针问题</li>
<li>做指针和右指针指向的字母，可能出现四种情况需要考虑：<ul>
<li>左：小写 | 右：小写 ====&gt; 左指针左移</li>
<li>左：大写 | 右：小写 ====&gt; 交换字母</li>
<li>左：大写 | 右：大写 ====&gt; 右指针右移</li>
<li>左：小写 | 右：小写 ====&gt; 左指针左移，右指针右移</li>
</ul>
</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="string">"""</span><br><span class="line">    @param chars: The letters array you should sort.</span><br><span class="line">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortLetters</span><span class="params">(self, chars)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> chars <span class="keyword">or</span> len(chars) &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> chars</span><br><span class="line">            </span><br><span class="line">        left, right = <span class="number">0</span>, len(chars) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            <span class="keyword">if</span> ord(chars[left]) &lt; <span class="number">96</span> <span class="keyword">and</span> ord(chars[right]) &gt; <span class="number">96</span>:</span><br><span class="line">                chars[left], chars[right] = chars[right], chars[left]</span><br><span class="line">            <span class="keyword">elif</span> ord(chars[left]) &lt; <span class="number">96</span> <span class="keyword">and</span> ord(chars[right]) &lt; <span class="number">96</span>:</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> ord(chars[left]) &gt; <span class="number">96</span> <span class="keyword">and</span> ord(chars[right]) &gt; <span class="number">96</span>:</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left += <span class="number">1</span> </span><br><span class="line">                right -= <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个只包含字母的字符串，按照先小写字母后大写字母的顺序进行排序。</p>
</blockquote>
<p>给出<strong>“abAcD”</strong>，一个可能的答案为<strong>“acbAD]]>
    </summary>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
      <category term="Two Pointers" scheme="http://yoursite.com/tags/Two-Pointers/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[4 Median of two Sorted Arrays]]></title>
    <link href="http://yoursite.com/2016/06/19/4-Median-of-two-Sorted-Arrays/"/>
    <id>http://yoursite.com/2016/06/19/4-Median-of-two-Sorted-Arrays/</id>
    <published>2016-06-20T01:27:04.000Z</published>
    <updated>2016-06-20T08:27:36.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>两个排序的数组A和B分别含有m和n个数，找到两个排序数组的中位数，要求时间复杂度应为O(log (m+n))。</p>
</blockquote>
<p><strong>样例</strong><br>给出数组A =<strong> [1,2,3,4,5,6]</strong> B = <strong>[2,3,4,5]</strong>，中位数3.5<br>给出数组A = <strong>[1,2,3]</strong> B = <strong>[4,5]</strong>，中位数 3</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>根据题目要求的时间复杂度是O(log(m+n))可知，必须要有个类似于binary search一样，每次操作可以扔一半。</li>
<li>如果数组A和B一个含有n个元素，那么,<ul>
<li>如果n是奇数，则中位数是合并数组的第n/2+1个数</li>
<li>如果n是偶数，则中位数是合并数组的第n/2个数和n/2+1个数的平均数</li>
</ul>
</li>
<li>最后为题转化为如何求两个排序数组的第k大的数，时间复杂度为O(log(m+n))</li>
<li>思路：每次找A的k/2的位置和B的k/2的位置的数与相比较<ul>
<li>如果A[k/2] &lt; B[k/2]，则扔掉A的前k/2个数，因为第k大的数一定不在其中。找第k大的数转化为，在剩下的A数组和B数组中找第k/2大的数</li>
<li>如果A[k/2] &gt;= B[k/2]，则扔掉B的前k/2个数，因为第k大的数一定不在其中。找第k大的数转化为，在剩下的B数组和A数组中找第k/2大的数</li>
</ul>
</li>
<li><strong>注意</strong>：如果要求返回float类型，要<code>/ 2.0</code>而不是<code>/ 2</code></li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMedianSortedArrays</span><span class="params">(self, nums1, nums2)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type nums1: List[int]</span><br><span class="line">        :type nums2: List[int]</span><br><span class="line">        :rtype: float</span><br><span class="line">        """</span></span><br><span class="line">        n = len(nums1) + len(nums2)</span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> self.findKthNum(nums1, nums2, n / <span class="number">2</span> + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> (self.findKthNum(nums1, nums2, n / <span class="number">2</span>) + self.findKthNum(nums1, nums2, n / <span class="number">2</span> + <span class="number">1</span>)) / <span class="number">2.0</span></span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findKthNum</span><span class="params">(self, nums1, nums2, k)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(nums1) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> nums2[k - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">elif</span> len(nums2) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> nums1[k -<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">elif</span> k == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> min(nums1[<span class="number">0</span>], nums2[<span class="number">0</span>])</span><br><span class="line">        </span><br><span class="line">        a = nums1[k / <span class="number">2</span> - <span class="number">1</span>] <span class="keyword">if</span> k / <span class="number">2</span> &lt;= len(nums1) <span class="keyword">else</span> <span class="keyword">None</span></span><br><span class="line">        b = nums2[k / <span class="number">2</span> - <span class="number">1</span>] <span class="keyword">if</span> k / <span class="number">2</span> &lt;= len(nums2) <span class="keyword">else</span> <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">if</span> b <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> (a <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> a &lt; b):</span><br><span class="line">            <span class="keyword">return</span> self.findKthNum(nums1[k / <span class="number">2</span>:], nums2, k - k / <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.findKthNum(nums1, nums2[k / <span class="number">2</span>:], k - k / <span class="number">2</span>)</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>两个排序的数组A和B分别含有m和n个数，找到两个排序数组的中位数，要求时间复杂度应为O(log (m+n))。</p>
</blockquote>
<p><strong>样例</strong><br>给出数组A]]>
    </summary>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[1 Two Sum]]></title>
    <link href="http://yoursite.com/2016/06/19/1-Two-Sum/"/>
    <id>http://yoursite.com/2016/06/19/1-Two-Sum/</id>
    <published>2016-06-19T16:27:40.000Z</published>
    <updated>2016-06-19T23:28:06.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给一个整数数组，找到两个数使得他们的和等于一个给定的数target。<br>你需要实现的函数twoSum需要返回这两个数的下标, 并且第一个下标小于第二个下标。注意这里下标的范围是1到n，不是以0开头。</p>
</blockquote>
<p>numbers=[2, 7, 11, 15],  target=9, return [1, 2]</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>对撞型指针</li>
<li>由于要返回下标，所以先建立一个hash map储存每个值得下标</li>
<li>两个指针分别从数组的头跟尾向中间扫描，如果两个数的和等于target则回到hash map中找到相应最小的下标返回，否则相应的移动头指针或者尾指针，知道两个指针相撞，结束</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type nums: List[int]</span><br><span class="line">        :type target: int</span><br><span class="line">        :rtype: List[int]</span><br><span class="line">        """</span></span><br><span class="line">        index = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i, num <span class="keyword">in</span> enumerate(nums):</span><br><span class="line">            <span class="keyword">if</span> num <span class="keyword">not</span> <span class="keyword">in</span> index:</span><br><span class="line">                index[num] = [i]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                index[num].append(i)</span><br><span class="line">                </span><br><span class="line">        sortedNums = sorted(nums)</span><br><span class="line">        i, j = <span class="number">0</span>, len(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; j:</span><br><span class="line">            <span class="keyword">if</span> sortedNums[i] + sortedNums[j] == target:</span><br><span class="line">                <span class="keyword">if</span> sortedNums[i] == sortedNums[j]:</span><br><span class="line">                    <span class="keyword">return</span> [index[sortedNums[i]][<span class="number">0</span>], index[sortedNums[i]][<span class="number">1</span>]]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    res = [index[sortedNums[i]][<span class="number">0</span>], index[sortedNums[j]][<span class="number">0</span>]]</span><br><span class="line">                    <span class="keyword">return</span> sorted(res)</span><br><span class="line">            <span class="keyword">elif</span> sortedNums[i] + sortedNums[j] &gt; target:</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                i += <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给一个整数数组，找到两个数使得他们的和等于一个给定的数target。<br>你需要实现的函数twoSum需要返回这两个数的下标, 并且第一个下标小于第二个下标。注意这里下标的范围是1到n，不是以0开头。</p>]]>
    </summary>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Two Pointers" scheme="http://yoursite.com/tags/Two-Pointers/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[533 Two Sum Closest]]></title>
    <link href="http://yoursite.com/2016/06/19/533-Two-Sum-Closest/"/>
    <id>http://yoursite.com/2016/06/19/533-Two-Sum-Closest/</id>
    <published>2016-06-19T16:03:28.000Z</published>
    <updated>2016-06-19T23:03:57.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>找到两个数字使得他们和最接近target</p>
</blockquote>
<p><strong>样例</strong><br>nums = [-1, 2, 1, -4],target = 4.<br>最接近值为 1</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>对撞型指针问题，思路与Two Sum类似 O(n2) =&gt; O(n)</li>
<li>两个指针分别从数组的头跟尾向中间移动，相比于两次for循环，避免了不必要的扫描</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param &#123;int[]&#125; nums an integer array</span></span><br><span class="line">    <span class="comment"># @param &#123;int&#125; target an integer</span></span><br><span class="line">    <span class="comment"># @return &#123;int&#125; the difference between the sum and the target</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSumCloset</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">        <span class="comment"># Write your code here</span></span><br><span class="line">        nums.sort()</span><br><span class="line">        i, j = <span class="number">0</span>, len(nums) - <span class="number">1</span></span><br><span class="line">        diff = sys.maxint</span><br><span class="line">        <span class="keyword">while</span> i &lt; j:</span><br><span class="line">            <span class="keyword">if</span> nums[i] + nums[j] &lt; target:</span><br><span class="line">                diff = min(diff, target - nums[i] - nums[j])</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                diff = min(diff, nums[i] + nums[j] - target)</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> diff</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>找到两个数字使得他们和最接近target</p>
</blockquote>
<p><strong>样例</strong><br>nums = [-1, 2, 1, -4],target = 4.<br>最接近]]>
    </summary>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="Two Pointers" scheme="http://yoursite.com/tags/Two-Pointers/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[350 Intersection of Two Array II]]></title>
    <link href="http://yoursite.com/2016/06/17/350-Intersection-of-Two-Array-II/"/>
    <id>http://yoursite.com/2016/06/17/350-Intersection-of-Two-Array-II/</id>
    <published>2016-06-18T02:22:52.000Z</published>
    <updated>2016-06-18T09:23:29.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>计算两个数组的交<br><strong>注意事项</strong><br>每个元素出现次数得和在数组里一样答案可以以任意顺序给出</p>
</blockquote>
<p><strong>样例</strong><br>nums1 = [1, 2, 2, 1], nums2 = [2, 2], 返回 [2, 2].</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>遍历第一个数组，构建hash map，计数</li>
<li>遍历第二个数组，如果存在在hash map而且个数大于零，加入res数组</li>
<li>其他方法：先排序，两根指针</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intersect</span><span class="params">(self, nums1, nums2)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type nums1: List[int]</span><br><span class="line">        :type nums2: List[int]</span><br><span class="line">        :rtype: List[int]</span><br><span class="line">        """</span></span><br><span class="line">        map = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> nums1:</span><br><span class="line">            <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> map:</span><br><span class="line">                map[x] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                map[x] += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> nums2:</span><br><span class="line">            <span class="keyword">if</span> y <span class="keyword">in</span> map <span class="keyword">and</span> map[y] &gt; <span class="number">0</span>:</span><br><span class="line">                res.append(y)</span><br><span class="line">                map[y] -= <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>计算两个数组的交<br><strong>注意事项</strong><br>每个元素出现次数得和在数组里一样答案可以以任意顺序给出</p>
</blockquote>
<p><strong>样例</strong>]]>
    </summary>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Hash Map" scheme="http://yoursite.com/tags/Hash-Map/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Sort" scheme="http://yoursite.com/tags/Sort/"/>
    
      <category term="Two Pointers" scheme="http://yoursite.com/tags/Two-Pointers/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[138 Subarray Sum]]></title>
    <link href="http://yoursite.com/2016/06/17/138-Subarray-Sum/"/>
    <id>http://yoursite.com/2016/06/17/138-Subarray-Sum/</id>
    <published>2016-06-18T01:33:02.000Z</published>
    <updated>2016-06-18T08:34:30.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个整数数组，找到和为零的子数组。你的代码应该返回满足要求的子数组的起始位置和结束位置。</p>
</blockquote>
<p>给出<strong>[-3, 1, 2, -3, 4]</strong>，返回<strong>[0, 2]</strong> 或者<strong> [1, 3].</strong></p>
<h3 id="解题思路">解题思路</h3><ul>
<li>使用一个hash map记录前n项和，初始化dict[0] = -1 =&gt; 前-1 + 1 = 0项和等于0</li>
<li>以此类推，前1项和等于-3，前2项和等于-2，前3项和等于0，此时发现0存在于dict中，dict[0] = -1，所以加入<strong>-1 + 1</strong>和<strong>i</strong>，res = [0, 2]</li>
<li>也就是说一旦发现前i项和等于前j项和，那么<strong>i~j这一段</strong>的和等于零，把坐标加入到res数组</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="string">"""</span><br><span class="line">    @param nums: A list of integers</span><br><span class="line">    @return: A list of integers includes the index of the first number </span><br><span class="line">             and the index of the last number</span><br><span class="line">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subarraySum</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        dict = &#123;&#125;</span><br><span class="line">        dict[<span class="number">0</span>] = -<span class="number">1</span></span><br><span class="line">        sum = <span class="number">0</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i, num <span class="keyword">in</span> enumerate(nums):</span><br><span class="line">            sum += num</span><br><span class="line">            <span class="keyword">if</span> sum <span class="keyword">in</span> dict:</span><br><span class="line">                res.append(dict[sum] + <span class="number">1</span>)</span><br><span class="line">                res.append(i)</span><br><span class="line">                <span class="keyword">return</span> res</span><br><span class="line">            dict[sum] = i</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个整数数组，找到和为零的子数组。你的代码应该返回满足要求的子数组的起始位置和结束位置。</p>
</blockquote>
<p>给出<strong>[-3, 1, 2, -3, 4]</strong>，]]>
    </summary>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Hash Map" scheme="http://yoursite.com/tags/Hash-Map/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[349 Intersection of Two Arrays]]></title>
    <link href="http://yoursite.com/2016/06/13/349-Intersection-of-Two-Arrays/"/>
    <id>http://yoursite.com/2016/06/13/349-Intersection-of-Two-Arrays/</id>
    <published>2016-06-13T23:46:57.000Z</published>
    <updated>2016-06-18T08:38:50.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>返回两个数组的交</p>
</blockquote>
<p><strong>样例</strong><br>nums1 = [1, 2, 2, 1], nums2 = [2, 2], 返回 [2]</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>方法一：hash map 实现如下</li>
<li>方法二：先把连个数组排序，再merge</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param &#123;int[]&#125; nums1 an integer array</span></span><br><span class="line">    <span class="comment"># @param &#123;int[]&#125; nums2 an integer array</span></span><br><span class="line">    <span class="comment"># @return &#123;int[]&#125; an integer array</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intersection</span><span class="params">(self, nums1, nums2)</span>:</span></span><br><span class="line">        <span class="comment"># Write your code here</span></span><br><span class="line">        map = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> nums1:</span><br><span class="line">            <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> map:</span><br><span class="line">                map[x] = <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> nums2:</span><br><span class="line">            <span class="keyword">if</span> y <span class="keyword">in</span> map <span class="keyword">and</span> map[y] == <span class="number">1</span>:</span><br><span class="line">                res.append(y)</span><br><span class="line">                map[y] -= <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>返回两个数组的交</p>
</blockquote>
<p><strong>样例</strong><br>nums1 = [1, 2, 2, 1], nums2 = [2, 2], 返回 [2]</p>
<h3]]>
    </summary>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Hash Map" scheme="http://yoursite.com/tags/Hash-Map/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[148 Sort List]]></title>
    <link href="http://yoursite.com/2016/06/12/148-Sort-List/"/>
    <id>http://yoursite.com/2016/06/12/148-Sort-List/</id>
    <published>2016-06-13T00:56:58.000Z</published>
    <updated>2016-06-13T08:02:07.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>在 O(<em>n</em> log <em>n</em>) 时间复杂度和常数级的空间复杂度下给链表排序。</p>
</blockquote>
<p><strong>样例</strong>给出 1-&gt;3-&gt;2-&gt;null，给它排序变成 1-&gt;2-&gt;3-&gt;null.</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>方法一：遍历链表，存入数组中，排序数组，然后重新构建链表</li>
<li>方法二：直接操作链表，Merge Sort，先局部有序再整体有序，找中点，然后左半部分和右半部分分别递归merge sort (Divide and Conquer)</li>
<li>总结：<ul>
<li>对于数组，quick sort好于merge sort，因为quick sort是in-place，而merge sort需要额外空间，开辟空间/回收空间都要耗费时间</li>
<li>对于链表，merge sort并不需要额外空间</li>
</ul>
</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortList</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type head: ListNode</span><br><span class="line">        :rtype: ListNode</span><br><span class="line">        """</span></span><br><span class="line">        ans = []</span><br><span class="line">        tmp = head</span><br><span class="line">        <span class="keyword">while</span> tmp != <span class="keyword">None</span>:</span><br><span class="line">            ans.append(tmp.val)</span><br><span class="line">            tmp = tmp.next</span><br><span class="line"></span><br><span class="line">        ans.sort()</span><br><span class="line">        tmp = head</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line">            tmp.val = i</span><br><span class="line">            tmp = tmp.next</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortList</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type head: ListNode</span><br><span class="line">        :rtype: ListNode</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> head == <span class="keyword">None</span> <span class="keyword">or</span> head.next == <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">        mid = self.findMiddle(head)</span><br><span class="line"></span><br><span class="line">        right = self.sortList(mid.next)</span><br><span class="line">        mid.next = <span class="keyword">None</span></span><br><span class="line">        left = self.sortList(head)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.merge(left, right)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMiddle</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        slow, fast = head, head.next</span><br><span class="line">        <span class="keyword">while</span> fast != <span class="keyword">None</span> <span class="keyword">and</span> fast.next != <span class="keyword">None</span>:</span><br><span class="line">            fast = fast.next.next</span><br><span class="line">            slow = slow.next</span><br><span class="line">        <span class="keyword">return</span> slow    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, head1, head2)</span>:</span></span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        head = dummy</span><br><span class="line">        <span class="keyword">while</span> head1 <span class="keyword">and</span> head2:</span><br><span class="line">            <span class="keyword">if</span> head1.val &lt; head2.val:</span><br><span class="line">                head.next = head1</span><br><span class="line">                head1 = head1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                head.next = head2</span><br><span class="line">                head2 = head2.next</span><br><span class="line">            head = head.next</span><br><span class="line">        <span class="keyword">if</span> head1:</span><br><span class="line">            head.next = head1</span><br><span class="line">        <span class="keyword">if</span> head2:</span><br><span class="line">            head.next = head2</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>在 O(<em>n</em> log <em>n</em>) 时间复杂度和常数级的空间复杂度下给链表排序。</p>
</blockquote>
<p><strong>样例</strong>给出 1-&gt;3-]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="Merge Sort" scheme="http://yoursite.com/tags/Merge-Sort/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[61 Rotate List]]></title>
    <link href="http://yoursite.com/2016/06/12/61-Rotate-List/"/>
    <id>http://yoursite.com/2016/06/12/61-Rotate-List/</id>
    <published>2016-06-13T00:34:08.000Z</published>
    <updated>2016-06-13T07:34:31.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个链表，旋转链表，使得每个节点向右移动k个位置，其中k是一个非负数。</p>
</blockquote>
<p><strong>样例</strong><br>给出链表<strong>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;null</strong>和k=2<br>返回<strong>4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;null</strong></p>
<h3 id="解题思路">解题思路</h3><ul>
<li>分解问题，各个击破</li>
<li>首先找到链表的尾部，并且计算长度</li>
<li>找到需要旋转的起点位置</li>
<li>最后做出相应的连接，旋转链表</li>
<li>注意移动的位置实际是<strong>(k % len)</strong></li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotateRight</span><span class="params">(self, head, k)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type head: ListNode</span><br><span class="line">        :type k: int</span><br><span class="line">        :rtype: ListNode</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> k == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># find the tail</span></span><br><span class="line">        tail = head</span><br><span class="line">        len = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> tail.next != <span class="keyword">None</span>:</span><br><span class="line">            tail = tail.next</span><br><span class="line">            len += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> k % len == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># find the rotate place</span></span><br><span class="line">        slow = fast = head</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(k % len):</span><br><span class="line">            fast = fast.next</span><br><span class="line">        <span class="keyword">while</span> fast.next != <span class="keyword">None</span>:</span><br><span class="line">            fast = fast.next</span><br><span class="line">            slow = slow.next</span><br><span class="line">            </span><br><span class="line">        tail.next = head</span><br><span class="line">        head = slow.next</span><br><span class="line">        slow.next = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个链表，旋转链表，使得每个节点向右移动k个位置，其中k是一个非负数。</p>
</blockquote>
<p><strong>样例</strong><br>给出链表<strong>1-&gt;2-&gt]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[143 Reorder List]]></title>
    <link href="http://yoursite.com/2016/06/12/143-Reorder-List/"/>
    <id>http://yoursite.com/2016/06/12/143-Reorder-List/</id>
    <published>2016-06-13T00:24:36.000Z</published>
    <updated>2016-06-13T07:25:18.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个单链表L: <em>L</em>0→<em>L</em>1→…→<em>L</em>n-1→<em>L</em>n,<br>重新排列后为：<em>L</em>0→<em>L</em>n→<em>L</em>1→<em>L</em>n-1→<em>L</em>2→<em>L</em>n-2→…<br>必须在不改变节点值的情况下进行原地操作。</p>
</blockquote>
<p><strong>样例</strong><br>给出链表 1-&gt;2-&gt;3-&gt;4-&gt;null，重新排列后为1-&gt;4-&gt;2-&gt;3-&gt;null。</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>把题目分解成一个个小的任务</li>
<li>首先根据1-&gt;2-&gt;3-&gt;4，找中点，然后得到两个链表1-&gt;2和3-&gt;4</li>
<li>翻转第二个链表得到1-&gt;2和4-&gt;3</li>
<li>最后合并两个链表得到1-&gt;4-&gt;2-&gt;3</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reorderList</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type head: ListNode</span><br><span class="line">        :rtype: void Do not return anything, modify head in-place instead.</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> head == <span class="keyword">None</span> <span class="keyword">or</span> head.next == <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        mid = self.findMiddle(head)</span><br><span class="line">        tail = self.reverse(mid.next)</span><br><span class="line">        mid.next = <span class="keyword">None</span></span><br><span class="line">        </span><br><span class="line">        self.merge(head, tail)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        newHead = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">while</span> head != <span class="keyword">None</span>:</span><br><span class="line">            temp = head.next</span><br><span class="line">            head.next = newHead</span><br><span class="line">            newHead = head</span><br><span class="line">            head = temp</span><br><span class="line">        <span class="keyword">return</span> newHead</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, head1, head2)</span>:</span></span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">while</span> head1 != <span class="keyword">None</span> <span class="keyword">and</span> head2 != <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">if</span> index % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                dummy.next = head1</span><br><span class="line">                head1 = head1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dummy.next = head2</span><br><span class="line">                head2 = head2.next</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">            dummy = dummy.next</span><br><span class="line">        <span class="keyword">if</span> head1:</span><br><span class="line">            dummy.next = head1</span><br><span class="line">        <span class="keyword">if</span> head2:</span><br><span class="line">            dummy.next = head2</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMiddle</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        slow, fast = head, head.next</span><br><span class="line">        <span class="keyword">while</span> fast <span class="keyword">and</span> fast.next:</span><br><span class="line">            fast = fast.next.next</span><br><span class="line">            slow = slow.next</span><br><span class="line">        <span class="keyword">return</span> slow</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个单链表L: <em>L</em>0→<em>L</em>1→…→<em>L</em>n-1→<em>L</em>n,<br>重新排列后为：<em>L</em>0→<em>L</em>n→<em>L</e]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[234 Palindrome Linked List]]></title>
    <link href="http://yoursite.com/2016/06/12/234-Palindrome-Linked-List/"/>
    <id>http://yoursite.com/2016/06/12/234-Palindrome-Linked-List/</id>
    <published>2016-06-12T23:58:49.000Z</published>
    <updated>2016-06-13T06:59:28.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>设计一种方式检查一个链表是否为回文链表。</p>
</blockquote>
<p><strong>样例</strong><br>1-&gt;2-&gt;1就是一个回文链表。</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>方法一：快慢指针，慢指针一边走一边将经过的节点放入stack，当快指针走到终点，慢指针正好走到中点，并且已经将前半段放入stack，根据stack的特性，之后依次取出跟后半段比对。</li>
<li>方法二：依旧使用快慢指针，取到中点，然后将后半段翻转，比较</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type head: ListNode</span><br><span class="line">        :rtype: bool</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> head == <span class="keyword">None</span> <span class="keyword">or</span> head.next == <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        </span><br><span class="line">        stack = []</span><br><span class="line">        slow, fast = head, head</span><br><span class="line">        <span class="keyword">while</span> fast != <span class="keyword">None</span> <span class="keyword">and</span> fast.next != <span class="keyword">None</span>:</span><br><span class="line">            stack.append(slow.val)</span><br><span class="line">            slow = slow.next</span><br><span class="line">            fast = fast.next.next</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> fast == <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            slow = slow.next</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> slow != <span class="keyword">None</span>:</span><br><span class="line">            cur = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> slow.val != cur:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            slow = slow.next</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type head: ListNode</span><br><span class="line">        :rtype: bool</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> head == <span class="keyword">None</span> <span class="keyword">or</span> head.next == <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        </span><br><span class="line">        slow, fast = head, head</span><br><span class="line">        <span class="keyword">while</span> fast != <span class="keyword">None</span> <span class="keyword">and</span> fast.next != <span class="keyword">None</span>:</span><br><span class="line">            slow = slow.next</span><br><span class="line">            fast = fast.next.next</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> fast == <span class="keyword">None</span>:</span><br><span class="line">            secHalf = self.reverse(slow)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            secHalf = self.reverse(slow.next)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> secHalf != <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">if</span> secHalf.val != head.val:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            secHalf = secHalf.next</span><br><span class="line">            head = head.next</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        </span><br><span class="line">        prev = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">while</span> head != <span class="keyword">None</span>:</span><br><span class="line">            temp = head.next</span><br><span class="line">            head.next = prev</span><br><span class="line">            prev = head</span><br><span class="line">            head = temp</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> prev</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>设计一种方式检查一个链表是否为回文链表。</p>
</blockquote>
<p><strong>样例</strong><br>1-&gt;2-&gt;1就是一个回文链表。</p>
<h3 id="解题思路"]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="Palindrome" scheme="http://yoursite.com/tags/Palindrome/"/>
    
      <category term="Two Pointers" scheme="http://yoursite.com/tags/Two-Pointers/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[511 Swap Two Nodes in Linked List]]></title>
    <link href="http://yoursite.com/2016/06/12/511-Swap-Two-Nodes-in-Linked-List/"/>
    <id>http://yoursite.com/2016/06/12/511-Swap-Two-Nodes-in-Linked-List/</id>
    <published>2016-06-12T17:13:19.000Z</published>
    <updated>2016-06-13T00:13:49.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给你一个链表以及两个权值v1和v2，交换链表中权值为v1和v2的这两个节点。保证链表中节点权值各不相同，如果没有找到对应节点，那么什么也不用做。</p>
</blockquote>
<h3 id="解题思路">解题思路</h3><ul>
<li>基础的链表操作，写一个helper函数，根据head和value找出和value相等的节点和prev节点</li>
<li>比如给出3-&gt;4-&gt;1-&gt;5-&gt;Null 和 1 返回Node(4)和Node(1)</li>
<li>注意<strong>边界情况</strong>，如果v1=4, v2=1 <strong>那么current1和pre2重合，要特殊考虑</strong></li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param &#123;ListNode&#125; head, a ListNode</span></span><br><span class="line">    <span class="comment"># @oaram &#123;int&#125; v1 an integer</span></span><br><span class="line">    <span class="comment"># @param &#123;int&#125; v2 an integer</span></span><br><span class="line">    <span class="comment"># @return &#123;ListNode&#125; a new head of singly-linked list</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swapNodes</span><span class="params">(self, head, v1, v2)</span>:</span></span><br><span class="line">        <span class="comment"># Write your code here</span></span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummy.next = head</span><br><span class="line">        prev1, cur1 = self.findNode(dummy, v1)</span><br><span class="line">        prev2, cur2 = self.findNode(dummy, v2)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> cur1 <span class="keyword">and</span> cur2:</span><br><span class="line">            prev1.next = cur2</span><br><span class="line">            temp = cur2.next</span><br><span class="line">            <span class="keyword">if</span> cur1.next == cur2:</span><br><span class="line">                cur2.next = cur1</span><br><span class="line">                cur1.next = temp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur2.next = cur1.next</span><br><span class="line">                prev2.next = cur1</span><br><span class="line">                cur1.next = temp</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findNode</span><span class="params">(self, head, value)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> head.next != <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">if</span> head.next.val == value:</span><br><span class="line">                <span class="keyword">return</span> head, head.next</span><br><span class="line">            head = head.next</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span>, <span class="keyword">None</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给你一个链表以及两个权值v1和v2，交换链表中权值为v1和v2的这两个节点。保证链表中节点权值各不相同，如果没有找到对应节点，那么什么也不用做。</p>
</blockquote>
<h3 id="解题思路">]]>
    </summary>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[21 Merge Two Sorted List]]></title>
    <link href="http://yoursite.com/2016/06/12/21-Merge-Two-Sorted-List/"/>
    <id>http://yoursite.com/2016/06/12/21-Merge-Two-Sorted-List/</id>
    <published>2016-06-12T16:31:45.000Z</published>
    <updated>2016-06-12T23:35:30.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>将两个排序链表合并为一个新的排序链表</p>
</blockquote>
<p><strong>样例</strong><br>给出 1-&gt;3-&gt;8-&gt;11-&gt;15-&gt;null，2-&gt;null，<br>返回 1-&gt;2-&gt;3-&gt;8-&gt;11-&gt;15-&gt;null。</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>基础链表操作，每次比较连个链表的头，把相对小的加入新链表</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1, l2)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type l1: ListNode</span><br><span class="line">        :type l2: ListNode</span><br><span class="line">        :rtype: ListNode</span><br><span class="line">        """</span></span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        current = dummy</span><br><span class="line">        <span class="keyword">while</span> l1 != <span class="keyword">None</span> <span class="keyword">and</span> l2 != <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">if</span> l1.val &lt; l2.val:</span><br><span class="line">                current.next = l1</span><br><span class="line">                l1 = l1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                current.next = l2</span><br><span class="line">                l2 = l2.next</span><br><span class="line">            current = current.next</span><br><span class="line">        <span class="keyword">if</span> l1 != <span class="keyword">None</span>:</span><br><span class="line">            current.next = l1</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            current.next = l2</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>将两个排序链表合并为一个新的排序链表</p>
</blockquote>
<p><strong>样例</strong><br>给出 1-&gt;3-&gt;8-&gt;11-&gt;15-&gt;null，2-]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[166 Nth to Last Node in List]]></title>
    <link href="http://yoursite.com/2016/06/12/166-Nth-to-Last-Node-in-List/"/>
    <id>http://yoursite.com/2016/06/12/166-Nth-to-Last-Node-in-List/</id>
    <published>2016-06-12T16:08:00.000Z</published>
    <updated>2016-06-12T23:08:29.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>找到单链表倒数第n个节点，保证链表中节点的最少数量为n。</p>
</blockquote>
<p><strong>样例</strong><br>给出链表<strong> 3-&gt;2-&gt;1-&gt;5-&gt;null</strong>和n = 2，返回倒数第二个节点的值1.</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>快慢指针， 快指针先走n步，然后快慢指针一起同步速走，快指针走到头，慢指针即为所求</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span><br><span class="line">Definition of ListNode</span><br><span class="line">class ListNode(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self, val, next=None):</span><br><span class="line">        self.val = val</span><br><span class="line">        self.next = next</span><br><span class="line">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="string">"""</span><br><span class="line">    @param head: The first node of linked list.</span><br><span class="line">    @param n: An integer.</span><br><span class="line">    @return: Nth to last node of a singly linked list. </span><br><span class="line">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nthToLast</span><span class="params">(self, head, n)</span>:</span></span><br><span class="line">        <span class="comment"># write your code here</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        </span><br><span class="line">        slow, fast = head, head</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(n):</span><br><span class="line">            fast = fast.next</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> fast != <span class="keyword">None</span>:</span><br><span class="line">            slow = slow.next</span><br><span class="line">            fast = fast.next</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> slow</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>找到单链表倒数第n个节点，保证链表中节点的最少数量为n。</p>
</blockquote>
<p><strong>样例</strong><br>给出链表<strong> 3-&gt;2-&gt;1-&gt;5]]>
    </summary>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[221 Add Two Numbers II]]></title>
    <link href="http://yoursite.com/2016/06/12/221-Add-Two-Numbers-II/"/>
    <id>http://yoursite.com/2016/06/12/221-Add-Two-Numbers-II/</id>
    <published>2016-06-12T15:55:31.000Z</published>
    <updated>2016-06-12T22:56:42.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>假定用一个链表表示两个数，其中每个节点仅包含一个数字。假设这两个数的数字顺序排列，请设计一种方法将两个数相加，并将其结果表现为链表的形式。</p>
</blockquote>
<p><strong>样例</strong><br>给出 6-&gt;1-&gt;7 + 2-&gt;9-&gt;5。即，617 + 295。<br>返回 9-&gt;1-&gt;2。即，912 。</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>整体思路与Add Two Numbers一样，只不过链表和其表示的数值吮吸相同</li>
<li>借助helper函数，反转链表</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param l1: the first list</span></span><br><span class="line">    <span class="comment"># @param l2: the second list</span></span><br><span class="line">    <span class="comment"># @return: the sum list of l1 and l2 </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addLists2</span><span class="params">(self, l1, l2)</span>:</span></span><br><span class="line">        <span class="comment"># Write your code here</span></span><br><span class="line">        l1 = self.reverse(l1)</span><br><span class="line">        l2 = self.reverse(l2)</span><br><span class="line">        carry = <span class="number">0</span></span><br><span class="line">        Dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        head = Dummy</span><br><span class="line">        <span class="keyword">while</span> l1 != <span class="keyword">None</span> <span class="keyword">and</span> l2 != <span class="keyword">None</span>:</span><br><span class="line">            sum = (l1.val + l2.val + carry) % <span class="number">10</span></span><br><span class="line">            carry = <span class="number">1</span> <span class="keyword">if</span> (l1.val + l2.val + carry) &gt; <span class="number">9</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            head.next = ListNode(sum)</span><br><span class="line">            head = head.next</span><br><span class="line">            l1 = l1.next</span><br><span class="line">            l2 = l2.next</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">while</span> l1 != <span class="keyword">None</span>:</span><br><span class="line">            sum = (l1.val + carry) % <span class="number">10</span></span><br><span class="line">            carry = <span class="number">1</span> <span class="keyword">if</span> l1.val + carry &gt; <span class="number">9</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            head.next = ListNode(sum)</span><br><span class="line">            l1 = l1.next</span><br><span class="line">            head = head.next</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> l2 != <span class="keyword">None</span>:</span><br><span class="line">            sum = (l2.val + carry) % <span class="number">10</span></span><br><span class="line">            carry = <span class="number">1</span> <span class="keyword">if</span> l2.val + carry &gt; <span class="number">9</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            head.next = ListNode(sum)</span><br><span class="line">            l2 = l2.next</span><br><span class="line">            head = head.next</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> carry:</span><br><span class="line">            head.next = ListNode(carry)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> self.reverse(Dummy.next)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">            </span><br><span class="line">        prev = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">while</span> head != <span class="keyword">None</span>:</span><br><span class="line">            temp = head.next</span><br><span class="line">            head.next = prev</span><br><span class="line">            prev = head</span><br><span class="line">            head = temp</span><br><span class="line">        <span class="keyword">return</span> prev</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>假定用一个链表表示两个数，其中每个节点仅包含一个数字。假设这两个数的数字顺序排列，请设计一种方法将两个数相加，并将其结果表现为链表的形式。</p>
</blockquote>
<p><strong>样例</st]]>
    </summary>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2 Add Two Numbers]]></title>
    <link href="http://yoursite.com/2016/06/12/2-Add-Two-Numbers/"/>
    <id>http://yoursite.com/2016/06/12/2-Add-Two-Numbers/</id>
    <published>2016-06-12T15:40:48.000Z</published>
    <updated>2016-06-12T22:41:21.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>你有两个用链表代表的整数，其中每个节点包含一个数字。数字存储按照在原来整数中相反的顺序，使得第一个数字位于链表的开头。写出一个函数将两个整数相加，用链表形式返回和。</p>
</blockquote>
<p><strong>样例</strong><br>给出两个链表 3-&gt;1-&gt;5-&gt;null和5-&gt;9-&gt;2-&gt;null，返回 8-&gt;0-&gt;8-&gt;null</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>简单的链表操作，注意声明一个carry来记录进位的结果</li>
<li>最后要记得check如果carry == 1的情况，否则9-&gt;9 + 1 = 0-&gt;0</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span><span class="params">(self, l1, l2)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type l1: ListNode</span><br><span class="line">        :type l2: ListNode</span><br><span class="line">        :rtype: ListNode</span><br><span class="line">        """</span></span><br><span class="line">        carry = <span class="number">0</span></span><br><span class="line">        Dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        head = Dummy</span><br><span class="line">        <span class="keyword">while</span> l1 != <span class="keyword">None</span> <span class="keyword">and</span> l2 != <span class="keyword">None</span>:</span><br><span class="line">            sum = (l1.val + l2.val + carry) % <span class="number">10</span></span><br><span class="line">            carry = <span class="number">1</span> <span class="keyword">if</span> (l1.val + l2.val + carry) &gt; <span class="number">9</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            head.next = ListNode(sum)</span><br><span class="line">            head = head.next</span><br><span class="line">            l1 = l1.next</span><br><span class="line">            l2 = l2.next</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">while</span> l1 != <span class="keyword">None</span>:</span><br><span class="line">            sum = (l1.val + carry) % <span class="number">10</span></span><br><span class="line">            carry = <span class="number">1</span> <span class="keyword">if</span> l1.val + carry &gt; <span class="number">9</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            head.next = ListNode(sum)</span><br><span class="line">            l1 = l1.next</span><br><span class="line">            head = head.next</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> l2 != <span class="keyword">None</span>:</span><br><span class="line">            sum = (l2.val + carry) % <span class="number">10</span></span><br><span class="line">            carry = <span class="number">1</span> <span class="keyword">if</span> l2.val + carry &gt; <span class="number">9</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            head.next = ListNode(sum)</span><br><span class="line">            l2 = l2.next</span><br><span class="line">            head = head.next</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> carry:</span><br><span class="line">            head.next = ListNode(carry)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Dummy.next</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>你有两个用链表代表的整数，其中每个节点包含一个数字。数字存储按照在原来整数中相反的顺序，使得第一个数字位于链表的开头。写出一个函数将两个整数相加，用链表形式返回和。</p>
</blockquote>
<p><]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[147 Insertion Sort List]]></title>
    <link href="http://yoursite.com/2016/06/12/147-Insertion-Sort-List/"/>
    <id>http://yoursite.com/2016/06/12/147-Insertion-Sort-List/</id>
    <published>2016-06-12T14:43:54.000Z</published>
    <updated>2016-06-12T21:44:28.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>用插入排序对链表排序</p>
</blockquote>
<p><strong>样例</strong><br>Given 1-&gt;3-&gt;2-&gt;0-&gt;null, return 0-&gt;1-&gt;2-&gt;3-&gt;null</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>写一个helper函数，根据一个head和一个Node，可以将Node插入到一段linked list中升序排列的正确位置</li>
<li>一个current指针来遍历要排序的链表，<strong>需要记录一个last值，否则会超时</strong><ul>
<li>如果current &gt;= last，current继续前进</li>
<li>如果current &lt; last，利用helper函数把current插入到前面</li>
</ul>
</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insertionSortList</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type head: ListNode</span><br><span class="line">        :rtype: ListNode</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        </span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummy.next = head</span><br><span class="line">        last = head.val</span><br><span class="line">        <span class="keyword">while</span> head.next != <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">if</span> head.next.val &gt;= last:</span><br><span class="line">                last = head.next.val</span><br><span class="line">                head = head.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.insert(dummy, ListNode(head.next.val))</span><br><span class="line">                head.next = head.next.next</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, head, node)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> head.next != <span class="keyword">None</span> <span class="keyword">and</span> head.next.val &lt;= node.val:</span><br><span class="line">            head = head.next</span><br><span class="line">        node.next = head.next</span><br><span class="line">        head.next = node</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>用插入排序对链表排序</p>
</blockquote>
<p><strong>样例</strong><br>Given 1-&gt;3-&gt;2-&gt;0-&gt;null, return 0-&gt;1]]>
    </summary>
    
      <category term="Insertion Sort" scheme="http://yoursite.com/tags/Insertion-Sort/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[24 Swap Nodes in Pairs]]></title>
    <link href="http://yoursite.com/2016/06/11/24-Swap-Nodes-in-Pairs/"/>
    <id>http://yoursite.com/2016/06/11/24-Swap-Nodes-in-Pairs/</id>
    <published>2016-06-11T23:02:28.000Z</published>
    <updated>2016-06-12T06:04:21.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给一个链表，两两交换其中的节点，然后返回交换后的链表。</p>
</blockquote>
<p><strong>样例</strong><br>给出 1-&gt;2-&gt;3-&gt;4, 你应该返回的链表是 2-&gt;1-&gt;4-&gt;3。</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>由于第一个节点要参与调换 =&gt; Dummy node帮忙</li>
<li>快慢指针，外加一个temp指针，倒来倒去。特别注意while循环的结束条件，不清楚可以用几个小的特殊的例子跑一下。</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swapPairs</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type head: ListNode</span><br><span class="line">        :rtype: ListNode</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> head == <span class="keyword">None</span> <span class="keyword">or</span> head.next == <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        </span><br><span class="line">        Dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        Dummy.next = head</span><br><span class="line">        </span><br><span class="line">        slow, fast = Dummy, Dummy.next</span><br><span class="line">        <span class="keyword">while</span> fast != <span class="keyword">None</span> <span class="keyword">and</span> fast.next != <span class="keyword">None</span>:</span><br><span class="line">            temp = fast.next.next</span><br><span class="line">            slow.next = fast.next</span><br><span class="line">            fast.next.next = fast</span><br><span class="line">            fast.next = temp</span><br><span class="line">            </span><br><span class="line">            slow = fast</span><br><span class="line">            fast = fast.next</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Dummy.next</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给一个链表，两两交换其中的节点，然后返回交换后的链表。</p>
</blockquote>
<p><strong>样例</strong><br>给出 1-&gt;2-&gt;3-&gt;4, 你应该返回的链表是]]>
    </summary>
    
      <category term="Dummy Node" scheme="http://yoursite.com/tags/Dummy-Node/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="Two Pointers" scheme="http://yoursite.com/tags/Two-Pointers/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
</feed>
