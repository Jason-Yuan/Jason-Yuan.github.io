<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Code Chemistry]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-08-01T09:25:18.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Jason Yuan]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[189 Rotate Array]]></title>
    <link href="http://yoursite.com/2016/07/31/189-Rotate-Array/"/>
    <id>http://yoursite.com/2016/07/31/189-Rotate-Array/</id>
    <published>2016-08-01T02:24:52.000Z</published>
    <updated>2016-08-01T09:25:18.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出一个n个元素的数组，向右位移k位。比如 <em>n</em> = 7 and <em>k</em> = 3, 已知数组为[1,2,3,4,5,6,7] 旋转之后为 [5,6,7,1,2,3,4].</p>
</blockquote>
<h3 id="解题思路">解题思路</h3><ul>
<li>跟LintCode中旋转string是一样的思路，三步翻转法</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotate</span><span class="params">(self, nums, k)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type nums: List[int]</span><br><span class="line">        :type k: int</span><br><span class="line">        :rtype: void Do not return anything, modify nums in-place instead.</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        k %= len(nums)</span><br><span class="line">        self.helper(nums, len(nums) - k, len(nums) - <span class="number">1</span>)</span><br><span class="line">        self.helper(nums, <span class="number">0</span>, len(nums) - k - <span class="number">1</span>)</span><br><span class="line">        self.helper(nums, <span class="number">0</span>, len(nums) - <span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, nums, i, j)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; j:</span><br><span class="line">            nums[i], nums[j] = nums[j], nums[i]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            j -= <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出一个n个元素的数组，向右位移k位。比如 <em>n</em> = 7 and <em>k</em> = 3, 已知数组为[1,2,3,4,5,6,7] 旋转之后为 [5,6,7,1,2,3,4].</p>
]]>
    </summary>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[85 Maximal Rectangle]]></title>
    <link href="http://yoursite.com/2016/07/31/85-Maximal-Rectangle/"/>
    <id>http://yoursite.com/2016/07/31/85-Maximal-Rectangle/</id>
    <published>2016-08-01T01:28:47.000Z</published>
    <updated>2016-08-01T08:29:44.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给你一个二维矩阵，权值为False和True，找到一个最大的矩形，使得里面的值全部为True，输出它的面积</p>
</blockquote>
<p><strong>样例</strong><br>给你一个矩阵如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#10;  [1, 1, 0, 0, 1],&#10;  [0, 1, 0, 0, 1],&#10;  [0, 0, 1, 1, 1],&#10;  [0, 0, 1, 1, 1],&#10;  [0, 0, 0, 0, 1]&#10;]</span><br></pre></td></tr></table></figure></p>
<p>输出6</p>
<h3 id="解题思路">解题思路</h3><p><img src="http://upload-images.jianshu.io/upload_images/424375-2a5a361549e471e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="转化"></p>
<ul>
<li>根据上图，可以清楚的看出本题可以转化为Largest Rectangle in Histogarm来做</li>
<li>初始化height = [0, 0 ,0 ….]</li>
<li>对于每一行，先求出以这一行为x轴的每个柱子的高度，求解时，可以每次基于上一行的值进行更新。然后O(n)的时间求出最大矩形，不断更新全局变量res</li>
<li>时间复杂度为 O(n * (n + n)) = O(n2)</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maximalRectangle</span><span class="params">(self, matrix)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type matrix: List[List[str]]</span><br><span class="line">        :rtype: int</span><br><span class="line">        """</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> matrix:</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        height = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(matrix[<span class="number">0</span>]))]</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> matrix:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(row)):</span><br><span class="line">                <span class="keyword">if</span> row[i] == <span class="string">'0'</span>:</span><br><span class="line">                    height[i] = <span class="number">0</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    height[i] += <span class="number">1</span></span><br><span class="line">            res = max(res, self.largestRectangleArea(height))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">largestRectangleArea</span><span class="params">(self, height)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> height:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            </span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        stack = []</span><br><span class="line">        height.append(-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(height)):</span><br><span class="line">            current = height[i]</span><br><span class="line">            <span class="keyword">while</span> len(stack) != <span class="number">0</span> <span class="keyword">and</span> current &lt;= height[stack[-<span class="number">1</span>]]:</span><br><span class="line">                h = height[stack.pop()]</span><br><span class="line">                w = i <span class="keyword">if</span> len(stack) == <span class="number">0</span> <span class="keyword">else</span> i - stack[-<span class="number">1</span>] - <span class="number">1</span></span><br><span class="line">                res = max(res, h * w)</span><br><span class="line">            stack.append(i)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给你一个二维矩阵，权值为False和True，找到一个最大的矩形，使得里面的值全部为True，输出它的面积</p>
</blockquote>
<p><strong>样例</strong><br>给你一个矩阵如]]>
    </summary>
    
      <category term="Dynamic Programming" scheme="http://yoursite.com/tags/Dynamic-Programming/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Stack" scheme="http://yoursite.com/tags/Stack/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[283 Move Zeroes]]></title>
    <link href="http://yoursite.com/2016/07/31/283-Move-Zeroes/"/>
    <id>http://yoursite.com/2016/07/31/283-Move-Zeroes/</id>
    <published>2016-08-01T00:45:08.000Z</published>
    <updated>2016-08-01T07:45:40.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给一个数组 <em>nums</em> 写一个函数将 0 移动到数组的最后面，非零元素保持原数组的顺序</p>
</blockquote>
<p><strong>样例</strong><br>给出 <em>nums</em> = [0, 1, 0, 3, 12], 调用函数之后, <em>nums</em> = [1, 3, 12, 0, 0].</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>第一个方法是记录一个指针指向0，每次swap的时候更新指向零的指针</li>
<li>第二个方法是两个指针，一个指针指向零，一个指针指向非零</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># method 1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">moveZeroes</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type nums: List[int]</span><br><span class="line">        :rtype: void Do not return anything, modify nums in-place instead.</span><br><span class="line">        """</span></span><br><span class="line">        pos = <span class="number">0</span>  <span class="comment"># position of "0" starts at</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] != <span class="number">0</span>:</span><br><span class="line">                nums[i], nums[pos] = nums[pos], nums[i]</span><br><span class="line">                pos += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># method 2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">moveZeroes</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type nums: List[int]</span><br><span class="line">        :rtype: void Do not return anything, modify nums in-place instead.</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        </span><br><span class="line">        Zero, NonZero = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> NonZero &lt; len(nums):</span><br><span class="line">            <span class="keyword">if</span> nums[NonZero] == <span class="number">0</span>:</span><br><span class="line">                NonZero += <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">print</span> nums[Zero], nums[NonZero]</span><br><span class="line">                nums[Zero], nums[NonZero] = nums[NonZero], nums[Zero]</span><br><span class="line"></span><br><span class="line">            Zero += <span class="number">1</span></span><br><span class="line">            NonZero += <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给一个数组 <em>nums</em> 写一个函数将 0 移动到数组的最后面，非零元素保持原数组的顺序</p>
</blockquote>
<p><strong>样例</strong><br>给出 <em>nu]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Two Pointers" scheme="http://yoursite.com/tags/Two-Pointers/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[172 Factorial Trailing Zeroes]]></title>
    <link href="http://yoursite.com/2016/07/31/172-Factorial-Trailing-Zeroes/"/>
    <id>http://yoursite.com/2016/07/31/172-Factorial-Trailing-Zeroes/</id>
    <published>2016-07-31T23:41:30.000Z</published>
    <updated>2016-08-01T06:41:50.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>设计一个算法，计算出n阶乘中尾部零的个数</p>
</blockquote>
<p><strong>样例</strong><br><strong>11! = 39916800</strong>，因此应该返回 2</p>
<h3 id="解题思路">解题思路</h3><ul>
<li><p>数学问题，写成前几项找规律</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5!, &#21253;&#21547;1*5, 1&#20010;5 =&#62; 1&#20010;0&#10;10!, &#21253;&#21547;1*5,2*5, 2&#20010;5 =&#62; 2&#20010;0&#10;15!, &#21253;&#21547;1*5,2*5,3*5, 3&#20010;5 =&#62; 3&#20010;0&#10;20!, &#21253;&#21547;1*5,2*5,3*5,4*5, 4&#20010;5 =&#62; 4&#20010;0&#10;25!, &#21253;&#21547;1*5,2*5,3*5,4*5,5*5, 5&#20010;5 =&#62; 5&#20010;0&#10;...</span><br></pre></td></tr></table></figure>
</li>
<li><p>所以本题就转化为，找1到n中包含几个5</p>
</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">trailingZeroes</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type n: int</span><br><span class="line">        :rtype: int</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> n:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">            res += n / <span class="number">5</span></span><br><span class="line">            n /= <span class="number">5</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>设计一个算法，计算出n阶乘中尾部零的个数</p>
</blockquote>
<p><strong>样例</strong><br><strong>11! = 39916800</strong>，因此应该返回 2]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[292 Nim Game]]></title>
    <link href="http://yoursite.com/2016/07/30/292-Nim-Game/"/>
    <id>http://yoursite.com/2016/07/30/292-Nim-Game/</id>
    <published>2016-07-30T20:19:35.000Z</published>
    <updated>2016-07-31T03:20:14.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>经典尼姆游戏，桌上有n块石子，每一每个选手可以拿1-3块石子，交替进行，谁能拿到最后一块谁获胜。假设每一步，你们两个人都会想到最优选择。请写出判断函数。</p>
</blockquote>
<p><strong>样例</strong>：<br>如果还剩4块，该你选择，无论如何对手都会赢。</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>本题是脑筋急转弯问题，可通过数学归纳，列举。。。来找到规律<ul>
<li>1个石子，先手全部拿走，先手胜；</li>
<li>2个石子，先手全部拿走，先手胜；</li>
<li>3个石子，先手全部拿走，先手胜；</li>
<li>4个石子，先手拿完，后手面对的是先手的第1，2，3情况，后手必胜；</li>
<li>5个石子，先手拿走1个让后手面对第4种情况，后手必败；</li>
<li>6个石子，先手拿走2个让后手面对第4种情况，后手必败；<br>……<br>容易看出来，只有当出现了4的倍数时，后手每次拿走的石头数量与先手相加都等于4，最终会把第四种情况留给先手，从而获胜。其余情况先手都可以获胜。</li>
</ul>
</li>
<li>代码非常简单</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canWinNim</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type n: int</span><br><span class="line">        :rtype: bool</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span> <span class="keyword">if</span> n % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">else</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>经典尼姆游戏，桌上有n块石子，每一每个选手可以拿1-3块石子，交替进行，谁能拿到最后一块谁获胜。假设每一步，你们两个人都会想到最优选择。请写出判断函数。</p>
</blockquote>
<p><strong]]>
    </summary>
    
      <category term="BrainTeasers" scheme="http://yoursite.com/tags/BrainTeasers/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[344 Reverse String]]></title>
    <link href="http://yoursite.com/2016/07/30/344-Reverse-String/"/>
    <id>http://yoursite.com/2016/07/30/344-Reverse-String/</id>
    <published>2016-07-30T20:17:21.000Z</published>
    <updated>2016-07-31T03:18:00.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>翻转字符串</p>
</blockquote>
<p><strong>样例</strong>:<br>给出 s = “hello”, 返回 “olleh”.</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>方法一：在Python中string可以看做是字符的数组，所以直接翻转字符数组</li>
<li>方法二：碰撞型指针，两个指针，从两头对调</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># method 1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseString</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type s: str</span><br><span class="line">        :rtype: str</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">return</span> s[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># method 2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseString</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type s: str</span><br><span class="line">        :rtype: str</span><br><span class="line">        """</span></span><br><span class="line">        elements = list(s)</span><br><span class="line">        left, right = <span class="number">0</span>, len(elements) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            elements[left], elements[right] = elements[right], elements[left]</span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">            right -= <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>.join(elements)</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>翻转字符串</p>
</blockquote>
<p><strong>样例</strong>:<br>给出 s = “hello”, 返回 “olleh”.</p>
<h3 id="解题思路">解题思路</h3]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
      <category term="Two Ponters" scheme="http://yoursite.com/tags/Two-Ponters/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[258 Add Digits]]></title>
    <link href="http://yoursite.com/2016/07/30/258-Add-Digits/"/>
    <id>http://yoursite.com/2016/07/30/258-Add-Digits/</id>
    <published>2016-07-30T20:12:12.000Z</published>
    <updated>2016-07-31T03:13:21.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出一个非负整数，重复计算为一位的和，直到这个和变为一位数</p>
</blockquote>
<p><strong>样例</strong>：<br>给出 num = 38，过程即：<br>3 + 8 = 11<br>1 + 1 = 2<br>因为2只有一位，所以返回2</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>方法一：安装题目要求进行计算即可</li>
<li>方法二：同样是写出一些相应的结果，找规律<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1    1&#10;2    2&#10;3    3&#10;4    4&#10;5    5&#10;6    6&#10;7    7&#10;8    8    &#10;9    9    &#10;10    1&#10;11    2&#10;12    3    &#10;13    4&#10;14    5&#10;15    6&#10;16    7&#10;17    8&#10;18    9&#10;19    1&#10;20    2</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>我们可以得出规律，每9个一次循环，但需要注意：9， 18…对9取余就是0了，为了得到其本身，我们就用(n-1)%9+1这个表达式来包括所有的情况</p>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># method 1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addDigits</span><span class="params">(self, num)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type num: int</span><br><span class="line">        :rtype: int</span><br><span class="line">        """</span></span><br><span class="line">        res = self.helper(num)</span><br><span class="line">        <span class="keyword">while</span> res &gt; <span class="number">9</span>:</span><br><span class="line">            res = self.helper(res)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, num)</span>:</span></span><br><span class="line">        sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> num != <span class="number">0</span>:</span><br><span class="line">            sum += num % <span class="number">10</span></span><br><span class="line">            num = num / <span class="number">10</span></span><br><span class="line">        <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line"><span class="comment"># method 2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addDigits</span><span class="params">(self, num)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type num: int</span><br><span class="line">        :rtype: int</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> num</span><br><span class="line">        <span class="keyword">return</span> (num - <span class="number">1</span>) % <span class="number">9</span> + <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出一个非负整数，重复计算为一位的和，直到这个和变为一位数</p>
</blockquote>
<p><strong>样例</strong>：<br>给出 num = 38，过程即：<br>3 + 8 = 11]]>
    </summary>
    
      <category term="BrainTeasers" scheme="http://yoursite.com/tags/BrainTeasers/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[465 Kth Smallest Sum in Two Sorted Array]]></title>
    <link href="http://yoursite.com/2016/07/27/465-Kth-Smallest-Sum-in-Two-Sorted-Array/"/>
    <id>http://yoursite.com/2016/07/27/465-Kth-Smallest-Sum-in-Two-Sorted-Array/</id>
    <published>2016-07-28T00:40:35.000Z</published>
    <updated>2016-07-28T07:41:04.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定两个排好序的数组 <em>A</em>, <em>B</em>，定义集合 <em>sum</em> = <em>a</em> + <em>b</em> ，求 <em>sum</em> 中第k小的元素</p>
</blockquote>
<p><strong>样例</strong><br>给出 <em>A</em> = [1,7,11] <em>B</em> = [2,4,6]<br><strong>sum = [3, 5, 7, 9, 11, 13, 13, 15, 17]</strong><br>当 <em>k</em> = 3, 返回 7.<br>当 <em>k</em> = 4, 返回 9.<br>当 <em>k</em> = 8, 返回 15.</p>
<h3 id="解题思路">解题思路</h3><ul>
<li><p>使用set来记录访问过的pair</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">visited = set()</span><br><span class="line">visited.add(<span class="number">10</span>)</span><br><span class="line"><span class="number">10</span> <span class="keyword">is</span> <span class="keyword">in</span> visited <span class="comment"># return True</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用一个minHeap，每次可以取最小值。放入堆中的数据结构为(sum, i, j)</p>
</li>
<li>每次从堆中取出一个最小值，下一轮的candidates将是(sum, i+1, j), (sum, i, j+1)，将这两个candidates加入的heap之间要去重，因为有可能重复</li>
<li>从堆中取k次之后，就拿到了想要的结果</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param &#123;int[]&#125; A an integer arrays sorted in ascending order</span></span><br><span class="line">    <span class="comment"># @param &#123;int[]&#125; B an integer arrays sorted in ascending order</span></span><br><span class="line">    <span class="comment"># @param &#123;int&#125; k an integer</span></span><br><span class="line">    <span class="comment"># @return &#123;int&#125; an integer</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kthSmallestSum</span><span class="params">(self, A, B, k)</span>:</span></span><br><span class="line">        <span class="comment"># Write your code here</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> A <span class="keyword">or</span> <span class="keyword">not</span> B:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            </span><br><span class="line">        myQueue = Queue.PriorityQueue()</span><br><span class="line">        visited = set()</span><br><span class="line">        myQueue.put((A[<span class="number">0</span>]+B[<span class="number">0</span>], <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        visited.add((<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">while</span> k &gt; <span class="number">1</span>:</span><br><span class="line">            cur = myQueue.get()</span><br><span class="line">            k -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> cur[<span class="number">1</span>] + <span class="number">1</span> &lt; len(A) <span class="keyword">and</span> (cur[<span class="number">1</span>] + <span class="number">1</span>, cur[<span class="number">2</span>]) <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                visited.add((cur[<span class="number">1</span>] + <span class="number">1</span>, cur[<span class="number">2</span>]))</span><br><span class="line">                myQueue.put((A[cur[<span class="number">1</span>] + <span class="number">1</span>] + B[cur[<span class="number">2</span>]], cur[<span class="number">1</span>] + <span class="number">1</span>, cur[<span class="number">2</span>]))</span><br><span class="line">            <span class="keyword">if</span> cur[<span class="number">2</span>] + <span class="number">1</span> &lt; len(B) <span class="keyword">and</span> (cur[<span class="number">1</span>], cur[<span class="number">2</span>] + <span class="number">1</span>) <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                visited.add((cur[<span class="number">1</span>], cur[<span class="number">2</span>] + <span class="number">1</span>))</span><br><span class="line">                myQueue.put((A[cur[<span class="number">1</span>]] + B[cur[<span class="number">2</span>] + <span class="number">1</span>], cur[<span class="number">1</span>], cur[<span class="number">2</span>] + <span class="number">1</span>))</span><br><span class="line">        res = myQueue.get()</span><br><span class="line">        <span class="keyword">return</span> res[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定两个排好序的数组 <em>A</em>, <em>B</em>，定义集合 <em>sum</em> = <em>a</em> + <em>b</em> ，求 <em>sum</em> 中第k小的元素</p>]]>
    </summary>
    
      <category term="Heap" scheme="http://yoursite.com/tags/Heap/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[131 Building Outline]]></title>
    <link href="http://yoursite.com/2016/07/27/131-Building-Outline/"/>
    <id>http://yoursite.com/2016/07/27/131-Building-Outline/</id>
    <published>2016-07-27T22:28:53.000Z</published>
    <updated>2016-07-28T05:29:24.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>水平面上有 <em>N</em> 座大楼，每座大楼都是矩阵的形状，可以用三个数字表示 (start, end, height)，分别代表其在x轴上的起点，终点和高度。大楼之间从远处看可能会重叠，求出<em>N</em> 座大楼的外轮廓线。<br>外轮廓线的表示方法为若干三元组，每个三元组包含三个数字 (start, end, height)，代表这段轮廓的起始位置，终止位置和高度。</p>
</blockquote>
<p><strong>样例</strong><br>给出三座大楼：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#10;  [1, 3, 3],&#10;  [2, 4, 4],&#10;  [5, 6, 1]&#10;]</span><br></pre></td></tr></table></figure></p>
<p>外轮廓线为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#10;  [1, 2, 3],&#10;  [2, 4, 4],&#10;  [5, 6, 1]&#10;]</span><br></pre></td></tr></table></figure></p>
<h3 id="解题思路">解题思路</h3><ul>
<li>Sweep-Line - 扫描线问题，可以每次移动一个非常小的单位，不断去求当下楼房的高度。但实际上，只有某个楼房的开始或结尾才有交点的变化。</li>
<li>第一步，拆分(1, 3, 3) =&gt; (1, 3, 起点) 和 (3, 3, 终点)，然后排序，关于排序，对于含有坐标，高度，始末标记的三元组<ul>
<li>首先按坐标排序(大小排序)</li>
<li>坐标一样时，按高度排序(大小排序)</li>
<li>高度也一样时，按始末排序，始 &gt; 末</li>
<li><strong>排序非常重要</strong>， 时间复杂度是O(nlogn)</li>
</ul>
</li>
<li>每次到交点的时候，要求几个楼房的高度最大值 - Heap</li>
<li>每次到某一个楼房终点的时候要从堆中删除相应的高度 - HashHeap 时间复杂度是O(nlogn)</li>
<li>时间复杂度 O(nlogn) + O(nlogn) =&gt; O(nlogn)</li>
<li>如何查看堆顶元素 <code>myheap.queue[0]</code></li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">node</span>:</span></span><br><span class="line">    <span class="string">"""</span><br><span class="line">    create a node class to handle the duplicates in heap.</span><br><span class="line">    id =&gt; the index of x, num = number of x in heap</span><br><span class="line">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, id, number)</span>:</span></span><br><span class="line">        self.id = id</span><br><span class="line">        self.num = number</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HashHeap</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.map = &#123;&#125;</span><br><span class="line">        self.hashmaxheap = [<span class="number">0</span>]</span><br><span class="line">        self.map[<span class="number">0</span>] = node(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        self.currentSize = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="string">"""add a new item to the hashmaxheap"""</span></span><br><span class="line">        <span class="keyword">if</span> data <span class="keyword">in</span> self.map:</span><br><span class="line">            existData = self.map[data]</span><br><span class="line">            self.map[data] = node(existData.id, existData.num + <span class="number">1</span>)</span><br><span class="line">            self.currentSize += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.hashmaxheap.append(data)</span><br><span class="line">            self.map[data] = node(len(self.hashmaxheap) - <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">            self.currentSize += <span class="number">1</span></span><br><span class="line">            self.siftUp(len(self.hashmaxheap) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">peek</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""returns the item with the maxmum key value"""</span></span><br><span class="line">        <span class="keyword">return</span> self.hashmaxheap[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""returns the item with the maxmum key value, removing the item from the heap"""</span></span><br><span class="line">        res = self.hashmaxheap[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> self.map[res].num == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> self.map[res].id == len(self.hashmaxheap) - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">del</span> self.map[res]</span><br><span class="line">                self.hashmaxheap.pop()</span><br><span class="line">                self.currentSize -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">return</span> res</span><br><span class="line">            <span class="keyword">del</span> self.map[res]</span><br><span class="line">            self.hashmaxheap[<span class="number">1</span>] = self.hashmaxheap[-<span class="number">1</span>]</span><br><span class="line">            self.map[self.hashmaxheap[<span class="number">1</span>]] = node(<span class="number">1</span>, self.map[self.hashmaxheap[<span class="number">1</span>]].num)</span><br><span class="line">            self.hashmaxheap.pop()</span><br><span class="line">            self.siftDown(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.map[res] = node(<span class="number">1</span>, self.map[res].num - <span class="number">1</span>)</span><br><span class="line">        self.currentSize -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        existData = self.map[data]</span><br><span class="line">        <span class="keyword">if</span> existData.num == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">del</span> self.map[data]</span><br><span class="line">            <span class="keyword">if</span> existData.id == len(self.hashmaxheap) - <span class="number">1</span>:</span><br><span class="line">                self.hashmaxheap.pop()</span><br><span class="line">                self.currentSize -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            self.hashmaxheap[existData.id] = self.hashmaxheap[-<span class="number">1</span>]</span><br><span class="line">            self.map[self.hashmaxheap[-<span class="number">1</span>]] = node(existData.id, self.map[self.hashmaxheap[-<span class="number">1</span>]].num)</span><br><span class="line">            self.hashmaxheap.pop()</span><br><span class="line">            self.siftUp(existData.id)</span><br><span class="line">            self.siftDown(existData.id)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.map[data] = node(existData.id, existData.num - <span class="number">1</span>)</span><br><span class="line">        self.currentSize -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">siftUp</span><span class="params">(self, index)</span>:</span></span><br><span class="line">        <span class="comment"># // means devide by 2 and return int</span></span><br><span class="line">        <span class="keyword">while</span> index // <span class="number">2</span> &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> self.hashmaxheap[index] &lt; self.hashmaxheap[index // <span class="number">2</span>]:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                numA = self.map[self.hashmaxheap[index]].num</span><br><span class="line">                numB = self.map[self.hashmaxheap[index // <span class="number">2</span>]].num</span><br><span class="line">                self.map[self.hashmaxheap[index]] = node(index // <span class="number">2</span>, numA)</span><br><span class="line">                self.map[self.hashmaxheap[index // <span class="number">2</span>]] = node(index, numB)</span><br><span class="line">                self.hashmaxheap[index], self.hashmaxheap[index // <span class="number">2</span>] = self.hashmaxheap[index // <span class="number">2</span>], self.hashmaxheap[index] </span><br><span class="line">            index = index // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">siftDown</span><span class="params">(self, index)</span>:</span></span><br><span class="line">        <span class="string">"""correct single violation in a sub-tree"""</span></span><br><span class="line">        <span class="keyword">if</span> index &gt; (len(self.hashmaxheap) - <span class="number">1</span>) // <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># find the max child of current index</span></span><br><span class="line">        <span class="keyword">if</span> (index * <span class="number">2</span> + <span class="number">1</span>) &gt; (len(self.hashmaxheap) - <span class="number">1</span>) <span class="keyword">or</span> self.hashmaxheap[index * <span class="number">2</span>] &gt; self.hashmaxheap[index * <span class="number">2</span> + <span class="number">1</span>]:</span><br><span class="line">            maxChild = index * <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            maxChild = index * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self.hashmaxheap[index] &gt; self.hashmaxheap[maxChild]:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            numA = self.map[self.hashmaxheap[index]].num</span><br><span class="line">            numB = self.map[self.hashmaxheap[maxChild]].num</span><br><span class="line">            self.map[self.hashmaxheap[index]] = node(maxChild, numA)</span><br><span class="line">            self.map[self.hashmaxheap[maxChild]] = node(index, numB)</span><br><span class="line">            self.hashmaxheap[index], self.hashmaxheap[maxChild] = self.hashmaxheap[maxChild], self.hashmaxheap[index] </span><br><span class="line">        self.siftDown(index * <span class="number">2</span>)</span><br><span class="line">        self.siftDown(index * <span class="number">2</span> + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.currentSize</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.currentSize == <span class="number">0</span></span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sorter</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x[<span class="number">0</span>] != y[<span class="number">0</span>]:</span><br><span class="line">        <span class="keyword">return</span> x[<span class="number">0</span>] - y[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">elif</span> x[<span class="number">1</span>] != y[<span class="number">1</span>]:</span><br><span class="line">        <span class="keyword">return</span> x[<span class="number">1</span>] - y[<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 相同时间点上，加入新楼有优先权</span></span><br><span class="line">    <span class="keyword">return</span> y[<span class="number">2</span>] - x[<span class="number">2</span>]</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param buildings: A list of lists of integers</span></span><br><span class="line">    <span class="comment"># @return: A list of lists of integers</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">buildingOutline</span><span class="params">(self, buildings)</span>:</span></span><br><span class="line">        <span class="comment"># write your code here</span></span><br><span class="line">        <span class="keyword">if</span> len(buildings) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">            </span><br><span class="line">        timepoints = [] <span class="comment"># pos, height, in/out</span></span><br><span class="line">        <span class="keyword">for</span> building <span class="keyword">in</span> buildings:</span><br><span class="line">            timepoints.append((building[<span class="number">0</span>], building[<span class="number">2</span>], <span class="number">1</span>))</span><br><span class="line">            timepoints.append((building[<span class="number">1</span>], building[<span class="number">2</span>], -<span class="number">1</span>))</span><br><span class="line">            </span><br><span class="line">        timepoints = sorted(timepoints, cmp=sorter)</span><br><span class="line">        heights = HashHeap()</span><br><span class="line">        left = <span class="number">1</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> timepoint <span class="keyword">in</span> timepoints:</span><br><span class="line">            <span class="keyword">if</span> timepoint[<span class="number">2</span>] == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> heights.isEmpty() <span class="keyword">or</span> timepoint[<span class="number">1</span>] &gt; heights.peek():</span><br><span class="line">                    <span class="keyword">if</span> timepoint[<span class="number">0</span>] != left <span class="keyword">and</span> <span class="keyword">not</span> heights.isEmpty():</span><br><span class="line">                        res.append([left, timepoint[<span class="number">0</span>], heights.peek()])</span><br><span class="line">                    left = timepoint[<span class="number">0</span>]</span><br><span class="line">                heights.put(timepoint[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                heights.delete(timepoint[<span class="number">1</span>])</span><br><span class="line">                <span class="keyword">if</span> heights.isEmpty() <span class="keyword">or</span> timepoint[<span class="number">1</span>] &gt; heights.peek():</span><br><span class="line">                    res.append([left, timepoint[<span class="number">0</span>], timepoint[<span class="number">1</span>]])</span><br><span class="line">                    left = timepoint[<span class="number">0</span>]</span><br><span class="line">                    </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>水平面上有 <em>N</em> 座大楼，每座大楼都是矩阵的形状，可以用三个数字表示 (start, end, height)，分别代表其在x轴上的起点，终点和高度。大楼之间从远处看可能会重叠，求出<em>N<]]>
    </summary>
    
      <category term="HashHeap" scheme="http://yoursite.com/tags/HashHeap/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="Sweep-Line" scheme="http://yoursite.com/tags/Sweep-Line/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[391 Number of Airplanes in the Sky]]></title>
    <link href="http://yoursite.com/2016/07/25/391-Number-of-Airplanes-in-the-Sky/"/>
    <id>http://yoursite.com/2016/07/25/391-Number-of-Airplanes-in-the-Sky/</id>
    <published>2016-07-26T02:15:18.000Z</published>
    <updated>2016-07-26T09:15:47.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出飞机的起飞和降落时间的列表，用 interval 序列表示. 请计算出天上同时最多有多少架飞机？<br><strong>注意事项</strong><br>如果多架飞机降落和起飞在同一时刻，我们认为降落有优先权。</p>
</blockquote>
<p><strong>样例</strong><br>对于每架飞机的起降时间列表：[[1,10],[2,3],[5,8],[4,7]], 返回3。</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>假想有一条线，每次移动一个单位 - 经典扫描线问题(Sweep-Line)</li>
<li>只有每条线的起点和终点才可能导致扫面线和这些时间线交点的个数</li>
<li>把每个区间拆成两个点，比如(2, 5) =&gt; (2, 起飞), (5, 降落)</li>
<li>自定义的排序函数，考虑同一时间点，降落有优先权</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span><br><span class="line">Definition of Interval.</span><br><span class="line">class Interval(object):</span><br><span class="line">    def __init__(self, start, end):</span><br><span class="line">        self.start = start</span><br><span class="line">        self.end = end</span><br><span class="line">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sorter</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x[<span class="number">0</span>] != y[<span class="number">0</span>]:</span><br><span class="line">        <span class="keyword">return</span> x[<span class="number">0</span>] - y[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 相同时间点上，降落有优先权</span></span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">1</span>] - y[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param airplanes, a list of Interval</span></span><br><span class="line">    <span class="comment"># @return an integer</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countOfAirplanes</span><span class="params">(self, airplanes)</span>:</span></span><br><span class="line">        <span class="comment"># write your code here</span></span><br><span class="line">        timepoints = []</span><br><span class="line">        <span class="keyword">for</span> airplane <span class="keyword">in</span> airplanes:</span><br><span class="line">            timepoints.append((airplane.start, <span class="number">1</span>))</span><br><span class="line">            timepoints.append((airplane.end, -<span class="number">1</span>))</span><br><span class="line">        </span><br><span class="line">        timepoints = sorted(timepoints, cmp=sorter)</span><br><span class="line">        sum, res = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> timepoint <span class="keyword">in</span> timepoints:</span><br><span class="line">            sum += timepoint[<span class="number">1</span>]</span><br><span class="line">            res = max(sum, res)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出飞机的起飞和降落时间的列表，用 interval 序列表示. 请计算出天上同时最多有多少架飞机？<br><strong>注意事项</strong><br>如果多架飞机降落和起飞在同一时刻，我们认为降落有优先]]>
    </summary>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="Sweep-Line" scheme="http://yoursite.com/tags/Sweep-Line/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[211 Add and Search Word - Data structure design]]></title>
    <link href="http://yoursite.com/2016/07/25/211-Add-and-Search-Word-Data-structure-design/"/>
    <id>http://yoursite.com/2016/07/25/211-Add-and-Search-Word-Data-structure-design/</id>
    <published>2016-07-26T01:56:23.000Z</published>
    <updated>2016-07-26T08:56:53.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>设计一个包含下面两个操作的数据结构：addWord(word), search(word)<br>addWord(word)会在数据结构中添加一个单词。而search(word)则支持普通的单词查询或是只包含. 和a-z的简易正则表达式的查询。一个 . 可以代表一个任何的字母。</p>
</blockquote>
<p><strong>样例</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addWord(&#34;bad&#34;)&#10;addWord(&#34;dad&#34;)&#10;addWord(&#34;mad&#34;)&#10;search(&#34;pad&#34;)  // return false&#10;search(&#34;bad&#34;)  // return true&#10;search(&#34;.ad&#34;)  // return true&#10;search(&#34;b..&#34;)  // return true</span><br></pre></td></tr></table></figure></p>
<h3 id="解题思路">解题思路</h3><ul>
<li>本题跟Implement Trie十分相似，同样需要使用字典树</li>
<li>由于本题里中’.’可以代替任意字符，所以当某一个字符是’.’，就需要查找所有的子树，只要有一个最终能够存在，就返回True</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        Initialize your data structure here.</span><br><span class="line">        """</span></span><br><span class="line">        self.children = &#123;&#125;</span><br><span class="line">        self.IsWord = <span class="keyword">False</span></span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WordDictionary</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        initialize your data structure here.</span><br><span class="line">        """</span></span><br><span class="line">        self.root = TrieNode()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addWord</span><span class="params">(self, word)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        Adds a word into the data structure.</span><br><span class="line">        :type word: str</span><br><span class="line">        :rtype: void</span><br><span class="line">        """</span></span><br><span class="line">        node = self.root</span><br><span class="line">        <span class="keyword">for</span> letter <span class="keyword">in</span> word:</span><br><span class="line">            child = node.children.get(letter)</span><br><span class="line">            <span class="keyword">if</span> child <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                child = TrieNode()</span><br><span class="line">                node.children[letter] = child</span><br><span class="line">            node = child</span><br><span class="line">        node.IsWord = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, word)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        Returns if the word is in the data structure. A word could</span><br><span class="line">        contain the dot character '.' to represent any one letter.</span><br><span class="line">        :type word: str</span><br><span class="line">        :rtype: bool</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.find(self.root, word)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, node, word)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> word == <span class="string">""</span>:</span><br><span class="line">            <span class="keyword">return</span> node.IsWord</span><br><span class="line">        <span class="keyword">if</span> word[<span class="number">0</span>] == <span class="string">"."</span>:</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> node.children:</span><br><span class="line">                <span class="keyword">if</span> self.find(node.children[x], word[<span class="number">1</span>:]):</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            child = node.children.get(word[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">if</span> child:</span><br><span class="line">                <span class="keyword">return</span> self.find(child, word[<span class="number">1</span>:])</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>设计一个包含下面两个操作的数据结构：addWord(word), search(word)<br>addWord(word)会在数据结构中添加一个单词。而search(word)则支持普通的单词查询或是只包含.]]>
    </summary>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Trie" scheme="http://yoursite.com/tags/Trie/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[79 Word Search]]></title>
    <link href="http://yoursite.com/2016/07/25/79-Word-Search/"/>
    <id>http://yoursite.com/2016/07/25/79-Word-Search/</id>
    <published>2016-07-25T22:24:39.000Z</published>
    <updated>2016-07-26T05:25:17.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出一个二维的字母板和一个单词，寻找字母板网格中是否存在这个单词。<br>单词可以由按顺序的相邻单元的字母组成，其中相邻单元指的是水平或者垂直方向相邻。每个单元中的字母最多只能使用一次。</p>
</blockquote>
<p><strong>样例</strong><br>给出board =<br>[<br>  “ABCE”,<br>  “SFCS”,<br>  “ADEE”<br>]<br>word = <strong>“ABCCED”</strong>， -&gt;返回 true,<br>word = <strong>“SEE”</strong>，-&gt; 返回 true,<br>word = <strong>“ABCB”</strong>， -&gt; 返回 false.</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>遍历二维数组的每一个点，当作起始点做DFS</li>
<li>在进入DFS后，对于访问过的节点标记为None，以表明访问过</li>
<li>关于回溯要注意的是，如果返回True其实就结束了，以为已经找到答案了，也不需要回溯。如果不返回True，而是改变一个全局变量self.res的值为True，会超时</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.word = <span class="string">""</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exist</span><span class="params">(self, board, word)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type board: List[List[str]]</span><br><span class="line">        :type word: str</span><br><span class="line">        :rtype: bool</span><br><span class="line">        """</span></span><br><span class="line">        self.word = word</span><br><span class="line">        <span class="keyword">for</span> row_num <span class="keyword">in</span> range(len(board)):</span><br><span class="line">            <span class="keyword">for</span> col_num <span class="keyword">in</span> range(len(board[<span class="number">0</span>])):</span><br><span class="line">                <span class="keyword">if</span> self.search(board, row_num, col_num, <span class="number">0</span>):</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, board, x, y, pos)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.word[pos] == board[x][y]:</span><br><span class="line">            <span class="keyword">if</span> pos == len(self.word) - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = board[x][y]</span><br><span class="line">                board[x][y] = <span class="keyword">None</span></span><br><span class="line">                <span class="keyword">if</span> x + <span class="number">1</span> &lt; len(board) <span class="keyword">and</span> self.search(board, x + <span class="number">1</span>, y, pos + <span class="number">1</span>):</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">                <span class="keyword">if</span> x - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> self.search(board, x - <span class="number">1</span>, y, pos + <span class="number">1</span>):</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">                <span class="keyword">if</span> y + <span class="number">1</span> &lt; len(board[<span class="number">0</span>]) <span class="keyword">and</span> self.search(board, x, y + <span class="number">1</span>, pos + <span class="number">1</span>):</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">                <span class="keyword">if</span> y - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> self.search(board, x, y - <span class="number">1</span>, pos + <span class="number">1</span>):</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">                board[x][y] = temp</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出一个二维的字母板和一个单词，寻找字母板网格中是否存在这个单词。<br>单词可以由按顺序的相邻单元的字母组成，其中相邻单元指的是水平或者垂直方向相邻。每个单元中的字母最多只能使用一次。</p>
</block]]>
    </summary>
    
      <category term="Back Tracking" scheme="http://yoursite.com/tags/Back-Tracking/"/>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
      <category term="Trie" scheme="http://yoursite.com/tags/Trie/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[212 Word Search II]]></title>
    <link href="http://yoursite.com/2016/07/21/212-Word-Search-II/"/>
    <id>http://yoursite.com/2016/07/21/212-Word-Search-II/</id>
    <published>2016-07-22T03:56:33.000Z</published>
    <updated>2016-07-26T05:13:39.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出一个由小写字母组成的矩阵和一个字典。找出所有同时在字典和矩阵中出现的单词。一个单词可以从矩阵中的任意位置开始，可以向左/右/上/下四个相邻方向移动。</p>
</blockquote>
<p><strong>样例</strong><br>给出矩阵：<br>doaf<br>agai<br>dcan<br>和字典：<br>{“dog”, “dad”, “dgdg”, “can”, “again”}<br>返回 {“dog”, “dad”, “can”, “again”}</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>最直接但是会超时的方法 - 先把字典做成hashMap，对每一个点DFS，每增加一个字符就去hashMap查找是否存在。一共m*n个点，每次DFS复杂度是O(m*n)，所以总的时间复杂度是O(m*n * m*n)</li>
<li>可行解 - 把给出的字典变成Trie树，Trie树可以检查前缀，hashMap做不到。检查前缀的时候，如果发现某个前缀不存在，就可以不用继续DFS了，相当于剪枝</li>
<li>注意：当不必要的check增多时，会导致TLE<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 超时</span></span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt;= len(board) <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> y &gt;= len(board[<span class="number">0</span>]) <span class="keyword">or</span> board[x][y] == <span class="number">0</span> <span class="keyword">or</span> cur_node == <span class="keyword">None</span>:</span><br><span class="line"><span class="comment"># 免去两个不必要的check，不超时</span></span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt;= len(board) <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> y &gt;= len(board[<span class="number">0</span>]):</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        Initialize your data structure here.</span><br><span class="line">        """</span></span><br><span class="line">        self.children = &#123;&#125;</span><br><span class="line">        self.IsWord = <span class="keyword">False</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.root = TrieNode()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, word)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        Inserts a word into the trie.</span><br><span class="line">        :type word: str</span><br><span class="line">        :rtype: void</span><br><span class="line">        """</span></span><br><span class="line">        node = self.root</span><br><span class="line">        <span class="keyword">for</span> letter <span class="keyword">in</span> word:</span><br><span class="line">            child = node.children.get(letter)</span><br><span class="line">            <span class="keyword">if</span> child <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                child = TrieNode()</span><br><span class="line">                node.children[letter] = child</span><br><span class="line">            node = child</span><br><span class="line">        node.IsWord = <span class="keyword">True</span></span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.result = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findWords</span><span class="params">(self, board, words)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type board: List[List[str]]</span><br><span class="line">        :type words: List[str]</span><br><span class="line">        :rtype: List[str]</span><br><span class="line">        """</span></span><br><span class="line">        trie = Trie()</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">            trie.insert(word)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> row_num <span class="keyword">in</span> range(len(board)):</span><br><span class="line">            <span class="keyword">for</span> col_num <span class="keyword">in</span> range(len(board[<span class="number">0</span>])):</span><br><span class="line">                self.search(board, row_num, col_num, trie.root, <span class="string">""</span>)</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> self.result</span><br><span class="line">                </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, board, x, y, cur_node, word)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cur_node.IsWord:</span><br><span class="line">            self.result.append(word)</span><br><span class="line">            cur_node.IsWord = <span class="keyword">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (x &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt;= len(board) <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> y &gt;= len(board[<span class="number">0</span>])):</span><br><span class="line">            temp = board[x][y]</span><br><span class="line">            cur_node = cur_node.children.get(temp)</span><br><span class="line">            <span class="keyword">if</span> cur_node:</span><br><span class="line">                board[x][y] = <span class="string">"#"</span></span><br><span class="line">                self.search(board, x+<span class="number">1</span>, y, cur_node, word+temp)</span><br><span class="line">                self.search(board, x-<span class="number">1</span>, y, cur_node, word+temp)</span><br><span class="line">                self.search(board, x, y+<span class="number">1</span>, cur_node, word+temp)</span><br><span class="line">                self.search(board, x, y-<span class="number">1</span>, cur_node, word+temp)</span><br><span class="line">                board[x][y] = temp</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出一个由小写字母组成的矩阵和一个字典。找出所有同时在字典和矩阵中出现的单词。一个单词可以从矩阵中的任意位置开始，可以向左/右/上/下四个相邻方向移动。</p>
</blockquote>
<p><strong]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Trie" scheme="http://yoursite.com/tags/Trie/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[208 Implement Trie (Prefix Tree)]]></title>
    <link href="http://yoursite.com/2016/07/21/208-Implement-Trie-Prefix-Tree/"/>
    <id>http://yoursite.com/2016/07/21/208-Implement-Trie-Prefix-Tree/</id>
    <published>2016-07-21T22:56:04.000Z</published>
    <updated>2016-07-22T05:56:38.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>实现一个 Trie，包含 insert, search, 和 startsWith 这三个方法。</p>
</blockquote>
<p><strong>样例</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">insert("lintcode")</span><br><span class="line">search("code") # return false</span><br><span class="line">startsWith("lint") # return true</span><br><span class="line">startsWith("linterror") # return false</span><br><span class="line">insert("linterror")</span><br><span class="line">search("lintcode) # return true</span><br><span class="line">startsWith("linterror") # return true</span><br></pre></td></tr></table></figure></p>
<h3 id="解题思路">解题思路</h3><ul>
<li>首先，定义一个trie树节点，包含当前的char和isWord布尔值</li>
<li>注意根节点不包含字符，每个节点最多有26叉</li>
<li>Insert - 即遍历单词的每个字符，逐层查找，有则继续，没有就创建一个新的TrieNode，左后一位<code>IsWord = True</code></li>
<li>Search - 同理，遍历单词每个字符，逐层查找，没有立即返回False，找到最后一个TrieNode，则返回 TrieNode.IsWord</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        Initialize your data structure here.</span><br><span class="line">        """</span></span><br><span class="line">        self.children = &#123;&#125;</span><br><span class="line">        self.IsWord = <span class="keyword">False</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.root = TrieNode()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, word)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        Inserts a word into the trie.</span><br><span class="line">        :type word: str</span><br><span class="line">        :rtype: void</span><br><span class="line">        """</span></span><br><span class="line">        node = self.root</span><br><span class="line">        <span class="keyword">for</span> letter <span class="keyword">in</span> word:</span><br><span class="line">            child = node.children.get(letter)</span><br><span class="line">            <span class="keyword">if</span> child <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                child = TrieNode()</span><br><span class="line">                node.children[letter] = child</span><br><span class="line">            node = child</span><br><span class="line">        node.IsWord = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, word)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        Returns if the word is in the trie.</span><br><span class="line">        :type word: str</span><br><span class="line">        :rtype: bool</span><br><span class="line">        """</span></span><br><span class="line">        node = self.root</span><br><span class="line">        <span class="keyword">for</span> letter <span class="keyword">in</span> word:</span><br><span class="line">            node = node.children.get(letter)</span><br><span class="line">            <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> node.IsWord</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">startsWith</span><span class="params">(self, prefix)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        Returns if there is any word in the trie</span><br><span class="line">        that starts with the given prefix.</span><br><span class="line">        :type prefix: str</span><br><span class="line">        :rtype: bool</span><br><span class="line">        """</span></span><br><span class="line">        node = self.root</span><br><span class="line">        <span class="keyword">for</span> letter <span class="keyword">in</span> prefix:</span><br><span class="line">            node = node.children.get(letter)</span><br><span class="line">            <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your Trie object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># trie = Trie()</span></span><br><span class="line"><span class="comment"># trie.insert("somestring")</span></span><br><span class="line"><span class="comment"># trie.search("key")</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>实现一个 Trie，包含 insert, search, 和 startsWith 这三个方法。</p>
</blockquote>
<p><strong>样例</strong><br><figure clas]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
      <category term="Trie" scheme="http://yoursite.com/tags/Trie/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[261 Graph Valid Tree]]></title>
    <link href="http://yoursite.com/2016/07/20/261-Graph-Valid-Tree/"/>
    <id>http://yoursite.com/2016/07/20/261-Graph-Valid-Tree/</id>
    <published>2016-07-21T01:46:23.000Z</published>
    <updated>2016-07-21T08:51:01.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出 n 个节点，标号分别从 0 到 n - 1 并且给出一个 无向 边的列表 (给出每条边的两个顶点), 写一个函数去判断这张｀无向｀图是否是一棵树</p>
</blockquote>
<p><strong>样例</strong><br>给出n = 5 并且 edges = [[0, 1], [0, 2], [0, 3], [1, 4]], 返回 true.<br>给出n = 5 并且 edges = [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]], 返回 false.</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>判断输入的边，是否能构成树看两点：<ul>
<li>是否有环，有环则不是树</li>
<li>是否所有点最终都相连，有不相连则不是树</li>
</ul>
</li>
<li>集合合并问题，使用并查集<ul>
<li>如果合并的时候发现两个点的father一样，则有环</li>
<li>最终统计father的个数，超过一个说明没有全部相连</li>
</ul>
</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        self.father = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            self.father[i] = i </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compressed_find</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        parent = self.father[x]</span><br><span class="line">        <span class="keyword">while</span> parent != self.father[parent]:</span><br><span class="line">            parent = self.father[parent]</span><br><span class="line"></span><br><span class="line">        temp = -<span class="number">1</span>;</span><br><span class="line">        fa = self.father[x]</span><br><span class="line">        <span class="keyword">while</span> fa != self.father[fa]:</span><br><span class="line">            temp = self.father[fa]</span><br><span class="line">            self.father[fa] = parent</span><br><span class="line">            fa = temp</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> parent</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">            fa_x = self.compressed_find(x)</span><br><span class="line">            fa_y = self.compressed_find(y)</span><br><span class="line">            <span class="keyword">if</span> fa_x != fa_y:</span><br><span class="line">                self.father[fa_x] = fa_y</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param &#123;int&#125; n an integer</span></span><br><span class="line">    <span class="comment"># @param &#123;int[][]&#125; edges a list of undirected edges</span></span><br><span class="line">    <span class="comment"># @return &#123;boolean&#125; true if it's a valid tree, or false</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validTree</span><span class="params">(self, n, edges)</span>:</span></span><br><span class="line">        <span class="comment"># Write your code here</span></span><br><span class="line">        <span class="keyword">if</span> len(edges) != n - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            </span><br><span class="line">        uf = UnionFind(n)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> edge <span class="keyword">in</span> edges:</span><br><span class="line">            pointA, pointB = edge[<span class="number">0</span>], edge[<span class="number">1</span>]</span><br><span class="line">            fpointA = uf.compressed_find(pointA)</span><br><span class="line">            fpointB = uf.compressed_find(pointB)</span><br><span class="line">            <span class="keyword">if</span> fpointA == fpointB:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                uf.union(pointA, pointB)</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出 n 个节点，标号分别从 0 到 n - 1 并且给出一个 无向 边的列表 (给出每条边的两个顶点), 写一个函数去判断这张｀无向｀图是否是一棵树</p>
</blockquote>
<p><strong>]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Union Find" scheme="http://yoursite.com/tags/Union-Find/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[130 Surrounded Regions]]></title>
    <link href="http://yoursite.com/2016/07/20/130-Surrounded-Regions/"/>
    <id>http://yoursite.com/2016/07/20/130-Surrounded-Regions/</id>
    <published>2016-07-21T00:33:02.000Z</published>
    <updated>2016-07-21T07:33:33.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给一个二维的矩阵，包含 ‘X’ 和 ‘O’, 找到所有被 ‘X’ 围绕的区域，并用 ‘X’ 填充满。</p>
</blockquote>
<p><strong>样例</strong><br>给出二维矩阵：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X X X X&#10;X O O X&#10;X X O X&#10;X O X X</span><br></pre></td></tr></table></figure></p>
<p>把被 ‘X’ 围绕的区域填充之后变为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X X X X&#10;X X X X&#10;X X X X&#10;X O X X</span><br></pre></td></tr></table></figure></p>
<h3 id="解题思路">解题思路</h3><ul>
<li>通过分析可知，就是要将所有以O组成、但没有连通到网格边缘的区域变为X。</li>
<li>所以可以沿着四个边找O，找到每一个O就把相连的都变成Y，因为 他们都是要保留的，最后遍历二维数组，遇到O变成X，遇到Y变回O</li>
<li>具体方法可以采用BFS, DFS, Union Find，但是DFS大数据会爆栈，DFS最快</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Queue</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(self, board)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type board: List[List[str]]</span><br><span class="line">        :rtype: void Do not return anything, modify board in-place instead.</span><br><span class="line">        """</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fill</span><span class="params">(x, y)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt; height-<span class="number">1</span> <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> y &gt; width-<span class="number">1</span> <span class="keyword">or</span> board[x][y] != <span class="string">"O"</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            MyQueue.put((x, y))</span><br><span class="line">            board[x][y] = <span class="string">"D"</span></span><br><span class="line">            </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">(x, y)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> board[x][y] == <span class="string">"O"</span>:</span><br><span class="line">                fill(x, y)</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">not</span> MyQueue.empty():</span><br><span class="line">                current = MyQueue.get()</span><br><span class="line">                i, j = current[<span class="number">0</span>], current[<span class="number">1</span>]</span><br><span class="line">                fill(i+<span class="number">1</span>, j)</span><br><span class="line">                fill(i-<span class="number">1</span>, j)</span><br><span class="line">                fill(i, j+<span class="number">1</span>)</span><br><span class="line">                fill(i, j-<span class="number">1</span>)</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">if</span> len(board) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        height, width, MyQueue = len(board), len(board[<span class="number">0</span>]), Queue.Queue()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(width):</span><br><span class="line">            bfs(<span class="number">0</span>, i)</span><br><span class="line">            bfs(height - <span class="number">1</span>, i)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, height - <span class="number">1</span>):</span><br><span class="line">            bfs(j, <span class="number">0</span>)</span><br><span class="line">            bfs(j, width - <span class="number">1</span>)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(height):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(width):</span><br><span class="line">                <span class="keyword">if</span> board[i][j] == <span class="string">"D"</span>:</span><br><span class="line">                    board[i][j] = <span class="string">"O"</span></span><br><span class="line">                <span class="keyword">elif</span> board[i][j] == <span class="string">"O"</span>:</span><br><span class="line">                    board[i][j] = <span class="string">"X"</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给一个二维的矩阵，包含 ‘X’ 和 ‘O’, 找到所有被 ‘X’ 围绕的区域，并用 ‘X’ 填充满。</p>
</blockquote>
<p><strong>样例</strong><br>给出二维矩阵：<br]]>
    </summary>
    
      <category term="BFS" scheme="http://yoursite.com/tags/BFS/"/>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Union Find" scheme="http://yoursite.com/tags/Union-Find/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[305 Number of Islands II]]></title>
    <link href="http://yoursite.com/2016/07/19/305-Number-of-Islands-II/"/>
    <id>http://yoursite.com/2016/07/19/305-Number-of-Islands-II/</id>
    <published>2016-07-20T00:26:41.000Z</published>
    <updated>2016-07-20T07:27:49.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定 n，m，分别代表一个2D矩阵的行数和列数，同时，给定一个大小为 k 的二元数组A。起初，2D矩阵的行数和列数均为 0，即该矩阵中只有海洋。二元数组有 k 个运算符，每个运算符有 2 个整数 A[i].x, A[i].y，你可通过改变矩阵网格中的A[i].x]，[A[i].y] 来将其由海洋改为岛屿。请在每次运算后，返回矩阵中岛屿的数量。</p>
</blockquote>
<p><strong>样例</strong><br>给定 n = 3, m = 3， 二元数组 A =[(0,0),(0,1),(2,2),(2,1)].<br>返回 [1,1,2,2].</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>作为Number of Islands的follow up，可以同样使用DFS或者BFS，每次加入新的点就再全部遍历一次二维数组 - 每次遍历O(m<em>n)，如果一共k次操作，总的时间复杂度为O(k</em>m*n)</li>
<li>由于每次操作只是把一块海洋变成陆地，它影响的点只可能是上下左右四个位置，如果是1，将它们合并。</li>
<li>集合合并 - 使用并查集，换句话说只有可能改变四个点的father</li>
<li>初始化时，每个点的father是自己的ID = x*列数 + y</li>
<li>全局变量 count = 0, 每次增加一个点 count += 1</li>
<li>考虑上下左右四个位置是否能够合并，每次合并 count -= 1</li>
<li>最终时间复杂度降为O(k*4) ~ O(k)</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a point.</span></span><br><span class="line"><span class="comment"># class Point:</span></span><br><span class="line"><span class="comment">#     def __init__(self, a=0, b=0):</span></span><br><span class="line"><span class="comment">#         self.x = a</span></span><br><span class="line"><span class="comment">#         self.y = b</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, m, n)</span>:</span></span><br><span class="line">        self.father = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">                id = self.converttoId(i,j,m);</span><br><span class="line">                self.father[id] = id </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">converttoId</span><span class="params">(self, x, y, m)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x*m + y</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, x)</span>:</span></span><br><span class="line">            parent = self.father[x]</span><br><span class="line">            <span class="keyword">while</span> parent != self.father[parent]:</span><br><span class="line">                parent = self.father[parent]</span><br><span class="line">            <span class="keyword">return</span> parent</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compressed_find</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        parent = self.father[x]</span><br><span class="line">        <span class="keyword">while</span> parent != self.father[parent]:</span><br><span class="line">            parent = self.father[parent]</span><br><span class="line"></span><br><span class="line">        temp = -<span class="number">1</span>;</span><br><span class="line">        fa = self.father[x]</span><br><span class="line">        <span class="keyword">while</span> fa != self.father[fa]:</span><br><span class="line">            temp = self.father[fa]</span><br><span class="line">            self.father[fa] = parent</span><br><span class="line">            fa = temp</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> parent</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">            fa_x = self.find(x)</span><br><span class="line">            fa_y = self.find(y)</span><br><span class="line">            <span class="keyword">if</span> fa_x != fa_y:</span><br><span class="line">                self.father[fa_x] = fa_y</span><br><span class="line">                </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param &#123;int&#125; n an integer</span></span><br><span class="line">    <span class="comment"># @param &#123;int&#125; m an integer</span></span><br><span class="line">    <span class="comment"># @param &#123;Pint[]&#125; operators an array of point</span></span><br><span class="line">    <span class="comment"># @return &#123;int[]&#125; an integer array</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numIslands2</span><span class="params">(self, n, m, operators)</span>:</span></span><br><span class="line">        dx = [<span class="number">0</span>,-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">        dy = [<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">        island = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(m)] <span class="keyword">for</span> j <span class="keyword">in</span> range(n)]</span><br><span class="line">        ans = []</span><br><span class="line">        uf = UnionFind(n, m)</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> operators != <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(operators)):</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                x = operators[i].x</span><br><span class="line">                y = operators[i].y</span><br><span class="line">                <span class="keyword">if</span> island[x][y] != <span class="number">1</span>:</span><br><span class="line">                    island[x][y]  = <span class="number">1</span></span><br><span class="line">                    id = uf.converttoId(x, y, m)</span><br><span class="line">                    <span class="comment"># 计算上下左右四个点的位置</span></span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">                        nx = x + dx[j]</span><br><span class="line">                        ny = y + dy[j]</span><br><span class="line">                        <span class="keyword">if</span> <span class="number">0</span> &lt;= nx <span class="keyword">and</span> nx &lt; n <span class="keyword">and</span> <span class="number">0</span> &lt;= ny <span class="keyword">and</span> ny &lt; m <span class="keyword">and</span> island[nx][ny] == <span class="number">1</span>:</span><br><span class="line">                            nid = uf.converttoId(nx, ny, m)</span><br><span class="line">                            fa = uf.find(id)</span><br><span class="line">                            nfa = uf.find(nid)</span><br><span class="line">                            <span class="keyword">if</span> fa != nfa:</span><br><span class="line">                                count -= <span class="number">1</span></span><br><span class="line">                                uf.union(id, nid)</span><br><span class="line"></span><br><span class="line">                ans.append(count)</span><br><span class="line">            <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定 n，m，分别代表一个2D矩阵的行数和列数，同时，给定一个大小为 k 的二元数组A。起初，2D矩阵的行数和列数均为 0，即该矩阵中只有海洋。二元数组有 k 个运算符，每个运算符有 2 个整数 A[i].x,]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Union Find" scheme="http://yoursite.com/tags/Union-Find/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[200 Number of Islands]]></title>
    <link href="http://yoursite.com/2016/07/19/200-Number-of-Islands/"/>
    <id>http://yoursite.com/2016/07/19/200-Number-of-Islands/</id>
    <published>2016-07-20T00:03:43.000Z</published>
    <updated>2016-07-20T07:04:29.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给一个01矩阵，求不同的岛屿的个数。<br>0代表海，1代表岛，如果两个1相邻，那么这两个1属于同一个岛。我们只考虑上下左右为相邻。</p>
</blockquote>
<p><strong>样例</strong><br>在矩阵：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#10;  [1, 1, 0, 0, 0],&#10;  [0, 1, 0, 0, 1],&#10;  [0, 0, 0, 1, 1],&#10;  [0, 0, 0, 0, 0],&#10;  [0, 0, 0, 0, 1]&#10;]</span><br></pre></td></tr></table></figure></p>
<p>中有 3 个岛.</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>本题就是无向图中求连通块的二维表示，所以同样可以采用DFS解决。使用Union Find大材小用了</li>
<li>设计一个removeIsland函数，每次遇到1就DFS进行查找把上下左右相邻的1都变成0</li>
<li>最后，两层for循环遍历二维数组，遇到1调用removeIsland函数</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.dx = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>]</span><br><span class="line">        self.dy = [<span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">        self.m = <span class="number">0</span></span><br><span class="line">        self.n = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeIsland</span><span class="params">(self, grid, x, y)</span>:</span></span><br><span class="line">        grid[x][y] = <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            nextX = x + self.dx[i]</span><br><span class="line">            nextY = y + self.dy[i]</span><br><span class="line">            <span class="keyword">if</span> nextX &gt;= <span class="number">0</span> <span class="keyword">and</span> nextX &lt; self.n <span class="keyword">and</span> nextY &gt;= <span class="number">0</span> <span class="keyword">and</span> nextY &lt; self.m:</span><br><span class="line">                <span class="keyword">if</span> grid[nextX][nextY] == <span class="string">'1'</span>:</span><br><span class="line">                    self.removeIsland(grid, nextX, nextY)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numIslands</span><span class="params">(self, grid)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type grid: List[List[str]]</span><br><span class="line">        :rtype: int</span><br><span class="line">        """</span></span><br><span class="line">        self.n = len(grid)</span><br><span class="line">        <span class="keyword">if</span> self.n == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        self.m = len(grid[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> self.m == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.m):</span><br><span class="line">                <span class="keyword">if</span> grid[i][j] == <span class="string">'1'</span>:</span><br><span class="line">                    self.removeIsland(grid, i, j)</span><br><span class="line">                    count += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给一个01矩阵，求不同的岛屿的个数。<br>0代表海，1代表岛，如果两个1相邻，那么这两个1属于同一个岛。我们只考虑上下左右为相邻。</p>
</blockquote>
<p><strong>样例</stron]]>
    </summary>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Recursion" scheme="http://yoursite.com/tags/Recursion/"/>
    
      <category term="Union Find" scheme="http://yoursite.com/tags/Union-Find/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[432 Find the Weak Connected Component in the Directed Graph]]></title>
    <link href="http://yoursite.com/2016/07/18/432-Find-the-Weak-Connected-Component-in-the-Directed-Graph/"/>
    <id>http://yoursite.com/2016/07/18/432-Find-the-Weak-Connected-Component-in-the-Directed-Graph/</id>
    <published>2016-07-18T23:03:51.000Z</published>
    <updated>2016-07-19T06:08:34.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>请找出有向图中弱联通分量的数目。图中的每个节点包含其邻居的 1 个标签和1 个列表。 （一个有向图中的相连节点指的是一个包含 2 个通过直接边沿路径相连的顶点的子图。）</p>
</blockquote>
<p><strong>样例</strong><br>给定图:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A-----&#62;B  C&#10; \     |  | &#10;  \    |  |&#10;   \   |  |&#10;    \  v  v&#10;     -&#62;D  E &#60;- F</span><br></pre></td></tr></table></figure></p>
<p>返回 {A,B,D}, {C,E,F}. 图中有 2 个相连要素，即{A,B,D} 和 {C,E,F} 。</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>首先了解有向图中的一个概念<ul>
<li>弱连通块 - 有向图中，A能到B，B不能到A</li>
<li>强连通块 - 有向图中，A能到B，B也能到A</li>
</ul>
</li>
<li><p>本题是使用Union Find的典型题，Union Find(并查集)主要提供以下操作：</p>
<ul>
<li><p>Find - 判断在不在同一个集合中，边查找边路径压缩，均摊时间复杂度O(1)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def compressed_find(self, x):&#10;        parent = father[x]&#10;        while parent != father[parent]:&#10;            parent = father[parent]&#10;&#10;        temp = -1;&#10;        fa = father[x]&#10;        while fa != father[fa]:&#10;            temp = father[fa]&#10;            father[fa] = parent&#10;            fa = temp&#10;&#10;        return parent</span><br></pre></td></tr></table></figure>
</li>
<li><p>Union - 合并两个集合，时间复杂度O(1)</p>
</li>
</ul>
</li>
<li>遍历所有nodes建立hashset，初始化Union Find</li>
<li>遍历第二遍，合并每个node和他们neighbors的father</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a directed graph node</span></span><br><span class="line"><span class="comment"># class DirectedGraphNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.label = x</span></span><br><span class="line"><span class="comment">#         self.neighbors = []</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, hashset)</span>:</span></span><br><span class="line">        self.father = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> hashset:</span><br><span class="line">            self.father[item] = item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        parent = self.father[x]</span><br><span class="line">        <span class="keyword">while</span> parent != self.father[parent]:</span><br><span class="line">            parent = self.father[parent]</span><br><span class="line">        <span class="keyword">return</span> parent</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compressed_find</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        parent = self.father[x]</span><br><span class="line">        <span class="keyword">while</span> parent != self.father[parent]:</span><br><span class="line">            parent = self.father[parent]</span><br><span class="line"></span><br><span class="line">        temp = -<span class="number">1</span>;</span><br><span class="line">        fa = self.father[x]</span><br><span class="line">        <span class="keyword">while</span> fa != self.father[fa]:</span><br><span class="line">            temp = self.father[fa]</span><br><span class="line">            self.father[fa] = parent</span><br><span class="line">            fa = temp</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> parent</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">            fa_x = self.find(x)</span><br><span class="line">            fa_y = self.find(y)</span><br><span class="line">            <span class="keyword">if</span> fa_x != fa_y:</span><br><span class="line">                self.father[fa_x] = fa_y</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param &#123;DirectedGraphNode[]&#125; nodes a array of directed graph node</span></span><br><span class="line">    <span class="comment"># @return &#123;int[][]&#125; a connected set of a directed graph</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connectedSet2</span><span class="params">(self, nodes)</span>:</span></span><br><span class="line">        <span class="comment"># Find all the different nodes in the Graph, store in the hashSet</span></span><br><span class="line">        myHashSet = set()</span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> nodes:</span><br><span class="line">            myHashSet.add(node.label)</span><br><span class="line">            <span class="keyword">for</span> neighbor <span class="keyword">in</span> node.neighbors:</span><br><span class="line">                myHashSet.add(neighbor.label)</span><br><span class="line">                </span><br><span class="line">        <span class="comment"># right now, one node's father is itself</span></span><br><span class="line">        unionFind = UnionFind(myHashSet)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> nodes:</span><br><span class="line">            node_father = unionFind.compressed_find(node.label)</span><br><span class="line">            <span class="keyword">for</span> neighbor <span class="keyword">in</span> node.neighbors:</span><br><span class="line">                neighbor_father = unionFind.compressed_find(neighbor.label)</span><br><span class="line">                <span class="keyword">if</span> node_father != neighbor_father:</span><br><span class="line">	        		unionFind.union(neighbor.label, node.label)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># group the node with same father</span></span><br><span class="line">        resMap = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> nodes:</span><br><span class="line">            father = unionFind.compressed_find(node.label)</span><br><span class="line">            <span class="keyword">if</span> father <span class="keyword">not</span> <span class="keyword">in</span> resMap:</span><br><span class="line">                resMap[father] = [node.label]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> node.label <span class="keyword">not</span> <span class="keyword">in</span> resMap[father]:</span><br><span class="line">                    resMap[father].append(node.label)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># append each group into the result            </span></span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> resMap.iteritems():</span><br><span class="line">            result.append(value)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>请找出有向图中弱联通分量的数目。图中的每个节点包含其邻居的 1 个标签和1 个列表。 （一个有向图中的相连节点指的是一个包含 2 个通过直接边沿路径相连的顶点的子图。）</p>
</blockquote>
<p]]>
    </summary>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="Union Find" scheme="http://yoursite.com/tags/Union-Find/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[11 Container With Most Water]]></title>
    <link href="http://yoursite.com/2016/07/18/11-Container-With-Most-Water/"/>
    <id>http://yoursite.com/2016/07/18/11-Container-With-Most-Water/</id>
    <published>2016-07-18T21:51:40.000Z</published>
    <updated>2016-07-19T04:54:25.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定 <em>n</em> 个非负整数 a1, a2, …, an, 每个数代表了坐标中的一个点 (i, ai)。画 <em>n</em> 条垂直线，使得 <em>i</em> 垂直线的两个端点分别为(i, ai)和(i, 0)。找到两条线，使得其与<em>x</em> 轴共同构成一个容器，以容纳最多水。</p>
</blockquote>
<p><strong>样例</strong><br>给出[1,3,2], 最大的储水面积是2.</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>根据题意，怎么求解容纳水的面积呢？假设有两个点i和j，面积 = min(a[i], a[j]) * (j - i)</li>
<li>首先，维护一个全局变量 - Area</li>
<li>所以每次要移动左右两个高度中较小的那一个，才有可能让面积增大。因为当你移动了较大的那一条边之后，再求两条边的最小值，还是不会超过移动之前的最小值，甚至还有可能会减小</li>
<li>Two Pointers - 对撞型指针</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxArea</span><span class="params">(self, height)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type height: List[int]</span><br><span class="line">        :rtype: int</span><br><span class="line">        """</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> height <span class="keyword">or</span> len(height) &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">            </span><br><span class="line">        left, right = <span class="number">0</span>, len(height) - <span class="number">1</span></span><br><span class="line">        res = min(height[left], height[right]) * (right - left)</span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            <span class="keyword">if</span> height[left] &lt; height[right]:</span><br><span class="line">                res = max(res, height[left] * (right - left))</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res = max(res, height[right] * (right - left))</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定 <em>n</em> 个非负整数 a1, a2, …, an, 每个数代表了坐标中的一个点 (i, ai)。画 <em>n</em> 条垂直线，使得 <em>i</em> 垂直线的两个端点分别为(i, a]]>
    </summary>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Two Pointers" scheme="http://yoursite.com/tags/Two-Pointers/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
</feed>
