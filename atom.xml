<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Code Chemistry]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-08-04T09:55:46.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Jason Yuan]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[3 Longest Substring Without Repeating Characters]]></title>
    <link href="http://yoursite.com/2016/08/03/3-Longest-Substring-Without-Repeating-Characters/"/>
    <id>http://yoursite.com/2016/08/03/3-Longest-Substring-Without-Repeating-Characters/</id>
    <published>2016-08-04T02:55:15.000Z</published>
    <updated>2016-08-04T09:55:46.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个字符串，请找出其中无重复字符的最长子字符串。</p>
</blockquote>
<p><strong>样例</strong><br>例如，在”abcabcbb”中，其无重复字符的最长子字符串是”abc”，其长度为 3。<br>对于，”bbbbb”，其无重复字符的最长子字符串为”b”，长度为1。</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>窗口类问题 - 最自然的方法双层for循环，时间复杂度O(n2)解决</li>
<li>考虑优化 - 即那些状态不需要扫描呢？以”abcbcbb”为例<ul>
<li>第一：left = 0, right = 3时出现重复，则right = 4, 5, …都不需要在考虑，直接退出while循环</li>
<li>第二：上一步退出循环以后，下一个i从哪里开始？从left = 1开始吗？错。由于hashmap记录了每一个字母出现的位置，所以right = 3时，字母是b，导致了重复，所以i可以直接从上一个b出现的位置的下一个开始，本例中即left = 2，才能保证开始是合法的。</li>
</ul>
</li>
<li>最后的时间复杂度是O(2n) =&gt; O(n)</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type s: str</span><br><span class="line">        :rtype: int</span><br><span class="line">        """</span></span><br><span class="line">        left, res = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        LastAppeared = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> right <span class="keyword">in</span> range(len(s)):</span><br><span class="line">            <span class="comment"># 如果出现重复，更新合法子串的左边界</span></span><br><span class="line">            <span class="keyword">if</span> s[right] <span class="keyword">in</span> LastAppeared <span class="keyword">and</span> LastAppeared[s[right]] &gt;= left:</span><br><span class="line">                left = LastAppeared[s[right]] + <span class="number">1</span></span><br><span class="line">            LastAppeared[s[right]] = right</span><br><span class="line">            res = max(res, right - left + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个字符串，请找出其中无重复字符的最长子字符串。</p>
</blockquote>
<p><strong>样例</strong><br>例如，在”abcabcbb”中，其无重复字符的最长子字符串是”abc]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
      <category term="Two Pointers" scheme="http://yoursite.com/tags/Two-Pointers/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[209 Minimum Size Subarray Sum]]></title>
    <link href="http://yoursite.com/2016/08/03/209-Minimum-Size-Subarray-Sum/"/>
    <id>http://yoursite.com/2016/08/03/209-Minimum-Size-Subarray-Sum/</id>
    <published>2016-08-04T01:30:35.000Z</published>
    <updated>2016-08-04T08:31:12.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个由 n 个整数组成的数组和一个正整数 s ，请找出该数组中满足其和 ≥ s 的最小长度子数组。如果无解，则返回 -1。</p>
</blockquote>
<p><strong>样例</strong><br>给定数组 [2,3,1,2,4,3] 和 s = 7, 子数组 [4,3] 是该条件下的最小长度子数组。</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>窗口类型题目 - 因为题目就是让我们找到一个起点和一个终点，保证长度最小且里面的数字之和不小于s</li>
<li>最自然的解法 - 双层for循环 - O(n2)的时间复杂度</li>
<li>优化，前向型指针(追击型指针)<ul>
<li>第一点：因为i = 0, j = 3时 2 + 2 + 1 + 2 = 8 &gt; 7，是一个candidate，之后我们不需要再向下遍历，因为后面都会大于7，<strong>但是长度更长，一定不是最优解，可以直接排除</strong></li>
<li>第二点：在第一点的情况之后，要让i = 1然后从j=i开始遍历吗?答案当然是<strong>当然不需要</strong>，因为i= 0, j = 3时刚好sum &gt; 7，所以i=1, j=2, i=1, j=3肯定都不需要考虑，可以直接让j从刚刚的位置开始下一轮循环</li>
</ul>
</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minSubArrayLen</span><span class="params">(self, s, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type s: int</span><br><span class="line">        :type nums: List[int]</span><br><span class="line">        :rtype: int</span><br><span class="line">        """</span></span><br><span class="line">        right, sum = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        res = sys.maxint</span><br><span class="line">        <span class="keyword">for</span> left <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">while</span> right &lt; len(nums) <span class="keyword">and</span> sum &lt; s:</span><br><span class="line">                sum += nums[right]</span><br><span class="line">                right += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> sum &gt;= s:</span><br><span class="line">                res = min(res, right - left)</span><br><span class="line">            sum -= nums[left]</span><br><span class="line">        <span class="keyword">if</span> res == sys.maxint:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个由 n 个整数组成的数组和一个正整数 s ，请找出该数组中满足其和 ≥ s 的最小长度子数组。如果无解，则返回 -1。</p>
</blockquote>
<p><strong>样例</strong><]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Two Pointers" scheme="http://yoursite.com/tags/Two-Pointers/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[399 Nuts & Bolts Problem]]></title>
    <link href="http://yoursite.com/2016/08/03/399-Nuts-Bolts-Problem/"/>
    <id>http://yoursite.com/2016/08/03/399-Nuts-Bolts-Problem/</id>
    <published>2016-08-04T00:48:10.000Z</published>
    <updated>2016-08-04T07:51:14.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一组 n 个不同大小的 nuts 和 n 个不同大小的 bolts。nuts 和 bolts 一一匹配。 不允许将 nut 之间互相比较，也不允许将 bolt 之间互相比较。也就是说，只许将 nut 与 bolt 进行比较， 或将 bolt 与 nut 进行比较。请比较 nut 与 bolt 的大小。</p>
</blockquote>
<p><strong>样例</strong><br>Nuts 用一个string数组表示 nuts [] = [‘ab’,’bc’,’dd’,’gg’]. Bolts 也用一个string数组表示 bolts[] = [‘AB’,’GG’, ‘DD’, ‘BC’]. 我们将提供一个比较函数，以比较 nut 与 bolt 的大小。将 nuts 进行升序排序，使得 nuts 与 bolts 位置对等。<br>比如 nuts = [‘ab’,’bc’,’dd’,’gg’], bolts = [‘BC’,’AA’,’DD’,’GG’]</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>Selection Sort - 利用partition的思想<br>因为Nuts之间，Bolts之间都是不能相互比较的，所以思路就是随机选择一个Nut来partition Bolts然后再反过来用那个已经在正确位置的Bolt来partition Nuts<ul>
<li>初始：cc aa dd bb</li>
<li>随机找到BB，partition之后</li>
<li>aa bb cc dd （cc, dd的顺序不确定）</li>
<li>之后再拿bb去反过来partition，得到</li>
<li>AA BB DD CC</li>
<li>递归向下，分别左右sort</li>
</ul>
</li>
<li>注意比较的时候compare函数只能</li>
<li>partition函数的执行过程，模拟<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pivot&#26159;4&#65292;&#36890;&#36807;for&#24490;&#29615;&#25214;&#21040;&#65292;&#20132;&#25442;&#21040;&#31532;&#19968;&#20301;&#65292;&#24182;&#35760;&#20303;pivot_partner = 4&#10;&#24320;&#22987;:[4, 3, 2, 9, 5]&#10;5 &#62; 4: [5, 3, 2, 9, 5]&#10;3 &#60; 4: [5, 3, 2, 9, 3]&#10;9 &#62; 4: [5, 9, 2, 9 , 3]&#10;2 &#60; 4: [5, 9, 2, 2, 3]&#10;&#27492;&#26102;L&#22312;&#20108;&#21495;&#20301;&#65292;&#35753;nums[L] = pivot_partner&#10;[5, 9, 4, 2, 3] =&#62;&#20445;&#35777;&#20102;4&#21069;&#38754;&#37117;&#26159;&#22823;&#20110;4&#30340;&#65292;&#21518;&#38754;&#37117;&#26159;&#23567;&#20110;4&#30340;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># class Comparator:</span></span><br><span class="line"><span class="comment">#     def cmp(self, a, b)</span></span><br><span class="line"><span class="comment"># You can use Compare.cmp(a, b) to compare nuts "a" and bolts "b",</span></span><br><span class="line"><span class="comment"># if "a" is bigger than "b", it will return 1, else if they are equal,</span></span><br><span class="line"><span class="comment"># it will return 0, else if "a" is smaller than "b", it will return -1.</span></span><br><span class="line"><span class="comment"># When "a" is not a nut or "b" is not a bolt, it will return 2, which is not valid.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param nuts: a list of integers</span></span><br><span class="line">    <span class="comment"># @param bolts: a list of integers</span></span><br><span class="line">    <span class="comment"># @param compare: a instance of Comparator</span></span><br><span class="line">    <span class="comment"># @return: nothing</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortNutsAndBolts</span><span class="params">(self, nuts, bolts, compare)</span>:</span></span><br><span class="line">        <span class="comment"># write your code here</span></span><br><span class="line">        <span class="keyword">if</span> nuts == [] <span class="keyword">or</span> bolts == [] <span class="keyword">or</span> compare <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        self.compare = compare</span><br><span class="line">        self.quickSort(nuts, bolts, <span class="number">0</span>, len(nuts) - <span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quickSort</span><span class="params">(self, nuts, bolts, left, right)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> left &gt;= right:</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        split_nut_pos = self.partition(nuts, bolts[left], left, right)</span><br><span class="line">        split_bolt_pos = self.partition(bolts, nuts[split_nut_pos], left, right)</span><br><span class="line">        self.quickSort(nuts, bolts, left, split_nut_pos - <span class="number">1</span>)</span><br><span class="line">        self.quickSort(nuts, bolts, split_nut_pos + <span class="number">1</span>, right)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(self, items, pivot, left, right)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> items == [] <span class="keyword">or</span> pivot == <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 首先把pivot换到数组的第一个位置</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(left, right + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> self.compare.cmp(pivot, items[i]) == <span class="number">0</span> \</span><br><span class="line">                <span class="keyword">or</span> self.compare.cmp(items[i], pivot) == <span class="number">0</span>:</span><br><span class="line">                items[left], items[i] = items[i], items[left]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 如果pivot是AA,此时pivot_partner就是aa</span></span><br><span class="line">        pivot_partner = items[left]</span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> \</span><br><span class="line">                (self.compare.cmp(pivot, items[right]) == -<span class="number">1</span> \</span><br><span class="line">                <span class="keyword">or</span> self.compare.cmp(items[right], pivot) == <span class="number">1</span>):</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">            items[left] = items[right]</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> \</span><br><span class="line">                (self.compare.cmp(pivot, items[left]) == <span class="number">1</span> \</span><br><span class="line">                <span class="keyword">or</span> self.compare.cmp(items[left], pivot) == -<span class="number">1</span>):</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">            items[right] = items[left]</span><br><span class="line">            </span><br><span class="line">        items[left] = pivot_partner</span><br><span class="line">        <span class="keyword">return</span> left</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一组 n 个不同大小的 nuts 和 n 个不同大小的 bolts。nuts 和 bolts 一一匹配。 不允许将 nut 之间互相比较，也不允许将 bolt 之间互相比较。也就是说，只许将 nut 与 b]]>
    </summary>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="Quick Select" scheme="http://yoursite.com/tags/Quick-Select/"/>
    
      <category term="Quick Sort" scheme="http://yoursite.com/tags/Quick-Sort/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[268 Missing Number]]></title>
    <link href="http://yoursite.com/2016/08/03/268-Missing-Number/"/>
    <id>http://yoursite.com/2016/08/03/268-Missing-Number/</id>
    <published>2016-08-03T21:49:32.000Z</published>
    <updated>2016-08-04T04:49:53.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出一个包含 0 .. <em>N</em> 中 <em>N</em> 个数的序列，找出0 .. <em>N</em> 中没有出现在序列中的那个数。</p>
</blockquote>
<p><strong>样例</strong><br><em>N</em> = 4 且序列为 [0, 1, 3] 时，缺失的数为2。</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>通过数学公式计算所有数的和，然后减掉已知数组中的的数</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">missingNumber</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type nums: List[int]</span><br><span class="line">        :rtype: int</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        </span><br><span class="line">        total = (<span class="number">1</span> + len(nums)) * len(nums) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            total -= num</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出一个包含 0 .. <em>N</em> 中 <em>N</em> 个数的序列，找出0 .. <em>N</em> 中没有出现在序列中的那个数。</p>
</blockquote>
<p><strong>样]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[7 Reverse Integer]]></title>
    <link href="http://yoursite.com/2016/08/02/7-Reverse-Integer/"/>
    <id>http://yoursite.com/2016/08/02/7-Reverse-Integer/</id>
    <published>2016-08-02T22:02:51.000Z</published>
    <updated>2016-08-03T05:03:24.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>将一个整数中的数字进行颠倒，当颠倒后的整数溢出时，返回 0 (标记为 32 位整数)。</p>
</blockquote>
<p><strong>样例</strong><br>给定 x = 123，返回 321<br>给定 x = -123，返回 -321</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>同样是获取每一位，滚动生成新的数</li>
<li>注意要考虑新的数值溢出的问题</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type x: int</span><br><span class="line">        :rtype: int</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">            res = self.helper(x)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res =  -self.helper(-x)</span><br><span class="line">        <span class="keyword">return</span> res <span class="keyword">if</span> -<span class="number">2147483648</span> &lt;= res &lt;= <span class="number">2147483647</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, num)</span>:</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> num &gt; <span class="number">0</span>:</span><br><span class="line">            res *= <span class="number">10</span></span><br><span class="line">            res += num % <span class="number">10</span></span><br><span class="line">            num /= <span class="number">10</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>将一个整数中的数字进行颠倒，当颠倒后的整数溢出时，返回 0 (标记为 32 位整数)。</p>
</blockquote>
<p><strong>样例</strong><br>给定 x = 123，返回 321]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[342 Power of Four]]></title>
    <link href="http://yoursite.com/2016/08/01/342-Power-of-Four/"/>
    <id>http://yoursite.com/2016/08/01/342-Power-of-Four/</id>
    <published>2016-08-01T23:09:45.000Z</published>
    <updated>2016-08-02T06:10:30.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出一个整数 (32 位), 写出一个函数判断它是不是4的次方数</p>
</blockquote>
<p><strong>样例:</strong><br>给出 num = 16, 返回 true.<br>给出 num = 5, 返回 false.</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>如果一个数是4的次方数要满足两点<ul>
<li>第一：这个数一定是2的次方数 =&gt; num &amp; (num - 1) == 0</li>
<li>第二: 二进制中0的个数是偶数个，比如4的二进制是100<blockquote>
<p>因为满足第一条，所以这个数的二进制一定是1后面跟几个0，为了保证0为偶数个，总体长度应为奇数个</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPowerOfFour</span><span class="params">(self, num)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type num: int</span><br><span class="line">        :rtype: bool</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">return</span> num &gt; <span class="number">0</span> <span class="keyword">and</span> num &amp; (num - <span class="number">1</span>) == <span class="number">0</span> <span class="keyword">and</span> len(<span class="string">"&#123;0:b&#125;"</span>.format(num)) % <span class="number">2</span> == <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出一个整数 (32 位), 写出一个函数判断它是不是4的次方数</p>
</blockquote>
<p><strong>样例:</strong><br>给出 num = 16, 返回 true.<br>给出]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[20 Valid Parentheses]]></title>
    <link href="http://yoursite.com/2016/08/01/20-Valid-Parentheses/"/>
    <id>http://yoursite.com/2016/08/01/20-Valid-Parentheses/</id>
    <published>2016-08-01T22:38:49.000Z</published>
    <updated>2016-08-02T05:39:36.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个字符串所表示的括号序列，包含以下字符：’(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’， 判定是否是有效的括号序列。</p>
</blockquote>
<p><strong>样例</strong><br>括号必须依照 “()” 顺序表示， “()[]{}” 是有效的括号，但”([)]”则是无效的括号。</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>经典的利用一个栈进行匹配校验。</li>
<li>如果current是左符号，入栈</li>
<li>如果current是右符号<ul>
<li>此时栈空，返回False</li>
<li>栈顶出栈与current比较，不相等则返回False</li>
</ul>
</li>
<li>最后检查栈是否为空，返回True</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type s: str</span><br><span class="line">        :rtype: bool</span><br><span class="line">        """</span></span><br><span class="line">        stack = []</span><br><span class="line">        balanced = <span class="keyword">True</span></span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> index &lt; len(s) <span class="keyword">and</span> balanced:</span><br><span class="line">            symbol = s[index]</span><br><span class="line">            <span class="keyword">if</span> symbol <span class="keyword">in</span> <span class="string">"([&#123;"</span>:</span><br><span class="line">                stack.append(symbol)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> len(stack) == <span class="number">0</span>:</span><br><span class="line">                    balanced = <span class="keyword">False</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    top = stack.pop()</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> self.matches(top,symbol):</span><br><span class="line">                       balanced = <span class="keyword">False</span></span><br><span class="line">            index = index + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> balanced <span class="keyword">and</span> len(stack) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">matches</span><span class="params">(self, open, close)</span>:</span></span><br><span class="line">        opens = <span class="string">"([&#123;"</span></span><br><span class="line">        closers = <span class="string">")]&#125;"</span></span><br><span class="line">        <span class="keyword">return</span> opens.index(open) == closers.index(close)</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个字符串所表示的括号序列，包含以下字符：’(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’， 判定是否是有效的括号序列。</p>
</blockquote>
<p><strong>样例</st]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Stack" scheme="http://yoursite.com/tags/Stack/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[202 Happy Number]]></title>
    <link href="http://yoursite.com/2016/08/01/202-Happy-Number/"/>
    <id>http://yoursite.com/2016/08/01/202-Happy-Number/</id>
    <published>2016-08-01T22:20:17.000Z</published>
    <updated>2016-08-02T05:23:45.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>写一个算法来判断一个数是不是”快乐数”。<br>一个数是不是快乐是这么定义的：对于一个正整数，每一次将该数替换为他每个位置上的数字的平方和，然后重复这个过程直到这个数变为1，或是无限循环但始终变不到1。如果可以变为1，那么这个数就是快乐数。</p>
</blockquote>
<p><strong>样例</strong><br>19 就是一个快乐数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1^2 + 9^2 = 82&#10;8^2 + 2^2 = 68&#10;6^2 + 8^2 = 100&#10;1^2 + 0^2 + 0^2 = 1</span><br></pre></td></tr></table></figure></p>
<h3 id="解题思路">解题思路</h3><ul>
<li>首先写一个helper函数，计算一个数每一位的平方和。比如输入19返回82</li>
<li>当n不等于1且n计算过后的值未出现过，继续计算。若最后出现循环则返回False</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isHappy</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type n: int</span><br><span class="line">        :rtype: bool</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        myset = set()</span><br><span class="line">        <span class="keyword">while</span> n != <span class="number">1</span> <span class="keyword">and</span> n <span class="keyword">not</span> <span class="keyword">in</span> myset:</span><br><span class="line">            myset.add(n)</span><br><span class="line">            n = self.helper(n)</span><br><span class="line">        <span class="keyword">return</span> n == <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, num)</span>:</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> num:</span><br><span class="line">            res += (num % <span class="number">10</span>) * (num % <span class="number">10</span>)</span><br><span class="line">            num /= <span class="number">10</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>写一个算法来判断一个数是不是”快乐数”。<br>一个数是不是快乐是这么定义的：对于一个正整数，每一次将该数替换为他每个位置上的数字的平方和，然后重复这个过程直到这个数变为1，或是无限循环但始终变不到1。如果可以]]>
    </summary>
    
      <category term="Hash Table" scheme="http://yoursite.com/tags/Hash-Table/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[231 Power of Two]]></title>
    <link href="http://yoursite.com/2016/08/01/231-Power-of-Two/"/>
    <id>http://yoursite.com/2016/08/01/231-Power-of-Two/</id>
    <published>2016-08-01T22:00:57.000Z</published>
    <updated>2016-08-02T05:01:26.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>用 O(<em>1</em>) 时间检测整数 <em>n</em> 是否是 <em>2</em> 的幂次。</p>
</blockquote>
<p><strong>样例</strong><br>n=4，返回 true;<br>n=5，返回 false.</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>本题考查bit操作</li>
<li><p>数学问题，照例先观察前几项</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 =&#62; 1 &#10;2 =&#62; 10&#10;4 =&#62; 100&#10;8 =&#62; 1000&#10;16 =&#62; 10000&#10;...</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以发现，2的次方数与2的次方数减1的<strong>相与</strong>一定为零</p>
</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPowerOfTwo</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type n: int</span><br><span class="line">        :rtype: bool</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">return</span> n &gt; <span class="number">0</span> <span class="keyword">and</span> n &amp; (n - <span class="number">1</span>) == <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>用 O(<em>1</em>) 时间检测整数 <em>n</em> 是否是 <em>2</em> 的幂次。</p>
</blockquote>
<p><strong>样例</strong><br>n=4，返回 ]]>
    </summary>
    
      <category term="Bit Manipulation" scheme="http://yoursite.com/tags/Bit-Manipulation/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[189 Rotate Array]]></title>
    <link href="http://yoursite.com/2016/07/31/189-Rotate-Array/"/>
    <id>http://yoursite.com/2016/07/31/189-Rotate-Array/</id>
    <published>2016-08-01T02:24:52.000Z</published>
    <updated>2016-08-01T09:25:18.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出一个n个元素的数组，向右位移k位。比如 <em>n</em> = 7 and <em>k</em> = 3, 已知数组为[1,2,3,4,5,6,7] 旋转之后为 [5,6,7,1,2,3,4].</p>
</blockquote>
<h3 id="解题思路">解题思路</h3><ul>
<li>跟LintCode中旋转string是一样的思路，三步翻转法</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotate</span><span class="params">(self, nums, k)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type nums: List[int]</span><br><span class="line">        :type k: int</span><br><span class="line">        :rtype: void Do not return anything, modify nums in-place instead.</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        k %= len(nums)</span><br><span class="line">        self.helper(nums, len(nums) - k, len(nums) - <span class="number">1</span>)</span><br><span class="line">        self.helper(nums, <span class="number">0</span>, len(nums) - k - <span class="number">1</span>)</span><br><span class="line">        self.helper(nums, <span class="number">0</span>, len(nums) - <span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, nums, i, j)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; j:</span><br><span class="line">            nums[i], nums[j] = nums[j], nums[i]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            j -= <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出一个n个元素的数组，向右位移k位。比如 <em>n</em> = 7 and <em>k</em> = 3, 已知数组为[1,2,3,4,5,6,7] 旋转之后为 [5,6,7,1,2,3,4].</p>
]]>
    </summary>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[85 Maximal Rectangle]]></title>
    <link href="http://yoursite.com/2016/07/31/85-Maximal-Rectangle/"/>
    <id>http://yoursite.com/2016/07/31/85-Maximal-Rectangle/</id>
    <published>2016-08-01T01:28:47.000Z</published>
    <updated>2016-08-01T08:29:44.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给你一个二维矩阵，权值为False和True，找到一个最大的矩形，使得里面的值全部为True，输出它的面积</p>
</blockquote>
<p><strong>样例</strong><br>给你一个矩阵如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#10;  [1, 1, 0, 0, 1],&#10;  [0, 1, 0, 0, 1],&#10;  [0, 0, 1, 1, 1],&#10;  [0, 0, 1, 1, 1],&#10;  [0, 0, 0, 0, 1]&#10;]</span><br></pre></td></tr></table></figure></p>
<p>输出6</p>
<h3 id="解题思路">解题思路</h3><p><img src="http://upload-images.jianshu.io/upload_images/424375-2a5a361549e471e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="转化"></p>
<ul>
<li>根据上图，可以清楚的看出本题可以转化为Largest Rectangle in Histogarm来做</li>
<li>初始化height = [0, 0 ,0 ….]</li>
<li>对于每一行，先求出以这一行为x轴的每个柱子的高度，求解时，可以每次基于上一行的值进行更新。然后O(n)的时间求出最大矩形，不断更新全局变量res</li>
<li>时间复杂度为 O(n * (n + n)) = O(n2)</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maximalRectangle</span><span class="params">(self, matrix)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type matrix: List[List[str]]</span><br><span class="line">        :rtype: int</span><br><span class="line">        """</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> matrix:</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        height = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(matrix[<span class="number">0</span>]))]</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> matrix:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(row)):</span><br><span class="line">                <span class="keyword">if</span> row[i] == <span class="string">'0'</span>:</span><br><span class="line">                    height[i] = <span class="number">0</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    height[i] += <span class="number">1</span></span><br><span class="line">            res = max(res, self.largestRectangleArea(height))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">largestRectangleArea</span><span class="params">(self, height)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> height:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            </span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        stack = []</span><br><span class="line">        height.append(-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(height)):</span><br><span class="line">            current = height[i]</span><br><span class="line">            <span class="keyword">while</span> len(stack) != <span class="number">0</span> <span class="keyword">and</span> current &lt;= height[stack[-<span class="number">1</span>]]:</span><br><span class="line">                h = height[stack.pop()]</span><br><span class="line">                w = i <span class="keyword">if</span> len(stack) == <span class="number">0</span> <span class="keyword">else</span> i - stack[-<span class="number">1</span>] - <span class="number">1</span></span><br><span class="line">                res = max(res, h * w)</span><br><span class="line">            stack.append(i)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给你一个二维矩阵，权值为False和True，找到一个最大的矩形，使得里面的值全部为True，输出它的面积</p>
</blockquote>
<p><strong>样例</strong><br>给你一个矩阵如]]>
    </summary>
    
      <category term="Dynamic Programming" scheme="http://yoursite.com/tags/Dynamic-Programming/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Stack" scheme="http://yoursite.com/tags/Stack/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[283 Move Zeroes]]></title>
    <link href="http://yoursite.com/2016/07/31/283-Move-Zeroes/"/>
    <id>http://yoursite.com/2016/07/31/283-Move-Zeroes/</id>
    <published>2016-08-01T00:45:08.000Z</published>
    <updated>2016-08-01T07:45:40.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给一个数组 <em>nums</em> 写一个函数将 0 移动到数组的最后面，非零元素保持原数组的顺序</p>
</blockquote>
<p><strong>样例</strong><br>给出 <em>nums</em> = [0, 1, 0, 3, 12], 调用函数之后, <em>nums</em> = [1, 3, 12, 0, 0].</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>第一个方法是记录一个指针指向0，每次swap的时候更新指向零的指针</li>
<li>第二个方法是两个指针，一个指针指向零，一个指针指向非零</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># method 1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">moveZeroes</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type nums: List[int]</span><br><span class="line">        :rtype: void Do not return anything, modify nums in-place instead.</span><br><span class="line">        """</span></span><br><span class="line">        pos = <span class="number">0</span>  <span class="comment"># position of "0" starts at</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] != <span class="number">0</span>:</span><br><span class="line">                nums[i], nums[pos] = nums[pos], nums[i]</span><br><span class="line">                pos += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># method 2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">moveZeroes</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type nums: List[int]</span><br><span class="line">        :rtype: void Do not return anything, modify nums in-place instead.</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        </span><br><span class="line">        Zero, NonZero = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> NonZero &lt; len(nums):</span><br><span class="line">            <span class="keyword">if</span> nums[NonZero] == <span class="number">0</span>:</span><br><span class="line">                NonZero += <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">print</span> nums[Zero], nums[NonZero]</span><br><span class="line">                nums[Zero], nums[NonZero] = nums[NonZero], nums[Zero]</span><br><span class="line"></span><br><span class="line">            Zero += <span class="number">1</span></span><br><span class="line">            NonZero += <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给一个数组 <em>nums</em> 写一个函数将 0 移动到数组的最后面，非零元素保持原数组的顺序</p>
</blockquote>
<p><strong>样例</strong><br>给出 <em>nu]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Two Pointers" scheme="http://yoursite.com/tags/Two-Pointers/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[172 Factorial Trailing Zeroes]]></title>
    <link href="http://yoursite.com/2016/07/31/172-Factorial-Trailing-Zeroes/"/>
    <id>http://yoursite.com/2016/07/31/172-Factorial-Trailing-Zeroes/</id>
    <published>2016-07-31T23:41:30.000Z</published>
    <updated>2016-08-01T06:41:50.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>设计一个算法，计算出n阶乘中尾部零的个数</p>
</blockquote>
<p><strong>样例</strong><br><strong>11! = 39916800</strong>，因此应该返回 2</p>
<h3 id="解题思路">解题思路</h3><ul>
<li><p>数学问题，写成前几项找规律</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5!, &#21253;&#21547;1*5, 1&#20010;5 =&#62; 1&#20010;0&#10;10!, &#21253;&#21547;1*5,2*5, 2&#20010;5 =&#62; 2&#20010;0&#10;15!, &#21253;&#21547;1*5,2*5,3*5, 3&#20010;5 =&#62; 3&#20010;0&#10;20!, &#21253;&#21547;1*5,2*5,3*5,4*5, 4&#20010;5 =&#62; 4&#20010;0&#10;25!, &#21253;&#21547;1*5,2*5,3*5,4*5,5*5, 5&#20010;5 =&#62; 5&#20010;0&#10;...</span><br></pre></td></tr></table></figure>
</li>
<li><p>所以本题就转化为，找1到n中包含几个5</p>
</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">trailingZeroes</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type n: int</span><br><span class="line">        :rtype: int</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> n:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">            res += n / <span class="number">5</span></span><br><span class="line">            n /= <span class="number">5</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>设计一个算法，计算出n阶乘中尾部零的个数</p>
</blockquote>
<p><strong>样例</strong><br><strong>11! = 39916800</strong>，因此应该返回 2]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[292 Nim Game]]></title>
    <link href="http://yoursite.com/2016/07/30/292-Nim-Game/"/>
    <id>http://yoursite.com/2016/07/30/292-Nim-Game/</id>
    <published>2016-07-30T20:19:35.000Z</published>
    <updated>2016-07-31T03:20:14.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>经典尼姆游戏，桌上有n块石子，每一每个选手可以拿1-3块石子，交替进行，谁能拿到最后一块谁获胜。假设每一步，你们两个人都会想到最优选择。请写出判断函数。</p>
</blockquote>
<p><strong>样例</strong>：<br>如果还剩4块，该你选择，无论如何对手都会赢。</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>本题是脑筋急转弯问题，可通过数学归纳，列举。。。来找到规律<ul>
<li>1个石子，先手全部拿走，先手胜；</li>
<li>2个石子，先手全部拿走，先手胜；</li>
<li>3个石子，先手全部拿走，先手胜；</li>
<li>4个石子，先手拿完，后手面对的是先手的第1，2，3情况，后手必胜；</li>
<li>5个石子，先手拿走1个让后手面对第4种情况，后手必败；</li>
<li>6个石子，先手拿走2个让后手面对第4种情况，后手必败；<br>……<br>容易看出来，只有当出现了4的倍数时，后手每次拿走的石头数量与先手相加都等于4，最终会把第四种情况留给先手，从而获胜。其余情况先手都可以获胜。</li>
</ul>
</li>
<li>代码非常简单</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canWinNim</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type n: int</span><br><span class="line">        :rtype: bool</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span> <span class="keyword">if</span> n % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">else</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>经典尼姆游戏，桌上有n块石子，每一每个选手可以拿1-3块石子，交替进行，谁能拿到最后一块谁获胜。假设每一步，你们两个人都会想到最优选择。请写出判断函数。</p>
</blockquote>
<p><strong]]>
    </summary>
    
      <category term="BrainTeasers" scheme="http://yoursite.com/tags/BrainTeasers/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[344 Reverse String]]></title>
    <link href="http://yoursite.com/2016/07/30/344-Reverse-String/"/>
    <id>http://yoursite.com/2016/07/30/344-Reverse-String/</id>
    <published>2016-07-30T20:17:21.000Z</published>
    <updated>2016-07-31T03:18:00.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>翻转字符串</p>
</blockquote>
<p><strong>样例</strong>:<br>给出 s = “hello”, 返回 “olleh”.</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>方法一：在Python中string可以看做是字符的数组，所以直接翻转字符数组</li>
<li>方法二：碰撞型指针，两个指针，从两头对调</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># method 1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseString</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type s: str</span><br><span class="line">        :rtype: str</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">return</span> s[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># method 2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseString</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type s: str</span><br><span class="line">        :rtype: str</span><br><span class="line">        """</span></span><br><span class="line">        elements = list(s)</span><br><span class="line">        left, right = <span class="number">0</span>, len(elements) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            elements[left], elements[right] = elements[right], elements[left]</span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">            right -= <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>.join(elements)</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>翻转字符串</p>
</blockquote>
<p><strong>样例</strong>:<br>给出 s = “hello”, 返回 “olleh”.</p>
<h3 id="解题思路">解题思路</h3]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
      <category term="Two Ponters" scheme="http://yoursite.com/tags/Two-Ponters/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[258 Add Digits]]></title>
    <link href="http://yoursite.com/2016/07/30/258-Add-Digits/"/>
    <id>http://yoursite.com/2016/07/30/258-Add-Digits/</id>
    <published>2016-07-30T20:12:12.000Z</published>
    <updated>2016-07-31T03:13:21.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出一个非负整数，重复计算为一位的和，直到这个和变为一位数</p>
</blockquote>
<p><strong>样例</strong>：<br>给出 num = 38，过程即：<br>3 + 8 = 11<br>1 + 1 = 2<br>因为2只有一位，所以返回2</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>方法一：安装题目要求进行计算即可</li>
<li>方法二：同样是写出一些相应的结果，找规律<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1    1&#10;2    2&#10;3    3&#10;4    4&#10;5    5&#10;6    6&#10;7    7&#10;8    8    &#10;9    9    &#10;10    1&#10;11    2&#10;12    3    &#10;13    4&#10;14    5&#10;15    6&#10;16    7&#10;17    8&#10;18    9&#10;19    1&#10;20    2</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>我们可以得出规律，每9个一次循环，但需要注意：9， 18…对9取余就是0了，为了得到其本身，我们就用(n-1)%9+1这个表达式来包括所有的情况</p>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># method 1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addDigits</span><span class="params">(self, num)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type num: int</span><br><span class="line">        :rtype: int</span><br><span class="line">        """</span></span><br><span class="line">        res = self.helper(num)</span><br><span class="line">        <span class="keyword">while</span> res &gt; <span class="number">9</span>:</span><br><span class="line">            res = self.helper(res)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, num)</span>:</span></span><br><span class="line">        sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> num != <span class="number">0</span>:</span><br><span class="line">            sum += num % <span class="number">10</span></span><br><span class="line">            num = num / <span class="number">10</span></span><br><span class="line">        <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line"><span class="comment"># method 2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addDigits</span><span class="params">(self, num)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type num: int</span><br><span class="line">        :rtype: int</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> num</span><br><span class="line">        <span class="keyword">return</span> (num - <span class="number">1</span>) % <span class="number">9</span> + <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出一个非负整数，重复计算为一位的和，直到这个和变为一位数</p>
</blockquote>
<p><strong>样例</strong>：<br>给出 num = 38，过程即：<br>3 + 8 = 11]]>
    </summary>
    
      <category term="BrainTeasers" scheme="http://yoursite.com/tags/BrainTeasers/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[465 Kth Smallest Sum in Two Sorted Array]]></title>
    <link href="http://yoursite.com/2016/07/27/465-Kth-Smallest-Sum-in-Two-Sorted-Array/"/>
    <id>http://yoursite.com/2016/07/27/465-Kth-Smallest-Sum-in-Two-Sorted-Array/</id>
    <published>2016-07-28T00:40:35.000Z</published>
    <updated>2016-07-28T07:41:04.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定两个排好序的数组 <em>A</em>, <em>B</em>，定义集合 <em>sum</em> = <em>a</em> + <em>b</em> ，求 <em>sum</em> 中第k小的元素</p>
</blockquote>
<p><strong>样例</strong><br>给出 <em>A</em> = [1,7,11] <em>B</em> = [2,4,6]<br><strong>sum = [3, 5, 7, 9, 11, 13, 13, 15, 17]</strong><br>当 <em>k</em> = 3, 返回 7.<br>当 <em>k</em> = 4, 返回 9.<br>当 <em>k</em> = 8, 返回 15.</p>
<h3 id="解题思路">解题思路</h3><ul>
<li><p>使用set来记录访问过的pair</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">visited = set()</span><br><span class="line">visited.add(<span class="number">10</span>)</span><br><span class="line"><span class="number">10</span> <span class="keyword">is</span> <span class="keyword">in</span> visited <span class="comment"># return True</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用一个minHeap，每次可以取最小值。放入堆中的数据结构为(sum, i, j)</p>
</li>
<li>每次从堆中取出一个最小值，下一轮的candidates将是(sum, i+1, j), (sum, i, j+1)，将这两个candidates加入的heap之间要去重，因为有可能重复</li>
<li>从堆中取k次之后，就拿到了想要的结果</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param &#123;int[]&#125; A an integer arrays sorted in ascending order</span></span><br><span class="line">    <span class="comment"># @param &#123;int[]&#125; B an integer arrays sorted in ascending order</span></span><br><span class="line">    <span class="comment"># @param &#123;int&#125; k an integer</span></span><br><span class="line">    <span class="comment"># @return &#123;int&#125; an integer</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kthSmallestSum</span><span class="params">(self, A, B, k)</span>:</span></span><br><span class="line">        <span class="comment"># Write your code here</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> A <span class="keyword">or</span> <span class="keyword">not</span> B:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            </span><br><span class="line">        myQueue = Queue.PriorityQueue()</span><br><span class="line">        visited = set()</span><br><span class="line">        myQueue.put((A[<span class="number">0</span>]+B[<span class="number">0</span>], <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        visited.add((<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">while</span> k &gt; <span class="number">1</span>:</span><br><span class="line">            cur = myQueue.get()</span><br><span class="line">            k -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> cur[<span class="number">1</span>] + <span class="number">1</span> &lt; len(A) <span class="keyword">and</span> (cur[<span class="number">1</span>] + <span class="number">1</span>, cur[<span class="number">2</span>]) <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                visited.add((cur[<span class="number">1</span>] + <span class="number">1</span>, cur[<span class="number">2</span>]))</span><br><span class="line">                myQueue.put((A[cur[<span class="number">1</span>] + <span class="number">1</span>] + B[cur[<span class="number">2</span>]], cur[<span class="number">1</span>] + <span class="number">1</span>, cur[<span class="number">2</span>]))</span><br><span class="line">            <span class="keyword">if</span> cur[<span class="number">2</span>] + <span class="number">1</span> &lt; len(B) <span class="keyword">and</span> (cur[<span class="number">1</span>], cur[<span class="number">2</span>] + <span class="number">1</span>) <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                visited.add((cur[<span class="number">1</span>], cur[<span class="number">2</span>] + <span class="number">1</span>))</span><br><span class="line">                myQueue.put((A[cur[<span class="number">1</span>]] + B[cur[<span class="number">2</span>] + <span class="number">1</span>], cur[<span class="number">1</span>], cur[<span class="number">2</span>] + <span class="number">1</span>))</span><br><span class="line">        res = myQueue.get()</span><br><span class="line">        <span class="keyword">return</span> res[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定两个排好序的数组 <em>A</em>, <em>B</em>，定义集合 <em>sum</em> = <em>a</em> + <em>b</em> ，求 <em>sum</em> 中第k小的元素</p>]]>
    </summary>
    
      <category term="Heap" scheme="http://yoursite.com/tags/Heap/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[131 Building Outline]]></title>
    <link href="http://yoursite.com/2016/07/27/131-Building-Outline/"/>
    <id>http://yoursite.com/2016/07/27/131-Building-Outline/</id>
    <published>2016-07-27T22:28:53.000Z</published>
    <updated>2016-07-28T05:29:24.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>水平面上有 <em>N</em> 座大楼，每座大楼都是矩阵的形状，可以用三个数字表示 (start, end, height)，分别代表其在x轴上的起点，终点和高度。大楼之间从远处看可能会重叠，求出<em>N</em> 座大楼的外轮廓线。<br>外轮廓线的表示方法为若干三元组，每个三元组包含三个数字 (start, end, height)，代表这段轮廓的起始位置，终止位置和高度。</p>
</blockquote>
<p><strong>样例</strong><br>给出三座大楼：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#10;  [1, 3, 3],&#10;  [2, 4, 4],&#10;  [5, 6, 1]&#10;]</span><br></pre></td></tr></table></figure></p>
<p>外轮廓线为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#10;  [1, 2, 3],&#10;  [2, 4, 4],&#10;  [5, 6, 1]&#10;]</span><br></pre></td></tr></table></figure></p>
<h3 id="解题思路">解题思路</h3><ul>
<li>Sweep-Line - 扫描线问题，可以每次移动一个非常小的单位，不断去求当下楼房的高度。但实际上，只有某个楼房的开始或结尾才有交点的变化。</li>
<li>第一步，拆分(1, 3, 3) =&gt; (1, 3, 起点) 和 (3, 3, 终点)，然后排序，关于排序，对于含有坐标，高度，始末标记的三元组<ul>
<li>首先按坐标排序(大小排序)</li>
<li>坐标一样时，按高度排序(大小排序)</li>
<li>高度也一样时，按始末排序，始 &gt; 末</li>
<li><strong>排序非常重要</strong>， 时间复杂度是O(nlogn)</li>
</ul>
</li>
<li>每次到交点的时候，要求几个楼房的高度最大值 - Heap</li>
<li>每次到某一个楼房终点的时候要从堆中删除相应的高度 - HashHeap 时间复杂度是O(nlogn)</li>
<li>时间复杂度 O(nlogn) + O(nlogn) =&gt; O(nlogn)</li>
<li>如何查看堆顶元素 <code>myheap.queue[0]</code></li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">node</span>:</span></span><br><span class="line">    <span class="string">"""</span><br><span class="line">    create a node class to handle the duplicates in heap.</span><br><span class="line">    id =&gt; the index of x, num = number of x in heap</span><br><span class="line">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, id, number)</span>:</span></span><br><span class="line">        self.id = id</span><br><span class="line">        self.num = number</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HashHeap</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.map = &#123;&#125;</span><br><span class="line">        self.hashmaxheap = [<span class="number">0</span>]</span><br><span class="line">        self.map[<span class="number">0</span>] = node(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        self.currentSize = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="string">"""add a new item to the hashmaxheap"""</span></span><br><span class="line">        <span class="keyword">if</span> data <span class="keyword">in</span> self.map:</span><br><span class="line">            existData = self.map[data]</span><br><span class="line">            self.map[data] = node(existData.id, existData.num + <span class="number">1</span>)</span><br><span class="line">            self.currentSize += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.hashmaxheap.append(data)</span><br><span class="line">            self.map[data] = node(len(self.hashmaxheap) - <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">            self.currentSize += <span class="number">1</span></span><br><span class="line">            self.siftUp(len(self.hashmaxheap) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">peek</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""returns the item with the maxmum key value"""</span></span><br><span class="line">        <span class="keyword">return</span> self.hashmaxheap[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""returns the item with the maxmum key value, removing the item from the heap"""</span></span><br><span class="line">        res = self.hashmaxheap[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> self.map[res].num == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> self.map[res].id == len(self.hashmaxheap) - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">del</span> self.map[res]</span><br><span class="line">                self.hashmaxheap.pop()</span><br><span class="line">                self.currentSize -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">return</span> res</span><br><span class="line">            <span class="keyword">del</span> self.map[res]</span><br><span class="line">            self.hashmaxheap[<span class="number">1</span>] = self.hashmaxheap[-<span class="number">1</span>]</span><br><span class="line">            self.map[self.hashmaxheap[<span class="number">1</span>]] = node(<span class="number">1</span>, self.map[self.hashmaxheap[<span class="number">1</span>]].num)</span><br><span class="line">            self.hashmaxheap.pop()</span><br><span class="line">            self.siftDown(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.map[res] = node(<span class="number">1</span>, self.map[res].num - <span class="number">1</span>)</span><br><span class="line">        self.currentSize -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        existData = self.map[data]</span><br><span class="line">        <span class="keyword">if</span> existData.num == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">del</span> self.map[data]</span><br><span class="line">            <span class="keyword">if</span> existData.id == len(self.hashmaxheap) - <span class="number">1</span>:</span><br><span class="line">                self.hashmaxheap.pop()</span><br><span class="line">                self.currentSize -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            self.hashmaxheap[existData.id] = self.hashmaxheap[-<span class="number">1</span>]</span><br><span class="line">            self.map[self.hashmaxheap[-<span class="number">1</span>]] = node(existData.id, self.map[self.hashmaxheap[-<span class="number">1</span>]].num)</span><br><span class="line">            self.hashmaxheap.pop()</span><br><span class="line">            self.siftUp(existData.id)</span><br><span class="line">            self.siftDown(existData.id)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.map[data] = node(existData.id, existData.num - <span class="number">1</span>)</span><br><span class="line">        self.currentSize -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">siftUp</span><span class="params">(self, index)</span>:</span></span><br><span class="line">        <span class="comment"># // means devide by 2 and return int</span></span><br><span class="line">        <span class="keyword">while</span> index // <span class="number">2</span> &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> self.hashmaxheap[index] &lt; self.hashmaxheap[index // <span class="number">2</span>]:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                numA = self.map[self.hashmaxheap[index]].num</span><br><span class="line">                numB = self.map[self.hashmaxheap[index // <span class="number">2</span>]].num</span><br><span class="line">                self.map[self.hashmaxheap[index]] = node(index // <span class="number">2</span>, numA)</span><br><span class="line">                self.map[self.hashmaxheap[index // <span class="number">2</span>]] = node(index, numB)</span><br><span class="line">                self.hashmaxheap[index], self.hashmaxheap[index // <span class="number">2</span>] = self.hashmaxheap[index // <span class="number">2</span>], self.hashmaxheap[index] </span><br><span class="line">            index = index // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">siftDown</span><span class="params">(self, index)</span>:</span></span><br><span class="line">        <span class="string">"""correct single violation in a sub-tree"""</span></span><br><span class="line">        <span class="keyword">if</span> index &gt; (len(self.hashmaxheap) - <span class="number">1</span>) // <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># find the max child of current index</span></span><br><span class="line">        <span class="keyword">if</span> (index * <span class="number">2</span> + <span class="number">1</span>) &gt; (len(self.hashmaxheap) - <span class="number">1</span>) <span class="keyword">or</span> self.hashmaxheap[index * <span class="number">2</span>] &gt; self.hashmaxheap[index * <span class="number">2</span> + <span class="number">1</span>]:</span><br><span class="line">            maxChild = index * <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            maxChild = index * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self.hashmaxheap[index] &gt; self.hashmaxheap[maxChild]:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            numA = self.map[self.hashmaxheap[index]].num</span><br><span class="line">            numB = self.map[self.hashmaxheap[maxChild]].num</span><br><span class="line">            self.map[self.hashmaxheap[index]] = node(maxChild, numA)</span><br><span class="line">            self.map[self.hashmaxheap[maxChild]] = node(index, numB)</span><br><span class="line">            self.hashmaxheap[index], self.hashmaxheap[maxChild] = self.hashmaxheap[maxChild], self.hashmaxheap[index] </span><br><span class="line">        self.siftDown(index * <span class="number">2</span>)</span><br><span class="line">        self.siftDown(index * <span class="number">2</span> + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.currentSize</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.currentSize == <span class="number">0</span></span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sorter</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x[<span class="number">0</span>] != y[<span class="number">0</span>]:</span><br><span class="line">        <span class="keyword">return</span> x[<span class="number">0</span>] - y[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">elif</span> x[<span class="number">1</span>] != y[<span class="number">1</span>]:</span><br><span class="line">        <span class="keyword">return</span> x[<span class="number">1</span>] - y[<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 相同时间点上，加入新楼有优先权</span></span><br><span class="line">    <span class="keyword">return</span> y[<span class="number">2</span>] - x[<span class="number">2</span>]</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param buildings: A list of lists of integers</span></span><br><span class="line">    <span class="comment"># @return: A list of lists of integers</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">buildingOutline</span><span class="params">(self, buildings)</span>:</span></span><br><span class="line">        <span class="comment"># write your code here</span></span><br><span class="line">        <span class="keyword">if</span> len(buildings) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">            </span><br><span class="line">        timepoints = [] <span class="comment"># pos, height, in/out</span></span><br><span class="line">        <span class="keyword">for</span> building <span class="keyword">in</span> buildings:</span><br><span class="line">            timepoints.append((building[<span class="number">0</span>], building[<span class="number">2</span>], <span class="number">1</span>))</span><br><span class="line">            timepoints.append((building[<span class="number">1</span>], building[<span class="number">2</span>], -<span class="number">1</span>))</span><br><span class="line">            </span><br><span class="line">        timepoints = sorted(timepoints, cmp=sorter)</span><br><span class="line">        heights = HashHeap()</span><br><span class="line">        left = <span class="number">1</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> timepoint <span class="keyword">in</span> timepoints:</span><br><span class="line">            <span class="keyword">if</span> timepoint[<span class="number">2</span>] == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> heights.isEmpty() <span class="keyword">or</span> timepoint[<span class="number">1</span>] &gt; heights.peek():</span><br><span class="line">                    <span class="keyword">if</span> timepoint[<span class="number">0</span>] != left <span class="keyword">and</span> <span class="keyword">not</span> heights.isEmpty():</span><br><span class="line">                        res.append([left, timepoint[<span class="number">0</span>], heights.peek()])</span><br><span class="line">                    left = timepoint[<span class="number">0</span>]</span><br><span class="line">                heights.put(timepoint[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                heights.delete(timepoint[<span class="number">1</span>])</span><br><span class="line">                <span class="keyword">if</span> heights.isEmpty() <span class="keyword">or</span> timepoint[<span class="number">1</span>] &gt; heights.peek():</span><br><span class="line">                    res.append([left, timepoint[<span class="number">0</span>], timepoint[<span class="number">1</span>]])</span><br><span class="line">                    left = timepoint[<span class="number">0</span>]</span><br><span class="line">                    </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>水平面上有 <em>N</em> 座大楼，每座大楼都是矩阵的形状，可以用三个数字表示 (start, end, height)，分别代表其在x轴上的起点，终点和高度。大楼之间从远处看可能会重叠，求出<em>N<]]>
    </summary>
    
      <category term="HashHeap" scheme="http://yoursite.com/tags/HashHeap/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="Sweep-Line" scheme="http://yoursite.com/tags/Sweep-Line/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[391 Number of Airplanes in the Sky]]></title>
    <link href="http://yoursite.com/2016/07/25/391-Number-of-Airplanes-in-the-Sky/"/>
    <id>http://yoursite.com/2016/07/25/391-Number-of-Airplanes-in-the-Sky/</id>
    <published>2016-07-26T02:15:18.000Z</published>
    <updated>2016-07-26T09:15:47.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出飞机的起飞和降落时间的列表，用 interval 序列表示. 请计算出天上同时最多有多少架飞机？<br><strong>注意事项</strong><br>如果多架飞机降落和起飞在同一时刻，我们认为降落有优先权。</p>
</blockquote>
<p><strong>样例</strong><br>对于每架飞机的起降时间列表：[[1,10],[2,3],[5,8],[4,7]], 返回3。</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>假想有一条线，每次移动一个单位 - 经典扫描线问题(Sweep-Line)</li>
<li>只有每条线的起点和终点才可能导致扫面线和这些时间线交点的个数</li>
<li>把每个区间拆成两个点，比如(2, 5) =&gt; (2, 起飞), (5, 降落)</li>
<li>自定义的排序函数，考虑同一时间点，降落有优先权</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span><br><span class="line">Definition of Interval.</span><br><span class="line">class Interval(object):</span><br><span class="line">    def __init__(self, start, end):</span><br><span class="line">        self.start = start</span><br><span class="line">        self.end = end</span><br><span class="line">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sorter</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x[<span class="number">0</span>] != y[<span class="number">0</span>]:</span><br><span class="line">        <span class="keyword">return</span> x[<span class="number">0</span>] - y[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 相同时间点上，降落有优先权</span></span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">1</span>] - y[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param airplanes, a list of Interval</span></span><br><span class="line">    <span class="comment"># @return an integer</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countOfAirplanes</span><span class="params">(self, airplanes)</span>:</span></span><br><span class="line">        <span class="comment"># write your code here</span></span><br><span class="line">        timepoints = []</span><br><span class="line">        <span class="keyword">for</span> airplane <span class="keyword">in</span> airplanes:</span><br><span class="line">            timepoints.append((airplane.start, <span class="number">1</span>))</span><br><span class="line">            timepoints.append((airplane.end, -<span class="number">1</span>))</span><br><span class="line">        </span><br><span class="line">        timepoints = sorted(timepoints, cmp=sorter)</span><br><span class="line">        sum, res = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> timepoint <span class="keyword">in</span> timepoints:</span><br><span class="line">            sum += timepoint[<span class="number">1</span>]</span><br><span class="line">            res = max(sum, res)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出飞机的起飞和降落时间的列表，用 interval 序列表示. 请计算出天上同时最多有多少架飞机？<br><strong>注意事项</strong><br>如果多架飞机降落和起飞在同一时刻，我们认为降落有优先]]>
    </summary>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="Sweep-Line" scheme="http://yoursite.com/tags/Sweep-Line/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[211 Add and Search Word - Data structure design]]></title>
    <link href="http://yoursite.com/2016/07/25/211-Add-and-Search-Word-Data-structure-design/"/>
    <id>http://yoursite.com/2016/07/25/211-Add-and-Search-Word-Data-structure-design/</id>
    <published>2016-07-26T01:56:23.000Z</published>
    <updated>2016-07-26T08:56:53.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>设计一个包含下面两个操作的数据结构：addWord(word), search(word)<br>addWord(word)会在数据结构中添加一个单词。而search(word)则支持普通的单词查询或是只包含. 和a-z的简易正则表达式的查询。一个 . 可以代表一个任何的字母。</p>
</blockquote>
<p><strong>样例</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addWord(&#34;bad&#34;)&#10;addWord(&#34;dad&#34;)&#10;addWord(&#34;mad&#34;)&#10;search(&#34;pad&#34;)  // return false&#10;search(&#34;bad&#34;)  // return true&#10;search(&#34;.ad&#34;)  // return true&#10;search(&#34;b..&#34;)  // return true</span><br></pre></td></tr></table></figure></p>
<h3 id="解题思路">解题思路</h3><ul>
<li>本题跟Implement Trie十分相似，同样需要使用字典树</li>
<li>由于本题里中’.’可以代替任意字符，所以当某一个字符是’.’，就需要查找所有的子树，只要有一个最终能够存在，就返回True</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        Initialize your data structure here.</span><br><span class="line">        """</span></span><br><span class="line">        self.children = &#123;&#125;</span><br><span class="line">        self.IsWord = <span class="keyword">False</span></span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WordDictionary</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        initialize your data structure here.</span><br><span class="line">        """</span></span><br><span class="line">        self.root = TrieNode()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addWord</span><span class="params">(self, word)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        Adds a word into the data structure.</span><br><span class="line">        :type word: str</span><br><span class="line">        :rtype: void</span><br><span class="line">        """</span></span><br><span class="line">        node = self.root</span><br><span class="line">        <span class="keyword">for</span> letter <span class="keyword">in</span> word:</span><br><span class="line">            child = node.children.get(letter)</span><br><span class="line">            <span class="keyword">if</span> child <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                child = TrieNode()</span><br><span class="line">                node.children[letter] = child</span><br><span class="line">            node = child</span><br><span class="line">        node.IsWord = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, word)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        Returns if the word is in the data structure. A word could</span><br><span class="line">        contain the dot character '.' to represent any one letter.</span><br><span class="line">        :type word: str</span><br><span class="line">        :rtype: bool</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.find(self.root, word)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, node, word)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> word == <span class="string">""</span>:</span><br><span class="line">            <span class="keyword">return</span> node.IsWord</span><br><span class="line">        <span class="keyword">if</span> word[<span class="number">0</span>] == <span class="string">"."</span>:</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> node.children:</span><br><span class="line">                <span class="keyword">if</span> self.find(node.children[x], word[<span class="number">1</span>:]):</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            child = node.children.get(word[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">if</span> child:</span><br><span class="line">                <span class="keyword">return</span> self.find(child, word[<span class="number">1</span>:])</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>设计一个包含下面两个操作的数据结构：addWord(word), search(word)<br>addWord(word)会在数据结构中添加一个单词。而search(word)则支持普通的单词查询或是只包含.]]>
    </summary>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Trie" scheme="http://yoursite.com/tags/Trie/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
</feed>
