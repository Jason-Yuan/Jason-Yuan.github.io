<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Code Chemistry]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-06-12T03:51:05.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Jason Yuan]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[228 Middle of Linked List]]></title>
    <link href="http://yoursite.com/2016/06/11/228-Middle-of-Linked-List/"/>
    <id>http://yoursite.com/2016/06/11/228-Middle-of-Linked-List/</id>
    <published>2016-06-11T20:48:12.000Z</published>
    <updated>2016-06-12T03:51:05.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>找链表的中点。</p>
</blockquote>
<p><strong>样例</strong><br>链表 1-&gt;2-&gt;3的中点是2。链表 1-&gt;2的中点是1。</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>快慢指针一起跑，快的到终点，慢的到中点</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span><br><span class="line">Definition of ListNode</span><br><span class="line">class ListNode(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self, val, next=None):</span><br><span class="line">        self.val = val</span><br><span class="line">        self.next = next</span><br><span class="line">"""</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param head: the head of linked list.</span></span><br><span class="line">    <span class="comment"># @return: a middle node of the linked list</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">middleNode</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="comment"># Write your code here</span></span><br><span class="line">        <span class="keyword">if</span> head <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> head.next <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">            </span><br><span class="line">        slow, fast = head, head.next</span><br><span class="line">        <span class="keyword">while</span> fast <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> fast.next <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            slow = slow.next</span><br><span class="line">            fast = fast.next.next</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> slow</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>找链表的中点。</p>
</blockquote>
<p><strong>样例</strong><br>链表 1-&gt;2-&gt;3的中点是2。链表 1-&gt;2的中点是1。</p>
<h3 id="解题]]>
    </summary>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[372 Delete Node in the Middle of the Singly Linked List]]></title>
    <link href="http://yoursite.com/2016/06/11/372-Delete-Node-in-the-Middle-of-the-Singly-Linked-List/"/>
    <id>http://yoursite.com/2016/06/11/372-Delete-Node-in-the-Middle-of-the-Singly-Linked-List/</id>
    <published>2016-06-11T16:18:42.000Z</published>
    <updated>2016-06-11T23:19:32.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个单链表中的一个等待被删除的节点(非表头或表尾)。请在在O(1)时间复杂度删除该链表节点。</p>
</blockquote>
<p><strong>样例</strong><br>给定 1-&gt;2-&gt;3-&gt;4，和节点 3，删除 3 之后，链表应该变为 1-&gt;2-&gt;4。</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>复制要删除的节点下一个节点的值给要删除的节点，把当前节点的next指针指向下一个节点的next指针指向的节点</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span><br><span class="line">Definition of ListNode</span><br><span class="line">class ListNode(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self, val, next=None):</span><br><span class="line">        self.val = val</span><br><span class="line">        self.next = next</span><br><span class="line">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param node: the node in the list should be deleted</span></span><br><span class="line">    <span class="comment"># @return: nothing</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteNode</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="comment"># write your code here</span></span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> node.next <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        node.val = node.next.val</span><br><span class="line">        node.next = node.next.next</span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个单链表中的一个等待被删除的节点(非表头或表尾)。请在在O(1)时间复杂度删除该链表节点。</p>
</blockquote>
<p><strong>样例</strong><br>给定 1-&gt;2-&]]>
    </summary>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[203 Remove Linked List Elements]]></title>
    <link href="http://yoursite.com/2016/06/09/203-Remove-Linked-List-Elements/"/>
    <id>http://yoursite.com/2016/06/09/203-Remove-Linked-List-Elements/</id>
    <published>2016-06-09T23:01:08.000Z</published>
    <updated>2016-06-10T06:01:58.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>删除链表中等于给定值val的所有节点。</p>
</blockquote>
<p><strong>样例</strong><br>给出链表 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;5-&gt;3, 和 val = 3, 你需要返回删除3之后的链表：1-&gt;2-&gt;4-&gt;5。</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>最基础的链表操作，由于第一个节点可能被删除，所以借助Dummy Node</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeElements</span><span class="params">(self, head, val)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type head: ListNode</span><br><span class="line">        :type val: int</span><br><span class="line">        :rtype: ListNode</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> head <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        </span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummy.next = head</span><br><span class="line">        current = dummy</span><br><span class="line">        <span class="keyword">while</span> current.next != <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">if</span> current.next.val == val:</span><br><span class="line">                current.next = current.next.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                current = current.next</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>删除链表中等于给定值val的所有节点。</p>
</blockquote>
<p><strong>样例</strong><br>给出链表 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;5-&gt;]]>
    </summary>
    
      <category term="Dummy Node" scheme="http://yoursite.com/tags/Dummy-Node/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[142 Linked List Cycle II]]></title>
    <link href="http://yoursite.com/2016/06/06/142-Linked-List-Cycle-II/"/>
    <id>http://yoursite.com/2016/06/06/142-Linked-List-Cycle-II/</id>
    <published>2016-06-07T01:26:03.000Z</published>
    <updated>2016-06-07T08:26:52.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个链表，如果链表中存在环，则返回到链表中环的起始节点的值，如果没有环，返回null。</p>
</blockquote>
<p><strong>样例</strong><br>给出 <strong>-21-&gt;10-&gt;4-&gt;5, tail connects to node index 1</strong>，返回<strong>10</strong></p>
<h3 id="解题思路">解题思路</h3><ul>
<li>首先跟Linked List Cycle一样，还是快慢指针，从头开始走，如果没有相遇快指针就走到尾了，则说明没有环，返回NULL</li>
<li>如果相遇了，把慢指针<strong>重新放到</strong>开头，快慢指针一起<strong>一步一步走</strong>再次相遇即是环的入口，不要问我为什么…想知道的可以去看一下数学证明</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detectCycle</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type head: ListNode</span><br><span class="line">        :rtype: ListNode</span><br><span class="line">        """</span></span><br><span class="line">        slow, fast = head, head</span><br><span class="line">        <span class="keyword">while</span> fast <span class="keyword">and</span> fast.next:</span><br><span class="line">            slow = slow.next</span><br><span class="line">            fast = fast.next.next</span><br><span class="line">            <span class="keyword">if</span> slow == fast:</span><br><span class="line">                slow = head</span><br><span class="line">                <span class="keyword">while</span> slow != fast:</span><br><span class="line">                    slow = slow.next</span><br><span class="line">                    fast = fast.next</span><br><span class="line">                <span class="keyword">return</span> slow</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个链表，如果链表中存在环，则返回到链表中环的起始节点的值，如果没有环，返回null。</p>
</blockquote>
<p><strong>样例</strong><br>给出 <strong>-21-]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="Two Pointers" scheme="http://yoursite.com/tags/Two-Pointers/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[141 Linked List Cycle]]></title>
    <link href="http://yoursite.com/2016/06/06/141-Linked-List-Cycle/"/>
    <id>http://yoursite.com/2016/06/06/141-Linked-List-Cycle/</id>
    <published>2016-06-07T01:13:33.000Z</published>
    <updated>2016-06-07T08:14:17.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个链表，判断它是否有环。</p>
</blockquote>
<p><strong>样例</strong><br>给出 <strong>-21-&gt;10-&gt;4-&gt;5, tail connects to node index 1</strong>，返回 true</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>快慢指针，都从起点出发， 慢指针一次一步，快指针一次两步，如果有环则一定存在某时刻快慢指针相交</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type head: ListNode</span><br><span class="line">        :rtype: bool</span><br><span class="line">        """</span></span><br><span class="line">        slow, fast = head, head</span><br><span class="line">        <span class="keyword">while</span> fast <span class="keyword">and</span> fast.next:</span><br><span class="line">            slow = slow.next</span><br><span class="line">            fast = fast.next.next</span><br><span class="line">            <span class="keyword">if</span> slow == fast:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个链表，判断它是否有环。</p>
</blockquote>
<p><strong>样例</strong><br>给出 <strong>-21-&gt;10-&gt;4-&gt;5, tail conne]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="Two Pointers" scheme="http://yoursite.com/tags/Two-Pointers/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[92 Reverse Linked List II]]></title>
    <link href="http://yoursite.com/2016/06/06/92-Reverse-Linked-List-II/"/>
    <id>http://yoursite.com/2016/06/06/92-Reverse-Linked-List-II/</id>
    <published>2016-06-07T01:03:37.000Z</published>
    <updated>2016-06-07T08:05:07.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>翻转链表中第m个节点到第n个节点的部分<br><strong>注意事项</strong><br>m，n满足1 ≤ m ≤ n ≤ 链表长度</p>
</blockquote>
<p><strong>样例</strong><br>给出链表<strong>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;null</strong>， m = 2 和n = 4，返回<strong>1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;null</strong></p>
<h3 id="解题思路">解题思路</h3><ul>
<li>同Reverse Linked List相似，首先找到四个关键的preM, M, N, postN</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseBetween</span><span class="params">(self, head, m, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type head: ListNode</span><br><span class="line">        :type m: int</span><br><span class="line">        :type n: int</span><br><span class="line">        :rtype: ListNode</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> m == n:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummy.next = head</span><br><span class="line">        prevmNode, nNode = dummy, dummy</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m - <span class="number">1</span>):</span><br><span class="line">            prevmNode = prevmNode.next</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            nNode = nNode.next</span><br><span class="line">            </span><br><span class="line">        mNode = prevmNode.next</span><br><span class="line">        postnNode = nNode.next</span><br><span class="line">        prev = postnNode</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(n - m + <span class="number">1</span>):</span><br><span class="line">            temp = mNode.next</span><br><span class="line">            mNode.next = prev</span><br><span class="line">            prev = mNode</span><br><span class="line">            mNode = temp</span><br><span class="line">        prevmNode.next = nNode</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>翻转链表中第m个节点到第n个节点的部分<br><strong>注意事项</strong><br>m，n满足1 ≤ m ≤ n ≤ 链表长度</p>
</blockquote>
<p><strong>样例</st]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="Two Pointers" scheme="http://yoursite.com/tags/Two-Pointers/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[206 Reverse Linked List]]></title>
    <link href="http://yoursite.com/2016/06/06/206-Reverse-Linked-List/"/>
    <id>http://yoursite.com/2016/06/06/206-Reverse-Linked-List/</id>
    <published>2016-06-07T00:57:32.000Z</published>
    <updated>2016-06-07T07:59:38.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>翻转一个链表</p>
</blockquote>
<p><strong>样例</strong><br>给出一个链表<strong>1-&gt;2-&gt;3-&gt;null</strong>，这个翻转后的链表为<strong>3-&gt;2-&gt;1-&gt;null</strong></p>
<h3 id="解题思路">解题思路</h3><ul>
<li>基础链表问题，同向双指针<ul>
<li>temp = head.next //让temp记住head.next指向的节点</li>
<li>head.next = prev //剪短head与原来head.next之间的关系，将head.next指向prev</li>
<li>prev指向head，即向前移动一步</li>
<li>head指向temp，也是向前移动一步</li>
</ul>
</li>
<li>方法二 Recursion</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一 ：Non-recursion</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseList</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type head: ListNode</span><br><span class="line">        :rtype: ListNode</span><br><span class="line">        """</span></span><br><span class="line">        prev = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            temp = head.next</span><br><span class="line">            head.next = prev</span><br><span class="line">            prev = head</span><br><span class="line">            head = temp</span><br><span class="line">        <span class="keyword">return</span> prev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二 ：Recursion</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseList</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type head: ListNode</span><br><span class="line">        :rtype: ListNode</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> head <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> head.next <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        next = self.reverseList(head.next)</span><br><span class="line">        head.next.next = head</span><br><span class="line">        head.next = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">return</span> next</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>翻转一个链表</p>
</blockquote>
<p><strong>样例</strong><br>给出一个链表<strong>1-&gt;2-&gt;3-&gt;null</strong>，这个翻转后的链表]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="Recursion" scheme="http://yoursite.com/tags/Recursion/"/>
    
      <category term="Two Pointers" scheme="http://yoursite.com/tags/Two-Pointers/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[23 Merge k Sorted Lists]]></title>
    <link href="http://yoursite.com/2016/06/05/23-Merge-k-Sorted-Lists/"/>
    <id>http://yoursite.com/2016/06/05/23-Merge-k-Sorted-Lists/</id>
    <published>2016-06-06T01:29:15.000Z</published>
    <updated>2016-06-06T08:30:14.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>合并k个排序链表，并且返回合并后的排序链表。尝试分析和描述其复杂度。</p>
</blockquote>
<p><strong>样例</strong><br>给出3个排序链表<strong>[2-&gt;4-&gt;null, null, -1-&gt;null]</strong>，返回 <strong>-1-&gt;2-&gt;4-&gt;null</strong></p>
<h3 id="解题思路">解题思路</h3><ul>
<li>方法一：两两合并，最终合并成一个linked list，返回结果<ul>
<li>相当于8-&gt;4-&gt;2-&gt;1, 一共logk层，每层都是n个节点(n表示k个链表的节点总和)，所以时间复杂度是O(nlogk)</li>
<li>实现上可以采用递归，divide and conquer的思想把合并k个链表分成两个合并k/2个链表的任务，一直划分，知道任务中只剩一个链表或者两个链表。</li>
<li>也可以采用非递归的方式</li>
</ul>
</li>
<li>方法二：维护一个k个大小的min heap<ul>
<li>每次取出最小的数O(1)，并且插入一个新的数O(logk)，一共操作n次，所以时间复杂度是O(nlogk)</li>
<li>如果不使用min heap，而是通过for循环每次找到最小，一次操作是O(k)，所以总的时间复杂度是O(nk)</li>
</ul>
</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一 递归</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeKLists</span><span class="params">(self, lists)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type lists: List[ListNode]</span><br><span class="line">        :rtype: ListNode</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> lists == [] <span class="keyword">or</span> lists == [[]]:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">return</span> self.helper(lists)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, lists)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(lists) &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> lists[<span class="number">0</span>]</span><br><span class="line">        left = self.helper(lists[:len(lists) / <span class="number">2</span>])</span><br><span class="line">        right = self.helper(lists[len(lists) / <span class="number">2</span>:])</span><br><span class="line">        <span class="keyword">return</span> self.merge(left, right)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, head1, head2)</span>:</span></span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        tail = dummy</span><br><span class="line">        <span class="keyword">while</span> head1 <span class="keyword">and</span> head2:</span><br><span class="line">            <span class="keyword">if</span> head1.val &lt; head2.val:</span><br><span class="line">                tail.next = head1</span><br><span class="line">                head1 = head1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tail.next = head2</span><br><span class="line">                head2 = head2.next</span><br><span class="line">            tail = tail.next</span><br><span class="line">        <span class="keyword">if</span> head1:</span><br><span class="line">            tail.next = head1</span><br><span class="line">        <span class="keyword">if</span> head2:</span><br><span class="line">            tail.next = head2</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二 非递归</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeKLists</span><span class="params">(self, lists)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type lists: List[ListNode]</span><br><span class="line">        :rtype: ListNode</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> lists:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> len(lists) &gt; <span class="number">1</span>:</span><br><span class="line">            new_lists = []</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(lists) - <span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">                merge_list = self.merge(lists[i], lists[i + <span class="number">1</span>])</span><br><span class="line">                new_lists.append(merge_list)</span><br><span class="line">            <span class="keyword">if</span> len(lists) % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">                new_lists.append(lists[len(lists) - <span class="number">1</span>])</span><br><span class="line">                </span><br><span class="line">            lists = new_lists</span><br><span class="line">        <span class="keyword">return</span> lists[<span class="number">0</span>]</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, head1, head2)</span>:</span></span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        tail = dummy</span><br><span class="line">        <span class="keyword">while</span> head1 <span class="keyword">and</span> head2:</span><br><span class="line">            <span class="keyword">if</span> head1.val &lt; head2.val:</span><br><span class="line">                tail.next = head1</span><br><span class="line">                head1 = head1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tail.next = head2</span><br><span class="line">                head2 = head2.next</span><br><span class="line">            tail = tail.next</span><br><span class="line">        <span class="keyword">if</span> head1:</span><br><span class="line">            tail.next = head1</span><br><span class="line">        <span class="keyword">if</span> head2:</span><br><span class="line">            tail.next = head2</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 方法三 k个数的min heap</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeKLists</span><span class="params">(self, lists)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type lists: List[ListNode]</span><br><span class="line">        :rtype: ListNode</span><br><span class="line">        """</span></span><br><span class="line">        heap = []</span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> lists:</span><br><span class="line">            <span class="keyword">if</span> node: </span><br><span class="line">                heap.append((node.val, node))</span><br><span class="line">        heapq.heapify(heap)</span><br><span class="line">        head = ListNode(<span class="number">0</span>)</span><br><span class="line">        curr = head</span><br><span class="line">        <span class="keyword">while</span> heap:</span><br><span class="line">            pop = heapq.heappop(heap)</span><br><span class="line">            curr.next = ListNode(pop[<span class="number">0</span>])</span><br><span class="line">            curr = curr.next</span><br><span class="line">            <span class="keyword">if</span> pop[<span class="number">1</span>].next: </span><br><span class="line">                heapq.heappush(heap, (pop[<span class="number">1</span>].next.val, pop[<span class="number">1</span>].next))</span><br><span class="line">        <span class="keyword">return</span> head.next</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>合并k个排序链表，并且返回合并后的排序链表。尝试分析和描述其复杂度。</p>
</blockquote>
<p><strong>样例</strong><br>给出3个排序链表<strong>[2-&gt;4-&]]>
    </summary>
    
      <category term="Divide and Conquer" scheme="http://yoursite.com/tags/Divide-and-Conquer/"/>
    
      <category term="Heap" scheme="http://yoursite.com/tags/Heap/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="Recursion" scheme="http://yoursite.com/tags/Recursion/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[109 Convert Sorted List to Binary Search Tree]]></title>
    <link href="http://yoursite.com/2016/06/05/109-Convert-Sorted-List-to-Binary-Search-Tree/"/>
    <id>http://yoursite.com/2016/06/05/109-Convert-Sorted-List-to-Binary-Search-Tree/</id>
    <published>2016-06-05T20:38:38.000Z</published>
    <updated>2016-06-06T03:40:00.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出一个所有元素以升序排序的单链表，将它转换成一棵高度平衡的二分查找树</p>
</blockquote>
<h3 id="解题思路">解题思路</h3><ul>
<li>跟二叉树相关 - 分治法，递归求解</li>
<li>链表问题，有序链表，如果将节点中的所有值都存入数组，本题目可以转化为Convert Sorted Array to Binary Search Tree，时间复杂度是O(n)，前序构建二叉树</li>
<li>数组访问任意一个元素时间复杂度是O(1)，而链表不行。如果在链表上每次查找中点，总时间复杂度O(nlogn)<ul>
<li>构建树的层数 - logn</li>
<li>每一次找中点 - O(n)</li>
</ul>
</li>
<li>另外一种优化O(nlogn) =&gt; O(n)，因为对于BST来说，中序遍历的结果就是一个从小到大的有序序列。所以尝试通过遍历一个有序的linked list，利用类似中序遍历的方式构建BST。从下到上构建这棵树，用一个current变量记录链表的当前节点。sortedListToBSTHelper的定义是：将current指针开头的，从start到end的linked list转变为BST，每次current指针指向下一个node。</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortedListToBST</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type head: ListNode</span><br><span class="line">        :rtype: TreeNode</span><br><span class="line">        """</span></span><br><span class="line">        self.current = head</span><br><span class="line">        size = self.getListLength(head)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.sortedListToBSTHelper(size)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getListLength</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        size = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            size += <span class="number">1</span></span><br><span class="line">            head = head.next</span><br><span class="line">        <span class="keyword">return</span> size</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortedListToBSTHelper</span><span class="params">(self, size)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> size &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        left = self.sortedListToBSTHelper(size / <span class="number">2</span>)</span><br><span class="line">        root = TreeNode(self.current.val)</span><br><span class="line">        self.current = self.current.next</span><br><span class="line">        right = self.sortedListToBSTHelper(size - <span class="number">1</span> - size / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        root.left = left</span><br><span class="line">        root.right = right</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出一个所有元素以升序排序的单链表，将它转换成一棵高度平衡的二分查找树</p>
</blockquote>
<h3 id="解题思路">解题思路</h3><ul>
<li>跟二叉树相关 - 分治法，递归求解</]]>
    </summary>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[108 Convert Sorted Array to Binary Search Tree]]></title>
    <link href="http://yoursite.com/2016/06/05/108-Convert-Sorted-Array-to-Binary-Search-Tree/"/>
    <id>http://yoursite.com/2016/06/05/108-Convert-Sorted-Array-to-Binary-Search-Tree/</id>
    <published>2016-06-05T20:07:46.000Z</published>
    <updated>2016-06-06T03:09:04.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给一个排序数组（从小到大），将其转换为一棵高度最小的排序二叉树。</p>
</blockquote>
<p><strong>样例</strong><br>给出数组 [1,2,3,4,5,6,7], 返回<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     <span class="number">4</span></span><br><span class="line">   /   \</span><br><span class="line">  <span class="number">2</span>     <span class="number">6</span></span><br><span class="line"> / \    / \</span><br><span class="line"><span class="number">1</span>   <span class="number">3</span>  <span class="number">5</span>   <span class="number">7</span></span><br></pre></td></tr></table></figure></p>
<h3 id="解题思路">解题思路</h3><ul>
<li>根据排序数组构建查找二叉树，分治的思想，每次向下递归构建左右子树</li>
<li>时间复杂度O(n) 可以简单想每个元素被访问到了几次</li>
<li>空间复杂度O(logn) 递归的栈的大小</li>
<li>相似题目Convert Sorted List to Binary Search Tree</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortedArrayToBST</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type nums: List[int]</span><br><span class="line">        :rtype: TreeNode</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> nums:</span><br><span class="line">            <span class="keyword">return</span> self.buildTree(nums, <span class="number">0</span>, len(nums) - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">buildTree</span><span class="params">(self, nums, start, end)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> start &gt; end:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        root = TreeNode(nums[(start + end) / <span class="number">2</span>])</span><br><span class="line">        root.left = self.buildTree(nums, start, (start + end) / <span class="number">2</span> - <span class="number">1</span>)</span><br><span class="line">        root.right = self.buildTree(nums, (start + end) / <span class="number">2</span> + <span class="number">1</span>, end)</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给一个排序数组（从小到大），将其转换为一棵高度最小的排序二叉树。</p>
</blockquote>
<p><strong>样例</strong><br>给出数组 [1,2,3,4,5,6,7], 返回<br>]]>
    </summary>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Binary Search Tree" scheme="http://yoursite.com/tags/Binary-Search-Tree/"/>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[82 Remove Duplicates from Sorted List II]]></title>
    <link href="http://yoursite.com/2016/06/05/82-Remove-Duplicates-from-Sorted-List-II/"/>
    <id>http://yoursite.com/2016/06/05/82-Remove-Duplicates-from-Sorted-List-II/</id>
    <published>2016-06-05T19:16:25.000Z</published>
    <updated>2016-06-06T02:17:04.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个排序链表，删除所有重复的元素只留下原链表中没有重复的元素。</p>
</blockquote>
<p><strong>样例</strong><br>给出 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5-&gt;null，返回 1-&gt;2-&gt;5-&gt;null<br>给出 1-&gt;1-&gt;1-&gt;2-&gt;3-&gt;null，返回 2-&gt;3-&gt;null</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>基础链表操作，与Remove Duplicates from Sorted List I的区别是如果有重复，重复的节点全部删除</li>
<li>因为头节点有被删除的可能，所以使用dummy node</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteDuplicates</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type head: ListNode</span><br><span class="line">        :rtype: ListNode</span><br><span class="line">        """</span></span><br><span class="line">        DummyNode = ListNode(<span class="number">0</span>)</span><br><span class="line">        DummyNode.next = head</span><br><span class="line">        </span><br><span class="line">        current = DummyNode</span><br><span class="line">        <span class="keyword">while</span> current.next != <span class="keyword">None</span> <span class="keyword">and</span> current.next.next != <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">if</span> current.next.val == current.next.next.val:</span><br><span class="line">                temp = current.next.val</span><br><span class="line">                <span class="keyword">while</span> current.next != <span class="keyword">None</span> <span class="keyword">and</span> current.next.val == temp:</span><br><span class="line">                    current.next = current.next.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                current = current.next</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> DummyNode.next</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个排序链表，删除所有重复的元素只留下原链表中没有重复的元素。</p>
</blockquote>
<p><strong>样例</strong><br>给出 1-&gt;2-&gt;3-&gt;3-&gt;]]>
    </summary>
    
      <category term="Dummy Node" scheme="http://yoursite.com/tags/Dummy-Node/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[83 Remove Duplicates from Sorted List]]></title>
    <link href="http://yoursite.com/2016/06/05/83-Remove-Duplicates-from-Sorted-List/"/>
    <id>http://yoursite.com/2016/06/05/83-Remove-Duplicates-from-Sorted-List/</id>
    <published>2016-06-05T18:05:34.000Z</published>
    <updated>2016-06-06T01:06:13.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个排序链表，删除所有重复的元素每个元素只留下一个。</p>
</blockquote>
<p><strong>样例</strong><br>给出 1-&gt;1-&gt;2-&gt;null，返回 1-&gt;2-&gt;null<br>给出 1-&gt;1-&gt;2-&gt;3-&gt;3-&gt;null，返回 1-&gt;2-&gt;3-&gt;null</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>基础链表操作，遍历一遍去重</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteDuplicates</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type head: ListNode</span><br><span class="line">        :rtype: ListNode</span><br><span class="line">        """</span></span><br><span class="line">        res = head</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">while</span> head.next != <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">if</span> head.val == head.next.val:</span><br><span class="line">                head.next = head.next.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                head = head.next</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个排序链表，删除所有重复的元素每个元素只留下一个。</p>
</blockquote>
<p><strong>样例</strong><br>给出 1-&gt;1-&gt;2-&gt;null，返回 1-&]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[86 Partition List]]></title>
    <link href="http://yoursite.com/2016/06/05/86-Partition-List/"/>
    <id>http://yoursite.com/2016/06/05/86-Partition-List/</id>
    <published>2016-06-05T17:31:23.000Z</published>
    <updated>2016-06-06T00:32:12.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个单链表和数值x，划分链表使得所有小于x的节点排在大于等于x的节点之前。</p>
</blockquote>
<p>你应该保留两部分内链表节点原有的相对顺序。</p>
<p><strong>样例</strong><br>给定链表 <strong>1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2-&gt;null</strong>，并且 x=3<br>返回<strong> 1-&gt;2-&gt;2-&gt;4-&gt;3-&gt;5-&gt;null
</strong></p>
<h3 id="解题思路">解题思路</h3><ul>
<li>链表问题 - 建立两个Dummy Node</li>
<li>顺序遍历整条链表，小于的和大于等于的分别连上不同的dummy node，最后把两串连一起</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(self, head, x)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type head: ListNode</span><br><span class="line">        :type x: int</span><br><span class="line">        :rtype: ListNode</span><br><span class="line">        """</span></span><br><span class="line">        leftDummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        rightDummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        left, right = leftDummy, rightDummy</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> head != <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">if</span> head.val &lt; x:</span><br><span class="line">                left.next = head</span><br><span class="line">                left = left.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right.next = ListNode(head.val)</span><br><span class="line">                right = right.next</span><br><span class="line">            head = head.next</span><br><span class="line">            </span><br><span class="line">        left.next = rightDummy.next</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> leftDummy.next</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个单链表和数值x，划分链表使得所有小于x的节点排在大于等于x的节点之前。</p>
</blockquote>
<p>你应该保留两部分内链表节点原有的相对顺序。</p>
<p><strong>样例</str]]>
    </summary>
    
      <category term="Dummy Node" scheme="http://yoursite.com/tags/Dummy-Node/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[19 Remove Nth Node From End of List]]></title>
    <link href="http://yoursite.com/2016/06/05/19-Remove-Nth-Node-From-End-of-List/"/>
    <id>http://yoursite.com/2016/06/05/19-Remove-Nth-Node-From-End-of-List/</id>
    <published>2016-06-05T17:06:04.000Z</published>
    <updated>2016-06-06T00:06:47.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个链表，删除链表中倒数第n个节点，返回链表的头节点。<br><strong>注意事项</strong><br>链表中的节点个数大于等于n</p>
</blockquote>
<p><strong>样例</strong><br>给出链表<strong>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;null
</strong>和 n = 2.<br>删除倒数第二个节点之后，这个链表将变成<strong>1-&gt;2-&gt;3-&gt;5-&gt;null.
</strong></p>
<h3 id="解题思路">解题思路</h3><ul>
<li>链表问题 - 快慢指针解决(Two Pointers)</li>
<li>块指针先走n步，然后快慢指针一起走，快指针走到尾，慢指针距离尾部差n个节点</li>
<li>删除节点 <code>node.next = node.next.next</code></li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeNthFromEnd</span><span class="params">(self, head, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type head: ListNode</span><br><span class="line">        :type n: int</span><br><span class="line">        :rtype: ListNode</span><br><span class="line">        """</span></span><br><span class="line">        slow, fast = head, head</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            fast = fast.next</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> fast:</span><br><span class="line">            head = slow.next</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">while</span> fast.next != <span class="keyword">None</span>:</span><br><span class="line">                fast = fast.next</span><br><span class="line">                slow = slow.next</span><br><span class="line">            slow.next = slow.next.next</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个链表，删除链表中倒数第n个节点，返回链表的头节点。<br><strong>注意事项</strong><br>链表中的节点个数大于等于n</p>
</blockquote>
<p><strong>样例</]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="Two Pointers" scheme="http://yoursite.com/tags/Two-Pointers/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[44 Wildcard Matching]]></title>
    <link href="http://yoursite.com/2016/06/04/44-Wildcard-Matching/"/>
    <id>http://yoursite.com/2016/06/04/44-Wildcard-Matching/</id>
    <published>2016-06-05T04:39:44.000Z</published>
    <updated>2016-06-05T22:38:44.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>判断两个可能包含通配符“？”和“*”的字符串是否匹配。匹配规则如下：</p>
<p>‘?’ 可以匹配任何单个字符。<br>\’*’ 可以匹配任意字符串（包括空字符串）。</p>
<p>两个串完全匹配才算匹配成功。</p>
<p>函数接口如下:<br>bool isMatch(const char <em>s, const char </em>p)</p>
</blockquote>
<p>一些例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">isMatch(<span class="string">"aa"</span>,<span class="string">"a"</span>) → false</span><br><span class="line">isMatch(<span class="string">"aa"</span>,<span class="string">"aa"</span>) → true</span><br><span class="line">isMatch(<span class="string">"aaa"</span>,<span class="string">"aa"</span>) → false</span><br><span class="line">isMatch(<span class="string">"aa"</span>, <span class="string">"*"</span>) → true</span><br><span class="line">isMatch(<span class="string">"aa"</span>, <span class="string">"a*"</span>) → true</span><br><span class="line">isMatch(<span class="string">"ab"</span>, <span class="string">"?*"</span>) → true</span><br><span class="line">isMatch(<span class="string">"aab"</span>, <span class="string">"c*a*b"</span>) → false</span><br></pre></td></tr></table></figure></p>
<h3 id="解题思路">解题思路</h3><ul>
<li>动态规划，内存需要优化，滚动数组, 10000 * 10000 转化成 2 * 10000</li>
<li>状态cache[i][j]表示S的前i和T的前j是否match</li>
<li>状态转移<ul>
<li>如果PD[i-1][j]==true或者PD[i][j-1]==true，并且s[i]==’*‘或者p[j]==’*‘时PD[i][j]==true；</li>
<li>如果PD[i-1][j-1]==true时，s[i]与p[j]匹配，则PD[i][j]==true。</li>
<li>换句话说，一个格子的True或者False只与左侧，左上和上方的格子有关，如下图</li>
</ul>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/424375-0ac978078617a7b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Screenshot at Jun 05 04-37-09.png"></p>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatch</span><span class="params">(self, s, p)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type s: str</span><br><span class="line">        :type p: str</span><br><span class="line">        :rtype: bool</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> len(p) - p.count(<span class="string">'*'</span>) &gt; len(s):   <span class="comment">#avoid TLE(Time Limited Exceeded)</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        cache = [[<span class="keyword">False</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s) + <span class="number">1</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>)]</span><br><span class="line">        cache[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, len(p) + <span class="number">1</span>):</span><br><span class="line">            cache[j % <span class="number">2</span>][<span class="number">0</span>] = cache[(j - <span class="number">1</span>) % <span class="number">2</span>][<span class="number">0</span>] <span class="keyword">and</span> p[j - <span class="number">1</span>] == <span class="string">"*"</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(s) + <span class="number">1</span>):</span><br><span class="line">                cache[j % <span class="number">2</span>][i] = <span class="keyword">False</span></span><br><span class="line">                <span class="keyword">if</span> s[i - <span class="number">1</span>] == p[j - <span class="number">1</span>] <span class="keyword">or</span> s[i - <span class="number">1</span>] == <span class="string">"?"</span> <span class="keyword">or</span> p[j - <span class="number">1</span>] == <span class="string">"?"</span>:</span><br><span class="line">                    cache[j % <span class="number">2</span>][i] = cache[(j - <span class="number">1</span>) % <span class="number">2</span>][i - <span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> s[i - <span class="number">1</span>] == <span class="string">"*"</span> <span class="keyword">or</span> p[j - <span class="number">1</span>] == <span class="string">"*"</span>:</span><br><span class="line">                    cache[j % <span class="number">2</span>][i] = cache[(j - <span class="number">1</span>) % <span class="number">2</span>][i] <span class="keyword">or</span> cache[j % <span class="number">2</span>][i - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> cache[len(p) % <span class="number">2</span>][len(s)]</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>判断两个可能包含通配符“？”和“*”的字符串是否匹配。匹配规则如下：</p>
<p>‘?’ 可以匹配任何单个字符。<br>\’*’ 可以匹配任意字符串（包括空字符串）。</p>
<p>两个串完全匹配才算匹配成功]]>
    </summary>
    
      <category term="Dynamic Programing" scheme="http://yoursite.com/tags/Dynamic-Programing/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Sequence DP" scheme="http://yoursite.com/tags/Sequence-DP/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[91 Decode Ways]]></title>
    <link href="http://yoursite.com/2016/06/04/91-Decode-Ways/"/>
    <id>http://yoursite.com/2016/06/04/91-Decode-Ways/</id>
    <published>2016-06-05T02:09:18.000Z</published>
    <updated>2016-06-05T09:10:08.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>有一个消息包含A-Z通过以下规则编码<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">'A' -&gt; 1</span><br><span class="line">'B' -&gt; 2</span><br><span class="line">...</span><br><span class="line">'Z' -&gt; 26</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>现在给你一个加密过后的消息，问有几种解码的方式</p>
<p><strong>样例</strong><br>给你的消息为12，有两种方式解码 AB(12) 或者 L(12). 所以返回 2</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>求有几种解码方式而不是具体每种解码方式是什么 - 动态规划 - Sequence DP</li>
<li>cache[i]表示以第i个字符结尾的字符串有几种解码方式</li>
<li>初始化<ul>
<li>cache[0] = 1 空字符串认为有是一种解码方式</li>
<li>cache[1] = 1 一个字符肯定只有一种解法方式 (最开始记得判断第一个字符是0返回0种解码方式)</li>
</ul>
</li>
<li>状态转移方程，cache[i] 要考虑和上一位组成的数字具体是多少<ul>
<li>如果是00，30，40，50，60，70，80，90 =&gt; cache[i] = 0 (无解) <strong>s[i - 1]如果是0要仔细考虑</strong></li>
<li>如果是01~09，比如，1501 =&gt; 150有几种解(因为0单独不会有解)</li>
<li>如果是10~26其中不包括10，20的话，则有两种情况，比如1512 =&gt; 15有几种解(L) + 151有几种解(B)</li>
<li>如果等于10或者20，比如，1510 =&gt; 15有几种解(因为0单独不会有解, <strong>J(10)/T(20)</strong>)</li>
<li>如果大于26，比如，1527 =&gt; 152有几种解</li>
</ul>
</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numDecodings</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type s: str</span><br><span class="line">        :rtype: int</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s <span class="keyword">or</span> s[<span class="number">0</span>] == <span class="string">"0"</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            </span><br><span class="line">        cache = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s) + <span class="number">1</span>)]</span><br><span class="line">        cache[<span class="number">0</span>] = cache[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, len(s) + <span class="number">1</span>):</span><br><span class="line">            num = int(s[i-<span class="number">2</span>:i])</span><br><span class="line">            <span class="keyword">if</span> num == <span class="number">0</span> <span class="keyword">or</span> (s[i - <span class="number">1</span>] == <span class="string">"0"</span> <span class="keyword">and</span> num &gt; <span class="number">26</span>): <span class="comment"># 100 or 130</span></span><br><span class="line">                cache[i] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">elif</span> num &lt; <span class="number">10</span>: <span class="comment"># 109</span></span><br><span class="line">                cache[i] = cache[i - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">elif</span> num &lt; <span class="number">27</span>: </span><br><span class="line">                <span class="keyword">if</span> num == <span class="number">10</span> <span class="keyword">or</span> num == <span class="number">20</span>: <span class="comment"># 110 or 120</span></span><br><span class="line">                    cache[i] = cache[i - <span class="number">2</span>]</span><br><span class="line">                <span class="keyword">else</span>: <span class="comment"># 117, 126 ...</span></span><br><span class="line">                    cache[i] = cache[i - <span class="number">1</span>] + cache[i - <span class="number">2</span>]</span><br><span class="line">            <span class="keyword">else</span>: <span class="comment"># 127, 178</span></span><br><span class="line">                cache[i] = cache[i - <span class="number">1</span>]</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> cache[len(s)]</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>有一个消息包含A-Z通过以下规则编码<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</]]>
    </summary>
    
      <category term="Dynamic Programming" scheme="http://yoursite.com/tags/Dynamic-Programming/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Sequence DP" scheme="http://yoursite.com/tags/Sequence-DP/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[115 Distinct Subsequence]]></title>
    <link href="http://yoursite.com/2016/06/04/115-Distinct-Subsequence/"/>
    <id>http://yoursite.com/2016/06/04/115-Distinct-Subsequence/</id>
    <published>2016-06-05T00:17:23.000Z</published>
    <updated>2016-06-05T07:30:16.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出字符串S和字符串T，计算S的不同的子序列中T出现的个数。<br>子序列字符串是原始字符串通过删除一些(或零个)产生的一个新的字符串，并且对剩下的字符的相对位置没有影响。(比如，<strong>“ACE”</strong>是<strong>“ABCDE”</strong>的子序列字符串,而<strong>“AEC”</strong>不是)。 </p>
</blockquote>
<p><strong>样例</strong><br>给出S = <strong>“rabbbit”</strong>, T =<strong> “rabbit”</strong><br>返回 3</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>典型动态规划 - Two Sequence DP</li>
<li>状态cache[i][j]表示 S前i位的不同子序列中有几个和T的前j位相同</li>
<li>初始化<ul>
<li>cache[0][0] = 1 T和S都是空串，空串在空串中出现1次</li>
<li>cache[0][j] = 1 T是空串，S只有一种子序列(空串)可以匹配</li>
<li>cache[i][0] = 0 S是空串，T不是空串，S没有子序列可以匹配</li>
</ul>
</li>
<li><p>状态转移方程</p>
<ul>
<li>当S[j] != T[i]的时候， cache[i][j] = cache[i][j - 1] //<strong>“ABCD”匹配”AC”的方式至少有”ABC”匹配”AC”那么多种</strong></li>
<li>当S[j] == T[i]的时候，还要加上cache[i - 1][j - 1]那么多种匹配方式</li>
</ul>
</li>
<li><p>如果状态转移方程比较难想，可以先画图找规律</p>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/424375-d5fc78358fd3a564.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Screenshot at Jun 05 00-07-26.png"></p>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numDistinct</span><span class="params">(self, s, t)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type s: str</span><br><span class="line">        :type t: str</span><br><span class="line">        :rtype: int</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> t:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        cache = [[<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> range(len(s) + <span class="number">1</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(t) + <span class="number">1</span>)]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(s) + <span class="number">1</span>):</span><br><span class="line">            cache[<span class="number">0</span>][j] = <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(t) + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, len(s) + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> s[j - <span class="number">1</span>] == t[i - <span class="number">1</span>]:</span><br><span class="line">                    cache[i][j] = cache[i][j - <span class="number">1</span>] + cache[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    cache[i][j] = cache[i][j - <span class="number">1</span>]</span><br><span class="line">                    </span><br><span class="line">        <span class="keyword">return</span> cache[len(t)][len(s)]</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出字符串S和字符串T，计算S的不同的子序列中T出现的个数。<br>子序列字符串是原始字符串通过删除一些(或零个)产生的一个新的字符串，并且对剩下的字符的相对位置没有影响。(比如，<strong>“ACE”</]]>
    </summary>
    
      <category term="Dynamic Programing" scheme="http://yoursite.com/tags/Dynamic-Programing/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Two Sequence DP" scheme="http://yoursite.com/tags/Two-Sequence-DP/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[97 Interleaving String]]></title>
    <link href="http://yoursite.com/2016/06/04/97-Interleaving-String/"/>
    <id>http://yoursite.com/2016/06/04/97-Interleaving-String/</id>
    <published>2016-06-04T20:29:31.000Z</published>
    <updated>2016-06-05T03:30:28.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出三个字符串:s1、s2、s3，判断s3是否由s1和s2交叉构成。</p>
</blockquote>
<p><strong>样例</strong><br>比如 s1 =<strong> “aabcc”</strong> s2 =<strong> “dbbca”</strong></p>
<ul>
<li>当 s3 = <strong>“aadbbcbcac”</strong>，返回  true.</li>
<li>当 s3 = <strong>“aadbbbaccc”</strong>， 返回 false.</li>
</ul>
<h3 id="解题思路">解题思路</h3><ul>
<li>典型序列型动态规划，Two Sequence DP</li>
<li>状态cache[i][j]表示，s1的前i个字符和s2的前j个字符是否能交叉构成s3的前i+j个字符</li>
<li>初始化：<ul>
<li>cache[0][0] = True 因为两个空字符串可以组成空字符串</li>
<li>边界情况是一个字符串为空，初始化只需判断另一个字符串和目标字符串前x为是否相等</li>
<li>递推关系 cache[i][j] = (s1[i] == s3[i+j] and cache[i-1][j]) or (s2[j] == s3[i+j] and cache[i][j-1])</li>
</ul>
</li>
<li>最后说一个小小的简化程序的trick<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> something &gt; <span class="number">0</span> <span class="keyword">and</span> others &lt; <span class="number">0</span>:</span><br><span class="line">    x = <span class="keyword">True</span></span><br><span class="line"><span class="comment"># 直接可以写成</span></span><br><span class="line">x = something &gt; <span class="number">0</span> <span class="keyword">and</span> others &lt; <span class="number">0</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isInterleave</span><span class="params">(self, s1, s2, s3)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type s1: str</span><br><span class="line">        :type s2: str</span><br><span class="line">        :type s3: str</span><br><span class="line">        :rtype: bool</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> len(s3) != len(s1) + len(s2):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            </span><br><span class="line">        cache = [[<span class="keyword">False</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s1) + <span class="number">1</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> range(len(s2) + <span class="number">1</span>)]</span><br><span class="line">        </span><br><span class="line">        cache[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(s1) + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> cache[<span class="number">0</span>][i -<span class="number">1</span>] <span class="keyword">and</span> s1[i - <span class="number">1</span>] == s3[i - <span class="number">1</span>]:</span><br><span class="line">                cache[<span class="number">0</span>][i] = <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">                </span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, len(s2) + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> cache[j - <span class="number">1</span>][<span class="number">0</span>] <span class="keyword">and</span> s2[j - <span class="number">1</span>] == s3[j - <span class="number">1</span>]:</span><br><span class="line">                cache[j][<span class="number">0</span>] = <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">                </span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, len(s2) + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(s1) + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> (cache[j - <span class="number">1</span>][i] <span class="keyword">and</span> s2[j - <span class="number">1</span>] == s3[j + i - <span class="number">1</span>]) <span class="keyword">or</span> (cache[j][i - <span class="number">1</span>] <span class="keyword">and</span> s1[i - <span class="number">1</span>] == s3[j + i - <span class="number">1</span>]):</span><br><span class="line">                    cache[j][i] = <span class="keyword">True</span></span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> cache[len(s2)][len(s1)]</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出三个字符串:s1、s2、s3，判断s3是否由s1和s2交叉构成。</p>
</blockquote>
<p><strong>样例</strong><br>比如 s1 =<strong> “aabcc”</s]]>
    </summary>
    
      <category term="Dynamic Programing" scheme="http://yoursite.com/tags/Dynamic-Programing/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Two Sequence DP" scheme="http://yoursite.com/tags/Two-Sequence-DP/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用C#中的Dispatcher]]></title>
    <link href="http://yoursite.com/2016/06/03/%E4%BD%BF%E7%94%A8C-%E4%B8%AD%E7%9A%84Dispatcher/"/>
    <id>http://yoursite.com/2016/06/03/使用C-中的Dispatcher/</id>
    <published>2016-06-04T01:28:24.000Z</published>
    <updated>2016-06-04T08:29:01.000Z</updated>
    <content type="html"><![CDATA[<p>之前的文章说过了<a href="http://www.jianshu.com/p/b89f39c5f803" target="_blank" rel="external">如何使用BackgroundWorker</a>，今天要说的是WPF程序员处理多线程的另外一个方式 - Dispatcher</p>
<p>当我们打开一个WPF应用程序即开启了一个进程，该进程中至少包含两个线程。</p>
<ul>
<li>一个线程用于处理呈现：隐藏在后台运行</li>
<li>一个线程用于管理用户界面：接收输入、处理事件、绘制屏幕以及运行应用程序代码。即UI线程。</li>
</ul>
<p>在UI线程中有一个Dispatcher对象，管理每一个需要执行的工作项。Dispatcher会根据每个工作项的优先级排队。向Dispatcher列队中添加工作项时可指定10个不同的级别。那么问题来了，如果遇到耗时操作的时候，该操作如果依旧发生在UI线程中，Dispatcher 列队中其他的需要执行的工作项都要等待，从而造成界面假死的现象。为了加快响应速度，提高用户体验，我们应该尽量保证Dispatcher 列队中工作项要<strong>小</strong>。所以，对于耗时操作，我们应该开辟一个新的子线程去处理，在操作完成后，通过向UI线程的Dispatcher列队注册工作项，来通知UI线程更新结果。</p>
<p>Dispatcher提供两个注册工作项的方法：Invoke 和 BeginInvoke。这两个方法均调度一个委托来执行。Invoke 是同步调用，也就是说，直到 UI 线程实际执行完该委托它才返回。BeginInvoke是异步的，将立即返回。</p>
<ul>
<li>Dispatcher实际上并不是多线程</li>
<li>子线程不能直接修改UI线程，必须通过向UI线程中的Dispatcher注册工作项来完成</li>
<li>Dispatcher 是单例模式，暴露了一个静态的CurrentDispatcher方法用于获得当前线程的Dispatcher</li>
<li>每一个UI线程都至少有一个Dispatcher，一个Dispatcher只能在一个线程中执行工作。</li>
<li>开启新线程的方法很多，比如delegate.BeginInvoke()的方式开启的新线程。<blockquote>
<p>Delegate.Invoke: Executes synchronously, on the same thread.<br>Delegate.BeginInvoke: Executes asynchronously, on a threadpool thread.</p>
</blockquote>
</li>
</ul>
<h3 id="示例程序">示例程序</h3><p>XAML<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;Window x:Class=&#34;DispatcherExample.MainWindow&#34;&#10;        xmlns=&#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&#34;&#10;        xmlns:x=&#34;http://schemas.microsoft.com/winfx/2006/xaml&#34;&#10;        Title=&#34;MainWindow&#34; Height=&#34;160&#34; Width=&#34;300&#34;&#62;&#10;    &#60;StackPanel&#62;&#10;        &#60;ProgressBar Name=&#34;progressBar&#34; Height=&#34;20&#34; Width=&#34;250&#34; Margin=&#34;10&#34;&#62;&#60;/ProgressBar&#62;&#10;        &#60;TextBox Name=&#34;textBox&#34; Width=&#34;50&#34; Height=&#34;20&#34; HorizontalAlignment=&#34;Center&#34;&#62;&#60;/TextBox&#62;&#10;        &#60;Button Name=&#34;btnProcess&#34; Width=&#34;100&#34; Click=&#34;btnProcess_Click&#34; Margin=&#34;5&#34;&#62;Start&#60;/Button&#62;&#10;        &#60;Button Name=&#34;btnCancel&#34; Width=&#34;100&#34; Click=&#34;btnCancel_Click&#34; Margin=&#34;5&#34;&#62;Cancel&#60;/Button&#62;&#10;    &#60;/StackPanel&#62;&#10;&#60;/Window&#62;</span><br></pre></td></tr></table></figure></p>
<p>C#<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">DispatcherExample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> Interaction logic for MainWindow.xaml</span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MainWindow</span> : <span class="title">Window</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MainWindow</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Thread taskThread;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnProcess_Click</span>(<span class="params"><span class="keyword">object</span> sender, RoutedEventArgs e</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            taskThread = <span class="keyword">new</span> Thread(DoTask);</span><br><span class="line">            taskThread.Start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnCancel_Click</span>(<span class="params"><span class="keyword">object</span> sender, RoutedEventArgs e</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            taskThread.Abort();</span><br><span class="line">            MessageBox.Show(<span class="string">"Background task finished normally"</span>, <span class="string">"info"</span>);</span><br><span class="line">            <span class="keyword">this</span>.progressBar.Value = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.textBox.Text = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DoTask</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Int64 InputNum = (Int64)<span class="number">100</span>;</span><br><span class="line">            <span class="keyword">for</span> (Int64 i = <span class="number">0</span>; i &lt; InputNum; i++)</span><br><span class="line">			&#123;</span><br><span class="line">                Thread.Sleep(<span class="number">100</span>);</span><br><span class="line">			    <span class="keyword">this</span>.Dispatcher.BeginInvoke((Action)<span class="keyword">delegate</span>()</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>.progressBar.Value = i;</span><br><span class="line">                    <span class="keyword">this</span>.textBox.Text = i.ToString();</span><br><span class="line">                &#125;);</span><br><span class="line">			&#125;</span><br><span class="line">            MessageBox.Show(<span class="string">"Background task has been canceled"</span>, <span class="string">"info"</span>);</span><br><span class="line">            <span class="keyword">this</span>.Dispatcher.BeginInvoke((Action)<span class="keyword">delegate</span>()</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>.progressBar.Value = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">this</span>.textBox.Text = <span class="keyword">null</span>;</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="演示">演示</h3><p><img src="http://upload-images.jianshu.io/upload_images/424375-cb2af30c9dd0131c.gif?imageMogr2/auto-orient/strip" alt="DispatcherExample.gif"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前的文章说过了<a href="http://www.jianshu.com/p/b89f39c5f803" target="_blank" rel="external">如何使用BackgroundWorker</a>，今天要说的是WPF程序员处理多线程的另外一个方式 ]]>
    </summary>
    
      <category term="C#" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="C#学习笔记" scheme="http://yoursite.com/tags/C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Multi-threading" scheme="http://yoursite.com/tags/Multi-threading/"/>
    
      <category term="WPF" scheme="http://yoursite.com/tags/WPF/"/>
    
      <category term="thread" scheme="http://yoursite.com/tags/thread/"/>
    
      <category term="C#" scheme="http://yoursite.com/categories/C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[79 Longest Common Substring]]></title>
    <link href="http://yoursite.com/2016/06/01/79-Longest-Common-Substring/"/>
    <id>http://yoursite.com/2016/06/01/79-Longest-Common-Substring/</id>
    <published>2016-06-02T01:04:45.000Z</published>
    <updated>2016-06-02T08:06:14.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出两个字符串，找到最长公共子串，并返回其长度。</p>
</blockquote>
<p><strong>样例</strong><br>给出A=<strong>“ABCD”
</strong>，B=<strong>“CBCE”</strong>，返回 2</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>典型的双序列行动态规划 - Two Sequence DP</li>
<li>不同于Longest Common Subsequence, 本题是substring，string要求是连续的，sequence可以是不连续的</li>
<li>本题的状态表示类似于Longest Increasing Subsequence</li>
<li>cache[i][j]表示string1的前i个字符和string2的前j个字符的LCS，注意<strong>必须以i/j结尾</strong></li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/424375-66d6d2de1756c444.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="cache"></p>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param A, B: Two string.</span></span><br><span class="line">    <span class="comment"># @return: the length of the longest common substring.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonSubstring</span><span class="params">(self, A, B)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> A <span class="keyword">or</span> <span class="keyword">not</span> B:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            </span><br><span class="line">        cache = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(A) + <span class="number">1</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(B) + <span class="number">1</span>)]</span><br><span class="line">        </span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(B) + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, len(A) + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> A[j - <span class="number">1</span>] == B[i - <span class="number">1</span>]:</span><br><span class="line">                    cache[i][j] = cache[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">                res = max(res, cache[i][j])</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出两个字符串，找到最长公共子串，并返回其长度。</p>
</blockquote>
<p><strong>样例</strong><br>给出A=<strong>“ABCD”
</strong>，B=<stro]]>
    </summary>
    
      <category term="Dynamic Programing" scheme="http://yoursite.com/tags/Dynamic-Programing/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="Two Sequence DP" scheme="http://yoursite.com/tags/Two-Sequence-DP/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
</feed>
