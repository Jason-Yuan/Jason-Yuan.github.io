<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Code Chemistry]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-07-12T08:51:53.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Jason Yuan]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[10 String Permutation II]]></title>
    <link href="http://yoursite.com/2016/07/11/10-String-Permutation-II/"/>
    <id>http://yoursite.com/2016/07/11/10-String-Permutation-II/</id>
    <published>2016-07-12T01:50:59.000Z</published>
    <updated>2016-07-12T08:51:53.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出一个字符串，找到它的所有排列，注意同一个字符串不要打印两次。</p>
</blockquote>
<p><strong>样例</strong><br>给出 “abb”，返回 [“abb”, “bab”, “bba”]。<br>给出 “aabb”，返回[“aabb”, “abab”, “baba”, “bbaa”, “abba”, “baab”]。</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>思路跟 Permutation II 完全一样</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param &#123;string&#125; str a string</span></span><br><span class="line">    <span class="comment"># @return &#123;string[]&#125; all permutations</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stringPermutation2</span><span class="params">(self, strs)</span>:</span></span><br><span class="line">        <span class="comment"># Write your code here</span></span><br><span class="line">        <span class="keyword">if</span> strs <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        res = []</span><br><span class="line">        flags = [<span class="keyword">False</span>] * len(strs)</span><br><span class="line">        self.helper(sorted(strs), flags, <span class="string">""</span>, res)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, strs, flags, path, result)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(path) == len(strs):</span><br><span class="line">            result.append(path)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(strs)):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> flags[i]:</span><br><span class="line">                <span class="keyword">if</span> i != <span class="number">0</span> <span class="keyword">and</span> <span class="keyword">not</span> flags[i - <span class="number">1</span>] <span class="keyword">and</span> strs[i] == strs[i - <span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                flags[i] = <span class="keyword">True</span></span><br><span class="line">                self.helper(strs, flags, path + strs[i], result)</span><br><span class="line">                flags[i] = <span class="keyword">False</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出一个字符串，找到它的所有排列，注意同一个字符串不要打印两次。</p>
</blockquote>
<p><strong>样例</strong><br>给出 “abb”，返回 [“abb”, “bab”, “]]>
    </summary>
    
      <category term="Backtracking" scheme="http://yoursite.com/tags/Backtracking/"/>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="Permutation" scheme="http://yoursite.com/tags/Permutation/"/>
    
      <category term="Recursion" scheme="http://yoursite.com/tags/Recursion/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[52 N-Queens II]]></title>
    <link href="http://yoursite.com/2016/07/11/52-N-Queens-II/"/>
    <id>http://yoursite.com/2016/07/11/52-N-Queens-II/</id>
    <published>2016-07-12T01:32:21.000Z</published>
    <updated>2016-07-12T08:33:07.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>根据n皇后问题，现在返回n皇后不同的解决方案的数量而不是具体的放置布局。</p>
</blockquote>
<p><strong>样例</strong><br>比如n=4，存在2种解决方案</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>比N-Queens还要简单一些，因为不需要画出board，只需要维护一个全局变量result</li>
<li>完整思路见 N-Queens</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">totalNQueens</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type n: int</span><br><span class="line">        :rtype: int</span><br><span class="line">        """</span></span><br><span class="line">        cols = []</span><br><span class="line">        self.search(n, cols)</span><br><span class="line">        <span class="keyword">return</span> self.result</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, n, cols)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(cols) == n:</span><br><span class="line">            self.result += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.isValid(cols, col):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            self.search(n, cols + [col])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(self, cols, col)</span>:</span></span><br><span class="line">        currentRowNumber = len(cols)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(currentRowNumber):</span><br><span class="line">            <span class="comment"># same column</span></span><br><span class="line">            <span class="keyword">if</span> cols[i] == col:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="comment"># left-top to right-bottom</span></span><br><span class="line">            <span class="keyword">if</span> i - cols[i] == currentRowNumber - col:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="comment"># right-top to left-bottom</span></span><br><span class="line">            <span class="keyword">if</span> i + cols[i] == currentRowNumber + col:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>根据n皇后问题，现在返回n皇后不同的解决方案的数量而不是具体的放置布局。</p>
</blockquote>
<p><strong>样例</strong><br>比如n=4，存在2种解决方案</p>
<h3 i]]>
    </summary>
    
      <category term="Backtracking" scheme="http://yoursite.com/tags/Backtracking/"/>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Recursion" scheme="http://yoursite.com/tags/Recursion/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[51 N-Queens]]></title>
    <link href="http://yoursite.com/2016/07/11/51-N-Queens/"/>
    <id>http://yoursite.com/2016/07/11/51-N-Queens/</id>
    <published>2016-07-12T01:23:59.000Z</published>
    <updated>2016-07-12T08:24:37.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>n皇后问题是将n个皇后放置在n*n的棋盘上，皇后彼此之间不能相互攻击。<br>给定一个整数n，返回所有不同的n皇后问题的解决方案。<br>每个解决方案包含一个明确的n皇后放置布局，其中“Q”和“.”分别表示一个女王和一个空位置。</p>
</blockquote>
<p><strong>样例</strong><br>对于4皇后问题存在两种解决的方案：<br>[<br>    [“.Q..”, // Solution 1<br>     “…Q”,<br>     “Q…”,<br>     “..Q.”],<br>    [“..Q.”, // Solution 2<br>     “Q…”,<br>     “…Q”,<br>     “.Q..”]<br>]</p>
<p><img src="http://upload-images.jianshu.io/upload_images/424375-3ff96aba439fe48d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="n-queen puzzle"></p>
<h3 id="解题思路">解题思路</h3><p><img src="http://upload-images.jianshu.io/upload_images/424375-d44ebef99935ef3a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<ul>
<li><p>本题需要三个helper函数来辅助，使得代码更加清晰，第一需要DFS函数，过程如上图所示。一行一行的放置queen，当出现非法的情况时，直接返回上一级 - backtracking的思路</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># backtracking</span></span><br><span class="line">cols.append(col) <span class="comment"># 加</span></span><br><span class="line">self.dfs(cols)</span><br><span class="line">cols.pop() <span class="comment"># 减</span></span><br><span class="line"><span class="comment"># 等效于</span></span><br><span class="line">self.dfs(cols + [col])</span><br></pre></td></tr></table></figure>
</li>
<li><p>第二个函数就是判断某一点放queen是否合法</p>
<ul>
<li>因为是一行一行放，所以可以保证不在一行上</li>
<li>全局变量cols记录了那一列已经放置了queen，通过检查当前列是否在其中，即可判断是不是同一列有两个queen。同时cols的长度也表示已经有多少行放置好了queen，当len(cols) == n的时候可以drawboard并加入result中</li>
<li>同时还有检查对角线，左上右下和左下右上</li>
</ul>
</li>
<li>第三个函数是根据cols数组画出board，相对简单。比如[2, 4, 1, 3]表示第一行queen在第二列，第二行queen在第四列，第三行queen在第一列，第四行queen在第三列</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solveNQueens</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type n: int</span><br><span class="line">        :rtype: List[List[str]]</span><br><span class="line">        """</span></span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">if</span> n &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">        cols = []</span><br><span class="line">        self.search(n, cols, result);</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, n, cols, result)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(cols) == n:</span><br><span class="line">            result.append(self.drawBoard(cols))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.isValid(cols, col):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            self.search(n, cols + [col], result)</span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(self, cols, col)</span>:</span></span><br><span class="line">        currentRowNumber = len(cols)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(currentRowNumber):</span><br><span class="line">            <span class="comment"># same column</span></span><br><span class="line">            <span class="keyword">if</span> cols[i] == col:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="comment"># left-top to right-bottom</span></span><br><span class="line">            <span class="keyword">if</span> i - cols[i] == currentRowNumber - col:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="comment"># right-top to left-bottom</span></span><br><span class="line">            <span class="keyword">if</span> i + cols[i] == currentRowNumber + col:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drawBoard</span><span class="params">(self, cols)</span>:</span></span><br><span class="line">        board = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(cols)):</span><br><span class="line">            line = <span class="string">""</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(cols)):</span><br><span class="line">                <span class="keyword">if</span> j == cols[i]:</span><br><span class="line">                    line += <span class="string">"Q"</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    line += <span class="string">"."</span></span><br><span class="line">            board.append(line)</span><br><span class="line">        <span class="keyword">return</span> board</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>n皇后问题是将n个皇后放置在n*n的棋盘上，皇后彼此之间不能相互攻击。<br>给定一个整数n，返回所有不同的n皇后问题的解决方案。<br>每个解决方案包含一个明确的n皇后放置布局，其中“Q”和“.”分别表示一个]]>
    </summary>
    
      <category term="Backtracking" scheme="http://yoursite.com/tags/Backtracking/"/>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Recursion" scheme="http://yoursite.com/tags/Recursion/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[9 Palindrome Number]]></title>
    <link href="http://yoursite.com/2016/07/11/9-Palindrome-Number/"/>
    <id>http://yoursite.com/2016/07/11/9-Palindrome-Number/</id>
    <published>2016-07-12T00:06:15.000Z</published>
    <updated>2016-07-12T07:06:52.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>判断一个整数是不是回文数。不要使用额外空间。</p>
</blockquote>
<h3 id="解题思路">解题思路</h3><ul>
<li>首先，根据定义，负数不是回文数</li>
<li>把已知数字反转，与原数比较，相等则回文。比如：12321 反转是 12321，12321 == 12321，所以返回True</li>
<li>如何获得每一位上的数字<ul>
<li>12321 % 10 = 1，获得个位数，12321 / 10 = 1232， reverse = 1</li>
<li>1232 % 10 = 2, 获得十位数，1232 / 10 = 123，reverse = 1 * 10 + 2</li>
<li>123 % 10 = 3, 获得百位数，123 / 10 = 12，reverse = 12 * 10 + 3</li>
<li>12 % 10 = 2, 获得千位数，12 / 10 = 1，reverse = 123 * 10 + 2</li>
<li>1 % 10 = 1, 获得万位数，1 / 10 = 0，reverse = 1232 * 10 + 1 = 12321</li>
<li>以此类推，while循环，0时结束</li>
</ul>
</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type x: int</span><br><span class="line">        :rtype: bool</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">0</span> :</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            </span><br><span class="line">        temp = x</span><br><span class="line">        revt = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> temp:</span><br><span class="line">            revt = revt * <span class="number">10</span> + temp % <span class="number">10</span></span><br><span class="line">            temp /= <span class="number">10</span></span><br><span class="line">        <span class="keyword">return</span> revt == x</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>判断一个整数是不是回文数。不要使用额外空间。</p>
</blockquote>
<h3 id="解题思路">解题思路</h3><ul>
<li>首先，根据定义，负数不是回文数</li>
<li>把已知数字反转]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
      <category term="Palindrome" scheme="http://yoursite.com/tags/Palindrome/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[58 Length of Last Word]]></title>
    <link href="http://yoursite.com/2016/07/11/58-Length-of-Last-Word/"/>
    <id>http://yoursite.com/2016/07/11/58-Length-of-Last-Word/</id>
    <published>2016-07-11T23:42:56.000Z</published>
    <updated>2016-07-12T06:43:18.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个字符串， 包含大小写字母、空格’ ‘，请返回其最后一个单词的长度。如果不存在最后一个单词，请返回 0 。</p>
</blockquote>
<p><strong>样例</strong><br>给定 s = “Hello World”，返回 5 。</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>按” “分开长字符串，得到得到一个单词数组</li>
<li>反转数组，遍历，返回第一个不是空串的单词的长度</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLastWord</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type s: str</span><br><span class="line">        :rtype: int</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            </span><br><span class="line">        words = s.split(<span class="string">" "</span>)[::-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">            <span class="keyword">if</span> len(word) != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> len(word)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个字符串， 包含大小写字母、空格’ ‘，请返回其最后一个单词的长度。如果不存在最后一个单词，请返回 0 。</p>
</blockquote>
<p><strong>样例</strong><br>给定 s]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[127 Topological Sorting]]></title>
    <link href="http://yoursite.com/2016/07/09/127-Topological-Sorting/"/>
    <id>http://yoursite.com/2016/07/09/127-Topological-Sorting/</id>
    <published>2016-07-09T19:06:33.000Z</published>
    <updated>2016-07-10T02:08:26.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个有向图，图节点的拓扑排序被定义为：<br>对于每条有向边A–&gt; B，则A必须排在B之前　　<br>拓扑排序的第一个节点可以是任何在图中没有其他节点指向它的节点　　<br>找到给定图的任一拓扑排序</p>
</blockquote>
<p><strong>样例</strong><br>对于下列图：<br><img src="http://upload-images.jianshu.io/upload_images/424375-4f5dd2c2cff0384c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Graph"></p>
<p>这个图的拓扑排序可能是：<br><strong>[0, 1, 2, 3, 4, 5]</strong><br>或者<br><strong>[0, 2, 3, 1, 5, 4]</strong><br>或者<br>….</p>
<h3 id="解题思路">解题思路</h3><ul>
<li><p>关于<strong>拓扑排序</strong>：</p>
<ul>
<li>出度：当前Node指向多少Node</li>
<li>入度：有多少Node指向当前的Node，先现实世界，可以把它理解为一个任务依赖于多少其他的任务，比如入度为0则表示完成该任务可立即执行，不依赖与其他的</li>
<li>拓扑排序就是不停的找入度为零的Node，把它从图中删除，再把它指向的Node的入度 -1</li>
<li>当然，若想要获得每一个Node入度和出度的信息，要首先自己构造。</li>
</ul>
</li>
<li><p>有向图会给出所有的Node，扫面一遍，通过Hash Map记录每一个Node的入度</p>
</li>
<li>若Node不在Hash Map中，表明其入度为0，先加入到Queue中，然后BFS</li>
<li>若最终还<strong>有入度不为零的Node存在</strong>，表明这是一个不能够拓扑排序的图。图中有环，相互依赖。</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a Directed graph node</span></span><br><span class="line"><span class="comment"># class DirectedGraphNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.label = x</span></span><br><span class="line"><span class="comment">#         self.neighbors = []</span></span><br><span class="line"><span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="string">"""</span><br><span class="line">    @param graph: A list of Directed graph node</span><br><span class="line">    @return: A list of integer</span><br><span class="line">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">topSort</span><span class="params">(self, graph)</span>:</span></span><br><span class="line">        result = []</span><br><span class="line">        visited = &#123;&#125;</span><br><span class="line">        <span class="comment"># BFS - calculate the in-degree for each node</span></span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> graph:</span><br><span class="line">            <span class="keyword">for</span> neighbor <span class="keyword">in</span> node.neighbors:</span><br><span class="line">                <span class="keyword">if</span> neighbor <span class="keyword">in</span> visited:</span><br><span class="line">                    visited[neighbor] += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    visited[neighbor] = <span class="number">1</span></span><br><span class="line">                </span><br><span class="line">        q = Queue.Queue()</span><br><span class="line">        <span class="comment"># enqueue the node which in-degree == 0</span></span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> graph:</span><br><span class="line">            <span class="keyword">if</span> node <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                q.put(node)</span><br><span class="line">                result.append(node)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">            node = q.get()</span><br><span class="line">            <span class="keyword">for</span> neighbor <span class="keyword">in</span> node.neighbors:</span><br><span class="line">                visited[neighbor] -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> visited[neighbor] == <span class="number">0</span>:</span><br><span class="line">                    q.put(neighbor)</span><br><span class="line">                    result.append(neighbor)</span><br><span class="line">                    </span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个有向图，图节点的拓扑排序被定义为：<br>对于每条有向边A–&gt; B，则A必须排在B之前　　<br>拓扑排序的第一个节点可以是任何在图中没有其他节点指向它的节点　　<br>找到给定图的任一拓扑排序<]]>
    </summary>
    
      <category term="BFS" scheme="http://yoursite.com/tags/BFS/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="Topological Sorting" scheme="http://yoursite.com/tags/Topological-Sorting/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[133 Clone Graph]]></title>
    <link href="http://yoursite.com/2016/07/09/133-Clone-Graph/"/>
    <id>http://yoursite.com/2016/07/09/133-Clone-Graph/</id>
    <published>2016-07-09T18:02:08.000Z</published>
    <updated>2016-07-10T01:03:12.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>克隆一张无向图，图中的每个节点包含一个 label 和一个表 neighbors。<br>你的程序需要返回一个经过深度拷贝的新图。这个新图和原图具有同样的结构，并且对新图的任何改动不会对原图造成任何影响。</p>
</blockquote>
<p><strong>样例</strong><br>比如，序列化图 {0,1,2#1,2#2,2} 共有三个节点, 因此包含两个个分隔符#。<br>第一个节点label为0，存在边从节点0链接到节点1和节点2<br>第二个节点label为1，存在边从节点1连接到节点2<br>第三个节点label为2，存在边从节点2连接到节点2(本身),从而形成自环。</p>
<p>我们能看到如下的图：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   <span class="number">1</span></span><br><span class="line">  / \</span><br><span class="line"> /   \</span><br><span class="line"><span class="number">0</span> --- <span class="number">2</span></span><br><span class="line">     / \</span><br><span class="line">     \_/</span><br></pre></td></tr></table></figure></p>
<h3 id="解题思路">解题思路</h3><ul>
<li>首先，要遍历无向图，需要使用Hash Map来当作visited数组，防止重复访问而造成程序中的死循环</li>
<li>遍历图有两种方式 - BFS &amp; DFS，本题均可采用<ul>
<li>BFS - 使用Queue (prefer)</li>
<li>DFS - 递归或者使用Stack，对于DFS，每次clone一个node的时候，就要把它所有的neighbor加入到新clone的node的neighbor中，此时recursivly调用dfs，如果没有visited过 - 新建一个node，否则直接从map中找到返回</li>
</ul>
</li>
<li>在visited数组中，key值为原来的node，value为新clone的node，如果一个node不存在于map中，说明这个node还未被clone，将它clone后放入queue中继续处理neighbors</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Method 1: BFS</span></span><br><span class="line"><span class="comment"># Definition for a undirected graph node</span></span><br><span class="line"><span class="comment"># class UndirectedGraphNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.label = x</span></span><br><span class="line"><span class="comment">#         self.neighbors = []</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.visited = &#123;&#125;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cloneGraph</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type node: UndirectedGraphNode</span><br><span class="line">        :rtype: UndirectedGraphNode</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">            </span><br><span class="line">        newHead = UndirectedGraphNode(node.label)</span><br><span class="line">        self.visited[node] = newHead</span><br><span class="line">        </span><br><span class="line">        myQueue = Queue.Queue()</span><br><span class="line">        myQueue.put(node)</span><br><span class="line">        <span class="keyword">while</span> myQueue.qsize():</span><br><span class="line">            current = myQueue.get()</span><br><span class="line">            <span class="keyword">for</span> neighbor <span class="keyword">in</span> current.neighbors:</span><br><span class="line">                <span class="keyword">if</span> neighbor <span class="keyword">not</span> <span class="keyword">in</span> self.visited:</span><br><span class="line">                    newNode = UndirectedGraphNode(neighbor.label)</span><br><span class="line">                    self.visited[current].neighbors.append(newNode)</span><br><span class="line">                    self.visited[neighbor] = newNode</span><br><span class="line">                    myQueue.put(neighbor)</span><br><span class="line">                <span class="keyword">else</span>: <span class="comment"># turn directed graph to undirected graph</span></span><br><span class="line">                    self.visited[current].neighbors.append(self.visited[neighbor])</span><br><span class="line">                    </span><br><span class="line">        <span class="keyword">return</span> newHead</span><br><span class="line"></span><br><span class="line"><span class="comment"># Method 2: DFS</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cloneGraph</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type node: UndirectedGraphNode</span><br><span class="line">        :rtype: UndirectedGraphNode</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> self.dfs(node, &#123;&#125;)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, node, map)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">in</span> map:</span><br><span class="line">            <span class="keyword">return</span> map[node]</span><br><span class="line">        newNode = UndirectedGraphNode(node.label)</span><br><span class="line">        map[node] = newNode</span><br><span class="line">        <span class="keyword">for</span> neighbor <span class="keyword">in</span> node.neighbors:</span><br><span class="line">            newNode.neighbors.append(self.dfs(neighbor, map))</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> newNode</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>克隆一张无向图，图中的每个节点包含一个 label 和一个表 neighbors。<br>你的程序需要返回一个经过深度拷贝的新图。这个新图和原图具有同样的结构，并且对新图的任何改动不会对原图造成任何影响。</p]]>
    </summary>
    
      <category term="BFS" scheme="http://yoursite.com/tags/BFS/"/>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Queue" scheme="http://yoursite.com/tags/Queue/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[230 Animal Shelter]]></title>
    <link href="http://yoursite.com/2016/07/09/230-Animal-Shelter/"/>
    <id>http://yoursite.com/2016/07/09/230-Animal-Shelter/</id>
    <published>2016-07-09T15:53:58.000Z</published>
    <updated>2016-07-09T22:54:24.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>在一个宠物避难所里，仅有狗和猫两种动物可供领养，且领养时严格执行“先进先出”的规则。如果有人想要从避难所领养动物，他只有两种选择：要么选择领养所有动物中最资深的一只（根据到达避难所的时间，越早到的越资深），要么选择领养猫或狗（同样，也只能领养最资深的一只）。也就是说，领养者不能随意选择某一指定动物。请建立一个数据结构，使得它可以运行以上规则，并可实 enqueue, dequeueAny, dequeueDog, 和 dequeueCat 操作。<br>建议使用 LinkedList 作为数据结构实现。</p>
</blockquote>
<p><strong>样例</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int DOG = <span class="number">1</span></span><br><span class="line">int CAT = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">enqueue(<span class="string">"james"</span>, DOG);</span><br><span class="line">enqueue(<span class="string">"tom"</span>, DOG);</span><br><span class="line">enqueue(<span class="string">"mimi"</span>, CAT);</span><br><span class="line">dequeueAny();  <span class="comment"># should return "james"</span></span><br><span class="line">dequeueCat();  <span class="comment"># should return "mimi"</span></span><br><span class="line">dequeueDog();  <span class="comment"># should return "tom"</span></span><br></pre></td></tr></table></figure></p>
<h3 id="解题思路">解题思路</h3><ul>
<li>使用两个数组分别记录加入的猫和狗，用0和1表示</li>
<li>存储时，在python中可以使用set来同时记录名字和先后顺序(使用数字记录age)，初始tot = 0，之后每次tot += 1，在dequeueAny的时候只需要比较Dog[0]和Cat[0]的tot，值越小表明age越大，pop谁</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimalShelter</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># do some intialize if necessary</span></span><br><span class="line">        self.cats = []</span><br><span class="line">        self.dogs = []</span><br><span class="line">        self.tot = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span><br><span class="line">    @param &#123;string&#125; name</span><br><span class="line">    @param &#123;int&#125; type, 1 if Animal is dog or 0</span><br><span class="line">    @return nothing</span><br><span class="line">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enqueue</span><span class="params">(self, name, type)</span>:</span></span><br><span class="line">        <span class="comment"># Write yout code here</span></span><br><span class="line">        self.tot += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> type == <span class="number">1</span>:</span><br><span class="line">            self.dogs.append((name, self.tot))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.cats.append((name, self.tot))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># return a string</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dequeueAny</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># Write your code here</span></span><br><span class="line">        <span class="keyword">if</span> len(self.dogs) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> self.dequeueCat()</span><br><span class="line">        <span class="keyword">elif</span> len(self.cats) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> self.dequeueDog()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> self.dogs[<span class="number">0</span>][<span class="number">1</span>] &lt; self.cats[<span class="number">0</span>][<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">return</span> self.dequeueDog()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> self.dequeueCat()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># return a string</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dequeueDog</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># Write your code here</span></span><br><span class="line">        name = self.dogs[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">del</span> self.dogs[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># return a string</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dequeueCat</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># Write your code here</span></span><br><span class="line">        name = self.cats[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">del</span> self.cats[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> name</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>在一个宠物避难所里，仅有狗和猫两种动物可供领养，且领养时严格执行“先进先出”的规则。如果有人想要从避难所领养动物，他只有两种选择：要么选择领养所有动物中最资深的一只（根据到达避难所的时间，越早到的越资深），要么]]>
    </summary>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="Queue" scheme="http://yoursite.com/tags/Queue/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[543 Kth Largest in N Arrays]]></title>
    <link href="http://yoursite.com/2016/07/08/543-Kth-Largest-in-N-Arrays/"/>
    <id>http://yoursite.com/2016/07/08/543-Kth-Largest-in-N-Arrays/</id>
    <published>2016-07-08T22:22:06.000Z</published>
    <updated>2016-07-09T05:23:01.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>在N个数组中找到第K大元素</p>
</blockquote>
<p><strong>样例</strong><br>n = 2 数组 [[9,3,2,4,7],[1,2,3,4,8]], 第三大元素是 7.<br>n = 2 数组 [[9,3,2,4,8],[1,2,3,4,2]], 最大数是 9, 次大数是 8, 第三大数是 7</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>维护一个大小为k的Min Heap，扫面N个数组的每一个数<ul>
<li>若小于等于堆顶，跳过</li>
<li>若大于堆顶，则剔除堆顶元素，加入该元素</li>
</ul>
</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Queue</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param &#123;int[][]&#125; arrays a list of array</span></span><br><span class="line">    <span class="comment"># @param &#123;int&#125; k an integer</span></span><br><span class="line">    <span class="comment"># @return &#123;int&#125; an integer, K-th largest element in N arrays</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">KthInArrays</span><span class="params">(self, arrays, k)</span>:</span></span><br><span class="line">        <span class="comment"># Write your code here</span></span><br><span class="line">        minHeap = Queue.PriorityQueue()</span><br><span class="line">        <span class="keyword">for</span> nums <span class="keyword">in</span> arrays:</span><br><span class="line">            <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">                <span class="keyword">if</span> minHeap.qsize() &lt; k:</span><br><span class="line">                    minHeap.put(num)</span><br><span class="line">                <span class="keyword">elif</span> num &gt; minHeap.queue[<span class="number">0</span>]:</span><br><span class="line">                    minHeap.get()</span><br><span class="line">                    minHeap.put(num)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> minHeap.queue[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>在N个数组中找到第K大元素</p>
</blockquote>
<p><strong>样例</strong><br>n = 2 数组 [[9,3,2,4,7],[1,2,3,4,8]], 第三大元素是 7.<b]]>
    </summary>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Heap" scheme="http://yoursite.com/tags/Heap/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="MinHeap" scheme="http://yoursite.com/tags/MinHeap/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[242 Valid Anagram]]></title>
    <link href="http://yoursite.com/2016/07/07/242-Valid-Anagram/"/>
    <id>http://yoursite.com/2016/07/07/242-Valid-Anagram/</id>
    <published>2016-07-08T02:27:30.000Z</published>
    <updated>2016-07-08T09:28:12.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>写出一个函数 anagram(s, t)<br> 判断两个字符串是否可以通过改变字母的顺序变成一样的字符串。</p>
</blockquote>
<p><strong>样例</strong><br>给出 s = “abcd”，t=”dcab”，返回 true.<br>给出 s = “ab”, t = “ab”, 返回 true.<br>给出 s = “ab”, t = “ac”, 返回 false.</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>扫描s，通过哈希表存贮s中每个字母出现的次数</li>
<li>扫描t，每次在哈希表中寻找相应的key，对于次数-1，如果最后哈希表中所有的value都变成0，则表明s和t是anagram</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isAnagram</span><span class="params">(self, s, t)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type s: str</span><br><span class="line">        :type t: str</span><br><span class="line">        :rtype: bool</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> len(s) != len(t):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        </span><br><span class="line">        map = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">            map[ord(s[i])] += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(t)):</span><br><span class="line">            map[ord(t[i])] -= <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span> flag <span class="keyword">in</span> map:</span><br><span class="line">            <span class="keyword">if</span> flag != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>写出一个函数 anagram(s, t)<br> 判断两个字符串是否可以通过改变字母的顺序变成一样的字符串。</p>
</blockquote>
<p><strong>样例</strong><br>给出 s =]]>
    </summary>
    
      <category term="Hash Table" scheme="http://yoursite.com/tags/Hash-Table/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[131 Palindrome Partitioning]]></title>
    <link href="http://yoursite.com/2016/07/06/131-Palindrome-Partitioning/"/>
    <id>http://yoursite.com/2016/07/06/131-Palindrome-Partitioning/</id>
    <published>2016-07-07T01:35:57.000Z</published>
    <updated>2016-07-07T08:36:54.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个字符串s，将s分割成一些子串，使每个子串都是回文串。<br>返回s所有可能的回文串分割方案。</p>
</blockquote>
<p><strong>样例</strong><br>给出 s = “aab”，返回<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#10;  [&#34;aa&#34;, &#34;b&#34;],&#10;  [&#34;a&#34;, &#34;a&#34;, &#34;b&#34;]&#10;]</span><br></pre></td></tr></table></figure></p>
<h3 id="解题思路">解题思路</h3><ul>
<li>求所有答案，首先排除动态规划，应该是DFS (Palindrome Partitioning II 求个数才是动归）</li>
<li>遇到要求所有组合、可能、排列等解集的题目，一般都是DFS + backtracking</li>
<li>首先传入s=”aab” path=[] res = [], 首先切割出”a”（然后是”aa” “aab” …），然后判读它是不是回文串：<ul>
<li>如果不是，直接跳过</li>
<li>如果是，则此时剩余的 s=”ab”， path += [“a”]</li>
<li>写入res的判断是，当s=””时，记录结果</li>
</ul>
</li>
<li>优化：可以通过用DP来计算任意s[i:j]是否是回文，并保存结果，再执行DFS，如果发现某条string不是回文，就可以直接退出，从而减少计算量</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type s: str</span><br><span class="line">        :rtype: List[List[str]]</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">            <span class="keyword">return</span> [[]]</span><br><span class="line">        path = []</span><br><span class="line">        result = []</span><br><span class="line">        self.helper(s, path, result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, str, path, result)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> str:</span><br><span class="line">            result.append(path)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(str) + <span class="number">1</span>):</span><br><span class="line">            prefix = str[:i]</span><br><span class="line">            <span class="keyword">if</span> self.isPalindrome(prefix):</span><br><span class="line">                self.helper(str[i:], path + [prefix], result)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, str)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(str)):</span><br><span class="line">            <span class="keyword">if</span> str[i] != str[len(str) - i - <span class="number">1</span>]: <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个字符串s，将s分割成一些子串，使每个子串都是回文串。<br>返回s所有可能的回文串分割方案。</p>
</blockquote>
<p><strong>样例</strong><br>给出 s = “aa]]>
    </summary>
    
      <category term="Backtracking" scheme="http://yoursite.com/tags/Backtracking/"/>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Palindrome" scheme="http://yoursite.com/tags/Palindrome/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[229 Stack Sorting]]></title>
    <link href="http://yoursite.com/2016/07/06/229-Stack-Sorting/"/>
    <id>http://yoursite.com/2016/07/06/229-Stack-Sorting/</id>
    <published>2016-07-07T00:50:00.000Z</published>
    <updated>2016-07-07T07:50:33.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>请设计一种方法将一个栈进行升序排列 （最大的数在最上面）。</p>
</blockquote>
<p>你可以使用另外一个栈来辅助操作，但不可将这些数复制到另外一个数据结构中 （如，数组）。</p>
<p><strong>样例</strong><br>给一个栈：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">| |&#10;|3|&#10;|1|&#10;|2|&#10;|4|&#10; -</span><br></pre></td></tr></table></figure></p>
<p>排序之后：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">| |&#10;|4|&#10;|3|&#10;|2|&#10;|1|&#10; -</span><br></pre></td></tr></table></figure></p>
<p>栈会被序列化为[4,2,1,3]，也就是说最右边是栈顶。</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>首先，把所有元素从原stack倒进临时stack，然后每次从临时stack拿出一个元素放入current中：<ul>
<li>若该current大于原stack中最上面的元素，则直接加入原stack</li>
<li>若该current小于原stack中的元素，就把原stack中的元素放回临时stack，直到原stack顶上的元素小于current或者原stack为空，则将current放入原stack</li>
</ul>
</li>
<li>从而，保证了原stack中的元素从底到上是按有小到大排序的</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Your can use Stack class in your solution.</span></span><br><span class="line"><span class="comment">#class Stack:</span></span><br><span class="line"><span class="comment">#  def __init__(self, stk=[])</span></span><br><span class="line"><span class="comment">#    # use stk to initialize the stack</span></span><br><span class="line"><span class="comment">#  def isEmpty(self)</span></span><br><span class="line"><span class="comment">#    # return true is stack is empty or false/</span></span><br><span class="line"><span class="comment">#  def push(self, item)</span></span><br><span class="line"><span class="comment">#    # push a element into stack and return nothing</span></span><br><span class="line"><span class="comment">#  def pop(self)</span></span><br><span class="line"><span class="comment">#    # pop a element from stack</span></span><br><span class="line"><span class="comment">#  def peek(self):</span></span><br><span class="line"><span class="comment">#    # return the top element if stack is not empty or nothing</span></span><br><span class="line"><span class="comment">#  def size(self):</span></span><br><span class="line"><span class="comment">#    # return the size of stack</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param &#123;Stack&#125; stk an integer Stack</span></span><br><span class="line">    <span class="comment"># @return &#123;int&#125; void</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stackSorting</span><span class="params">(self, stk)</span>:</span></span><br><span class="line">        <span class="comment"># Write your code here</span></span><br><span class="line">        tempStk = Stack()</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> stk.isEmpty():</span><br><span class="line">            tempStk.push(stk.pop())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> tempStk.isEmpty():</span><br><span class="line">            current = tempStk.pop()</span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">not</span> stk.isEmpty() <span class="keyword">and</span> stk.peek() &gt; current:</span><br><span class="line">                tempStk.push(stk.peek())</span><br><span class="line">                stk.pop()</span><br><span class="line">            stk.push(current)</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>请设计一种方法将一个栈进行升序排列 （最大的数在最上面）。</p>
</blockquote>
<p>你可以使用另外一个栈来辅助操作，但不可将这些数复制到另外一个数据结构中 （如，数组）。</p>
<p><st]]>
    </summary>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="Stack" scheme="http://yoursite.com/tags/Stack/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[531 Six Degrees]]></title>
    <link href="http://yoursite.com/2016/07/06/531-Six-Degrees/"/>
    <id>http://yoursite.com/2016/07/06/531-Six-Degrees/</id>
    <published>2016-07-06T22:11:28.000Z</published>
    <updated>2016-07-09T23:04:54.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>六度分离是一个哲学问题，说的是每个人每个东西可以通过六步或者更少的步数建立联系。<br>现在给你一个友谊关系，查询两个人可以通过几步相连，如果不相连返回 -1</p>
</blockquote>
<p><strong>样例</strong><br>给出图<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>------<span class="number">2</span>-----<span class="number">4</span></span><br><span class="line"> \          /</span><br><span class="line">  \        /</span><br><span class="line">   \--<span class="number">3</span>--/</span><br></pre></td></tr></table></figure></p>
<p>{1,2,3#2,1,4#3,1,4#4,2,3} s = 1, t = 4 返回 2</p>
<p>给出图二<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>      <span class="number">2</span>-----<span class="number">4</span></span><br><span class="line">             /</span><br><span class="line">           /</span><br><span class="line">          <span class="number">3</span></span><br></pre></td></tr></table></figure></p>
<p>{1#2,4#3,4#4,2,3} s = 1, t = 4 返回 -1</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>本题相当于求图中两点的最短路径，BFS -&gt; 用Queue来实现</li>
<li>加入hash map去重，并且巧妙的将step当作值存入每一个节点为key的hash map中，这样通过节点A找到的相邻节点的步数即map[A] + 1</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for Undirected graph node</span></span><br><span class="line"><span class="comment"># class UndirectedGraphNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.label = x</span></span><br><span class="line"><span class="comment">#         self.neighbors = []</span></span><br><span class="line"><span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="string">'''</span><br><span class="line">    @param &#123;UndirectedGraphNode[]&#125; graph a list of Undirected graph node</span><br><span class="line">    @param &#123;UndirectedGraphNode&#125; s, t two Undirected graph nodes</span><br><span class="line">    @return &#123;int&#125; an integer</span><br><span class="line">    '''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sixDegrees</span><span class="params">(self, graph, s, t)</span>:</span></span><br><span class="line">        <span class="comment"># Write your code here</span></span><br><span class="line">        members = &#123;&#125;</span><br><span class="line">        q = Queue.Queue(maxsize = len(graph))</span><br><span class="line"></span><br><span class="line">        q.put(s)</span><br><span class="line">        members[s] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">            x = q.get()</span><br><span class="line">            <span class="keyword">if</span> x == t:</span><br><span class="line">                <span class="keyword">return</span> members[x]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> x.neighbors:</span><br><span class="line">                <span class="keyword">if</span> y <span class="keyword">not</span> <span class="keyword">in</span> members:</span><br><span class="line">                    members[y] = members[x] + <span class="number">1</span></span><br><span class="line">                    q.put(y)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>六度分离是一个哲学问题，说的是每个人每个东西可以通过六步或者更少的步数建立联系。<br>现在给你一个友谊关系，查询两个人可以通过几步相连，如果不相连返回 -1</p>
</blockquote>
<p><str]]>
    </summary>
    
      <category term="BFS" scheme="http://yoursite.com/tags/BFS/"/>
    
      <category term="Hash Table" scheme="http://yoursite.com/tags/Hash-Table/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="Queue" scheme="http://yoursite.com/tags/Queue/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[347 Top K Frequent Elements]]></title>
    <link href="http://yoursite.com/2016/07/03/347-Top-K-Frequent-Elements/"/>
    <id>http://yoursite.com/2016/07/03/347-Top-K-Frequent-Elements/</id>
    <published>2016-07-03T19:31:15.000Z</published>
    <updated>2016-07-04T02:32:18.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个数组，返回其出现次数最多的k个元素，时间复杂度优于O(nlogn)</p>
</blockquote>
<p><strong>样例</strong><br>给出[1,1,1,2,2,3] 和 k = 2, 返回 [1,2]</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>首先使用hash table统计元素的频率</li>
<li>建立一个长度为k的最小堆，因为堆顶最小，每次和堆顶元素作比较，大于堆顶就踢出堆顶元素并把当前元素加入堆中</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">topKFrequent</span><span class="params">(self, nums, k)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type nums: List[int]</span><br><span class="line">        :type k: int</span><br><span class="line">        :rtype: List[int]</span><br><span class="line">        """</span></span><br><span class="line">        map = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> num <span class="keyword">not</span> <span class="keyword">in</span> map:</span><br><span class="line">                map[num] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                map[num] += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        minHeap = Queue.PriorityQueue()</span><br><span class="line">        <span class="keyword">for</span> key, count <span class="keyword">in</span> map.items():</span><br><span class="line">            <span class="keyword">if</span> minHeap.qsize() &lt; k:</span><br><span class="line">                minHeap.put((count, key))</span><br><span class="line">            <span class="keyword">elif</span> minHeap.queue[<span class="number">0</span>] &lt; (count, key):</span><br><span class="line">                minHeap.get()</span><br><span class="line">                minHeap.put((count, key))</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> [x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> minHeap.queue]</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个数组，返回其出现次数最多的k个元素，时间复杂度优于O(nlogn)</p>
</blockquote>
<p><strong>样例</strong><br>给出[1,1,1,2,2,3] 和 k = 2]]>
    </summary>
    
      <category term="Hash Table" scheme="http://yoursite.com/tags/Hash-Table/"/>
    
      <category term="Heap" scheme="http://yoursite.com/tags/Heap/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Priority Queue" scheme="http://yoursite.com/tags/Priority-Queue/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[493 [Implement Queue by Linked List II]]></title>
    <link href="http://yoursite.com/2016/06/28/493-Implement-Queue-by-Linked-List-II/"/>
    <id>http://yoursite.com/2016/06/28/493-Implement-Queue-by-Linked-List-II/</id>
    <published>2016-06-28T23:16:43.000Z</published>
    <updated>2016-06-29T06:17:23.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>实现一个双端队列</p>
</blockquote>
<p><strong>样例</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">push_front(1)&#10;push_back(2)&#10;pop_back() // return 2&#10;pop_back() // return 1&#10;push_back(3)&#10;push_back(4)&#10;pop_front() // return 3&#10;pop_front() // return 4</span><br></pre></td></tr></table></figure></p>
<h3 id="解题思路">解题思路</h3><ul>
<li>自己构建一个双向链表</li>
<li>需要注意从前面pop出最后一个元素和从后面pop出最后一个元素的情况</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, _val)</span>:</span></span><br><span class="line">        self.next = self.prev = <span class="keyword">None</span></span><br><span class="line">        self.val = _val</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dequeue</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># do some intialize if necessary</span></span><br><span class="line">        self.first, self.last = <span class="keyword">None</span>, <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># @param &#123;int&#125; item an integer</span></span><br><span class="line">    <span class="comment"># @return nothing</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push_front</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="comment"># Write yout code here</span></span><br><span class="line">        <span class="keyword">if</span> self.first <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            self.first = Node(item)</span><br><span class="line">            self.last = self.first</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp = Node(item)</span><br><span class="line">            self.first.prev = tmp</span><br><span class="line">            tmp.next = self.first</span><br><span class="line">            self.first = tmp</span><br><span class="line"></span><br><span class="line">    <span class="comment"># @param &#123;int&#125; item an integer</span></span><br><span class="line">    <span class="comment"># @return nothing</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push_back</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="comment"># Write yout code here</span></span><br><span class="line">        <span class="keyword">if</span> self.last <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            self.first = Node(item)</span><br><span class="line">            self.last = self.first</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp = Node(item)</span><br><span class="line">            self.last.next = tmp</span><br><span class="line">            tmp.prev = self.last</span><br><span class="line">            self.last = tmp</span><br><span class="line"></span><br><span class="line">    <span class="comment"># @return an integer</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop_front</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># Write your code here</span></span><br><span class="line">        <span class="keyword">if</span> self.first <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            item = self.first.val</span><br><span class="line">            self.first = self.first.next</span><br><span class="line">            <span class="keyword">if</span> self.first <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">                self.first.prev = <span class="keyword">None</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.last = <span class="keyword">None</span></span><br><span class="line">            <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">12</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># @return an integer</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop_back</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># Write your code here</span></span><br><span class="line">        <span class="keyword">if</span> self.last <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            item = self.last.val</span><br><span class="line">            self.last = self.last.prev</span><br><span class="line">            <span class="keyword">if</span> self.last <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">                self.last.next = <span class="keyword">None</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.first = <span class="keyword">None</span></span><br><span class="line">            <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">12</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>实现一个双端队列</p>
</blockquote>
<p><strong>样例</strong><br><figure class="highlight plain"><table><tr><td class]]>
    </summary>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="Queue" scheme="http://yoursite.com/tags/Queue/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[492 Implement Queue by Linked List]]></title>
    <link href="http://yoursite.com/2016/06/28/492-Implement-Queue-by-Linked-List/"/>
    <id>http://yoursite.com/2016/06/28/492-Implement-Queue-by-Linked-List/</id>
    <published>2016-06-28T22:52:11.000Z</published>
    <updated>2016-06-29T05:52:47.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>实现一个队列的操作</p>
</blockquote>
<p><strong>样例</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enqueue(<span class="number">1</span>)</span><br><span class="line">enqueue(<span class="number">2</span>)</span><br><span class="line">enqueue(<span class="number">3</span>)</span><br><span class="line">dequeue() <span class="comment"># return 1</span></span><br><span class="line">enqueue(<span class="number">4</span>)</span><br><span class="line">dequeue() <span class="comment"># return 2</span></span><br></pre></td></tr></table></figure></p>
<h3 id="解题思路">解题思路</h3><ul>
<li>简单基础的一道题，用链表实现列队</li>
<li>注意，dequeue的时候如果是下面这种情况，head指向dummyNode，tail指向5。把5删除之后要记得将tail重新指向head所指向的node<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DummyNode -&gt; 5 -&gt; Null</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, _val)</span>:</span></span><br><span class="line">        self.next = <span class="keyword">None</span></span><br><span class="line">        self.val = _val</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># do some intialize if necessary</span></span><br><span class="line">        self.head = Node(<span class="number">0</span>)</span><br><span class="line">        self.tail = self.head</span><br><span class="line">        self.size = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># @param &#123;int&#125; item an integer</span></span><br><span class="line">    <span class="comment"># @return nothing</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enqueue</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="comment"># Write yout code here</span></span><br><span class="line">        self.tail.next = Node(item)</span><br><span class="line">        self.tail = self.tail.next</span><br><span class="line">        self.size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># @return an integer</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dequeue</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># Write your code here</span></span><br><span class="line">        res = self.head.next.val</span><br><span class="line">        self.head.next = self.head.next.next</span><br><span class="line">        self.size -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self.size == <span class="number">0</span>:</span><br><span class="line">            self.tail = self.head</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>实现一个队列的操作</p>
</blockquote>
<p><strong>样例</strong><br><figure class="highlight python"><table><tr><td cla]]>
    </summary>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="Queue" scheme="http://yoursite.com/tags/Queue/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[225 Implement Stack by Two Queues]]></title>
    <link href="http://yoursite.com/2016/06/27/225-Implement-Stack-by-Two-Queues/"/>
    <id>http://yoursite.com/2016/06/27/225-Implement-Stack-by-Two-Queues/</id>
    <published>2016-06-28T01:06:49.000Z</published>
    <updated>2016-06-28T08:07:35.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>利用两个队列来实现一个栈的功能</p>
</blockquote>
<p><strong>样例</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">push(1)&#10;pop()&#10;push(2)&#10;isEmpty() // return false&#10;top() // return 2&#10;pop()&#10;isEmpty() // return true</span><br></pre></td></tr></table></figure></p>
<h3 id="解题思路">解题思路</h3><ul>
<li>使用两个queue<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q1 = []       q2 = []&#10;push 1&#10;q1 = [1]      q2 = []&#10;q1 = []       q2 = [1] &#10;push 2&#10;q1 = [2]      q2 = [1]&#10;q1 = [2, 1]   q2 = []&#10;q1 = []       q2 = [2, 1]&#10;push 3&#10;q1 = [3]       q2 = [2, 1]&#10;q1 = [3, 2, 1] q2 = []&#10;q1 = []        q2 = [3, 2, 1]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        initialize your data structure here.</span><br><span class="line">        """</span></span><br><span class="line">        self.q1 = Queue.Queue()</span><br><span class="line">        self.q2 = Queue.Queue()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type x: int</span><br><span class="line">        :rtype: nothing</span><br><span class="line">        """</span></span><br><span class="line">        self.q1.put(x)</span><br><span class="line">        <span class="keyword">while</span> self.q2.qsize() != <span class="number">0</span>:</span><br><span class="line">            self.q1.put(self.q2.get())</span><br><span class="line">        <span class="keyword">while</span> self.q1.qsize() != <span class="number">0</span>:</span><br><span class="line">            self.q2.put(self.q1.get())</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :rtype: nothing</span><br><span class="line">        """</span></span><br><span class="line">        self.q2.get()</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :rtype: int</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.q2.queue[<span class="number">0</span>]</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">empty</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :rtype: bool</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.q2.qsize() == <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>利用两个队列来实现一个栈的功能</p>
</blockquote>
<p><strong>样例</strong><br><figure class="highlight plain"><table><tr><t]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Queue" scheme="http://yoursite.com/tags/Queue/"/>
    
      <category term="Stack" scheme="http://yoursite.com/tags/Stack/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[495 Implement Stack]]></title>
    <link href="http://yoursite.com/2016/06/27/495-Implement-Stack/"/>
    <id>http://yoursite.com/2016/06/27/495-Implement-Stack/</id>
    <published>2016-06-28T00:41:06.000Z</published>
    <updated>2016-06-28T07:41:43.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>实现一个栈，可以使用除了栈之外的数据结构</p>
</blockquote>
<p><strong>样例</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">push(1)&#10;pop()&#10;push(2)&#10;top()  // return 2&#10;pop()&#10;isEmpty() // return true&#10;push(3)&#10;isEmpty() // return false</span><br></pre></td></tr></table></figure></p>
<h3 id="解题思路">解题思路</h3><ul>
<li>使用python list实现stack数据结构</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>:</span></span><br><span class="line">    <span class="comment"># initialize your data structure here.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.items = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># @param x, an integer, push a new item into the stack</span></span><br><span class="line">    <span class="comment"># @return nothing</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="comment"># Write your code here</span></span><br><span class="line">        self.items.append(x)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># @return nothing, pop the top of the stack</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># Write your code here</span></span><br><span class="line">        self.items.pop()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># @return an integer, return the top of the stack</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># Write your code here</span></span><br><span class="line">        <span class="keyword">return</span> self.items[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># @return a boolean, check the stack is empty or not.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># Write your code here</span></span><br><span class="line">        <span class="keyword">return</span> len(self.items) == <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>实现一个栈，可以使用除了栈之外的数据结构</p>
</blockquote>
<p><strong>样例</strong><br><figure class="highlight plain"><table><]]>
    </summary>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="Stack" scheme="http://yoursite.com/tags/Stack/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[263 Ugly Number]]></title>
    <link href="http://yoursite.com/2016/06/26/263-Ugly-Number/"/>
    <id>http://yoursite.com/2016/06/26/263-Ugly-Number/</id>
    <published>2016-06-26T23:09:58.000Z</published>
    <updated>2016-06-27T06:10:43.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>写一个程序来检测一个整数是不是丑数。<br>丑数的定义是，只包含质因子 2, 3, 5的正整数。比如 6, 8 就是丑数，但是 14 不是丑数以为他包含了质因子 7。<br><strong>注意事项</strong><br>可以认为 1 是一个特殊的丑数。</p>
</blockquote>
<p><strong>样例</strong><br>给出 num = 8，返回 true。<br>给出 num = 14，返回 false。</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>由于本题只需要判断num是不是丑数，根据丑数的定义：<ul>
<li>如果num对2取模等于0，则num除以2</li>
<li>如果num对3取模等于0，则num除以3</li>
<li>如果num对5取模等于0，则num除以5</li>
</ul>
</li>
<li>如果最后num等于1则是丑数，否则不是</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isUgly</span><span class="params">(self, num)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type num: int</span><br><span class="line">        :rtype: bool</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> num &lt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">while</span> num % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                num /= <span class="number">2</span></span><br><span class="line">            <span class="keyword">while</span> num % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">                num /= <span class="number">3</span></span><br><span class="line">            <span class="keyword">while</span> num % <span class="number">5</span> == <span class="number">0</span>:</span><br><span class="line">                num /= <span class="number">5</span></span><br><span class="line">            <span class="keyword">return</span> num == <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>写一个程序来检测一个整数是不是丑数。<br>丑数的定义是，只包含质因子 2, 3, 5的正整数。比如 6, 8 就是丑数，但是 14 不是丑数以为他包含了质因子 7。<br><strong>注意事项</stro]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[232 Implement Queue using Stacks]]></title>
    <link href="http://yoursite.com/2016/06/26/232-Implement-Queue-using-Stacks/"/>
    <id>http://yoursite.com/2016/06/26/232-Implement-Queue-using-Stacks/</id>
    <published>2016-06-26T17:12:41.000Z</published>
    <updated>2016-06-27T00:13:12.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>正如标题所述，你需要使用两个栈来实现队列的一些操作。<br>队列应支持push(element)，pop() 和 top()，其中pop是弹出队列中的第一个(最前面的)元素。<br>pop和top方法都应该返回第一个元素的值。</p>
</blockquote>
<p><strong>样例</strong><br>比如push(1), pop(), push(2), push(3), top(), pop()，<br>你应该返回1，2和2</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>使用两个stack就可以实现queue的API</li>
<li>每次push就push到stack1</li>
<li>每次pop或者top，则看stack2是否为空，若为空，则将stack1中的元素pop出来并push到stack2<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">stack1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">pop <span class="number">3</span></span><br><span class="line">stack2 = [<span class="number">3</span>]</span><br><span class="line">pop <span class="number">2</span></span><br><span class="line">stack2 = [<span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line">pop <span class="number">1</span></span><br><span class="line">stack2 = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>] <span class="comment">#真正的pop/top操作在stack2上执行</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        initialize your data structure here.</span><br><span class="line">        """</span></span><br><span class="line">        self.stack1 = []</span><br><span class="line">        self.stack2 = []</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type x: int</span><br><span class="line">        :rtype: nothing</span><br><span class="line">        """</span></span><br><span class="line">        self.stack1.append(x)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :rtype: nothing</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.stack2:</span><br><span class="line">            <span class="keyword">while</span> self.stack1:</span><br><span class="line">                self.stack2.append(self.stack1.pop())</span><br><span class="line">        <span class="keyword">return</span> self.stack2.pop()</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">peek</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :rtype: int</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.stack2:</span><br><span class="line">            <span class="keyword">while</span> self.stack1:</span><br><span class="line">                self.stack2.append(self.stack1.pop())</span><br><span class="line">        <span class="keyword">return</span> self.stack2[-<span class="number">1</span>]</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">empty</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :rtype: bool</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">return</span> len(self.stack1) == <span class="number">0</span> <span class="keyword">and</span> len(self.stack2) == <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>正如标题所述，你需要使用两个栈来实现队列的一些操作。<br>队列应支持push(element)，pop() 和 top()，其中pop是弹出队列中的第一个(最前面的)元素。<br>pop和top方法都应该返回]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Queue" scheme="http://yoursite.com/tags/Queue/"/>
    
      <category term="Stack" scheme="http://yoursite.com/tags/Stack/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
</feed>
