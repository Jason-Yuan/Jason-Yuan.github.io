<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Code Chemistry]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-07-26T08:56:53.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Jason Yuan]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[211 Add and Search Word - Data structure design]]></title>
    <link href="http://yoursite.com/2016/07/25/211-Add-and-Search-Word-Data-structure-design/"/>
    <id>http://yoursite.com/2016/07/25/211-Add-and-Search-Word-Data-structure-design/</id>
    <published>2016-07-26T01:56:23.000Z</published>
    <updated>2016-07-26T08:56:53.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>设计一个包含下面两个操作的数据结构：addWord(word), search(word)<br>addWord(word)会在数据结构中添加一个单词。而search(word)则支持普通的单词查询或是只包含. 和a-z的简易正则表达式的查询。一个 . 可以代表一个任何的字母。</p>
</blockquote>
<p><strong>样例</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addWord(&#34;bad&#34;)&#10;addWord(&#34;dad&#34;)&#10;addWord(&#34;mad&#34;)&#10;search(&#34;pad&#34;)  // return false&#10;search(&#34;bad&#34;)  // return true&#10;search(&#34;.ad&#34;)  // return true&#10;search(&#34;b..&#34;)  // return true</span><br></pre></td></tr></table></figure></p>
<h3 id="解题思路">解题思路</h3><ul>
<li>本题跟Implement Trie十分相似，同样需要使用字典树</li>
<li>由于本题里中’.’可以代替任意字符，所以当某一个字符是’.’，就需要查找所有的子树，只要有一个最终能够存在，就返回True</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        Initialize your data structure here.</span><br><span class="line">        """</span></span><br><span class="line">        self.children = &#123;&#125;</span><br><span class="line">        self.IsWord = <span class="keyword">False</span></span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WordDictionary</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        initialize your data structure here.</span><br><span class="line">        """</span></span><br><span class="line">        self.root = TrieNode()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addWord</span><span class="params">(self, word)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        Adds a word into the data structure.</span><br><span class="line">        :type word: str</span><br><span class="line">        :rtype: void</span><br><span class="line">        """</span></span><br><span class="line">        node = self.root</span><br><span class="line">        <span class="keyword">for</span> letter <span class="keyword">in</span> word:</span><br><span class="line">            child = node.children.get(letter)</span><br><span class="line">            <span class="keyword">if</span> child <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                child = TrieNode()</span><br><span class="line">                node.children[letter] = child</span><br><span class="line">            node = child</span><br><span class="line">        node.IsWord = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, word)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        Returns if the word is in the data structure. A word could</span><br><span class="line">        contain the dot character '.' to represent any one letter.</span><br><span class="line">        :type word: str</span><br><span class="line">        :rtype: bool</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.find(self.root, word)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, node, word)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> word == <span class="string">""</span>:</span><br><span class="line">            <span class="keyword">return</span> node.IsWord</span><br><span class="line">        <span class="keyword">if</span> word[<span class="number">0</span>] == <span class="string">"."</span>:</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> node.children:</span><br><span class="line">                <span class="keyword">if</span> self.find(node.children[x], word[<span class="number">1</span>:]):</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            child = node.children.get(word[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">if</span> child:</span><br><span class="line">                <span class="keyword">return</span> self.find(child, word[<span class="number">1</span>:])</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>设计一个包含下面两个操作的数据结构：addWord(word), search(word)<br>addWord(word)会在数据结构中添加一个单词。而search(word)则支持普通的单词查询或是只包含.]]>
    </summary>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Trie" scheme="http://yoursite.com/tags/Trie/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[79 Word Search]]></title>
    <link href="http://yoursite.com/2016/07/25/79-Word-Search/"/>
    <id>http://yoursite.com/2016/07/25/79-Word-Search/</id>
    <published>2016-07-25T22:24:39.000Z</published>
    <updated>2016-07-26T05:25:17.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出一个二维的字母板和一个单词，寻找字母板网格中是否存在这个单词。<br>单词可以由按顺序的相邻单元的字母组成，其中相邻单元指的是水平或者垂直方向相邻。每个单元中的字母最多只能使用一次。</p>
</blockquote>
<p><strong>样例</strong><br>给出board =<br>[<br>  “ABCE”,<br>  “SFCS”,<br>  “ADEE”<br>]<br>word = <strong>“ABCCED”</strong>， -&gt;返回 true,<br>word = <strong>“SEE”</strong>，-&gt; 返回 true,<br>word = <strong>“ABCB”</strong>， -&gt; 返回 false.</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>遍历二维数组的每一个点，当作起始点做DFS</li>
<li>在进入DFS后，对于访问过的节点标记为None，以表明访问过</li>
<li>关于回溯要注意的是，如果返回True其实就结束了，以为已经找到答案了，也不需要回溯。如果不返回True，而是改变一个全局变量self.res的值为True，会超时</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.word = <span class="string">""</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exist</span><span class="params">(self, board, word)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type board: List[List[str]]</span><br><span class="line">        :type word: str</span><br><span class="line">        :rtype: bool</span><br><span class="line">        """</span></span><br><span class="line">        self.word = word</span><br><span class="line">        <span class="keyword">for</span> row_num <span class="keyword">in</span> range(len(board)):</span><br><span class="line">            <span class="keyword">for</span> col_num <span class="keyword">in</span> range(len(board[<span class="number">0</span>])):</span><br><span class="line">                <span class="keyword">if</span> self.search(board, row_num, col_num, <span class="number">0</span>):</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, board, x, y, pos)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.word[pos] == board[x][y]:</span><br><span class="line">            <span class="keyword">if</span> pos == len(self.word) - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = board[x][y]</span><br><span class="line">                board[x][y] = <span class="keyword">None</span></span><br><span class="line">                <span class="keyword">if</span> x + <span class="number">1</span> &lt; len(board) <span class="keyword">and</span> self.search(board, x + <span class="number">1</span>, y, pos + <span class="number">1</span>):</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">                <span class="keyword">if</span> x - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> self.search(board, x - <span class="number">1</span>, y, pos + <span class="number">1</span>):</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">                <span class="keyword">if</span> y + <span class="number">1</span> &lt; len(board[<span class="number">0</span>]) <span class="keyword">and</span> self.search(board, x, y + <span class="number">1</span>, pos + <span class="number">1</span>):</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">                <span class="keyword">if</span> y - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> self.search(board, x, y - <span class="number">1</span>, pos + <span class="number">1</span>):</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">                board[x][y] = temp</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出一个二维的字母板和一个单词，寻找字母板网格中是否存在这个单词。<br>单词可以由按顺序的相邻单元的字母组成，其中相邻单元指的是水平或者垂直方向相邻。每个单元中的字母最多只能使用一次。</p>
</block]]>
    </summary>
    
      <category term="Back Tracking" scheme="http://yoursite.com/tags/Back-Tracking/"/>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
      <category term="Trie" scheme="http://yoursite.com/tags/Trie/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[212 Word Search II]]></title>
    <link href="http://yoursite.com/2016/07/21/212-Word-Search-II/"/>
    <id>http://yoursite.com/2016/07/21/212-Word-Search-II/</id>
    <published>2016-07-22T03:56:33.000Z</published>
    <updated>2016-07-26T05:13:39.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出一个由小写字母组成的矩阵和一个字典。找出所有同时在字典和矩阵中出现的单词。一个单词可以从矩阵中的任意位置开始，可以向左/右/上/下四个相邻方向移动。</p>
</blockquote>
<p><strong>样例</strong><br>给出矩阵：<br>doaf<br>agai<br>dcan<br>和字典：<br>{“dog”, “dad”, “dgdg”, “can”, “again”}<br>返回 {“dog”, “dad”, “can”, “again”}</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>最直接但是会超时的方法 - 先把字典做成hashMap，对每一个点DFS，每增加一个字符就去hashMap查找是否存在。一共m*n个点，每次DFS复杂度是O(m*n)，所以总的时间复杂度是O(m*n * m*n)</li>
<li>可行解 - 把给出的字典变成Trie树，Trie树可以检查前缀，hashMap做不到。检查前缀的时候，如果发现某个前缀不存在，就可以不用继续DFS了，相当于剪枝</li>
<li>注意：当不必要的check增多时，会导致TLE<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 超时</span></span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt;= len(board) <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> y &gt;= len(board[<span class="number">0</span>]) <span class="keyword">or</span> board[x][y] == <span class="number">0</span> <span class="keyword">or</span> cur_node == <span class="keyword">None</span>:</span><br><span class="line"><span class="comment"># 免去两个不必要的check，不超时</span></span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt;= len(board) <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> y &gt;= len(board[<span class="number">0</span>]):</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        Initialize your data structure here.</span><br><span class="line">        """</span></span><br><span class="line">        self.children = &#123;&#125;</span><br><span class="line">        self.IsWord = <span class="keyword">False</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.root = TrieNode()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, word)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        Inserts a word into the trie.</span><br><span class="line">        :type word: str</span><br><span class="line">        :rtype: void</span><br><span class="line">        """</span></span><br><span class="line">        node = self.root</span><br><span class="line">        <span class="keyword">for</span> letter <span class="keyword">in</span> word:</span><br><span class="line">            child = node.children.get(letter)</span><br><span class="line">            <span class="keyword">if</span> child <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                child = TrieNode()</span><br><span class="line">                node.children[letter] = child</span><br><span class="line">            node = child</span><br><span class="line">        node.IsWord = <span class="keyword">True</span></span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.result = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findWords</span><span class="params">(self, board, words)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type board: List[List[str]]</span><br><span class="line">        :type words: List[str]</span><br><span class="line">        :rtype: List[str]</span><br><span class="line">        """</span></span><br><span class="line">        trie = Trie()</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">            trie.insert(word)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> row_num <span class="keyword">in</span> range(len(board)):</span><br><span class="line">            <span class="keyword">for</span> col_num <span class="keyword">in</span> range(len(board[<span class="number">0</span>])):</span><br><span class="line">                self.search(board, row_num, col_num, trie.root, <span class="string">""</span>)</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> self.result</span><br><span class="line">                </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, board, x, y, cur_node, word)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cur_node.IsWord:</span><br><span class="line">            self.result.append(word)</span><br><span class="line">            cur_node.IsWord = <span class="keyword">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (x &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt;= len(board) <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> y &gt;= len(board[<span class="number">0</span>])):</span><br><span class="line">            temp = board[x][y]</span><br><span class="line">            cur_node = cur_node.children.get(temp)</span><br><span class="line">            <span class="keyword">if</span> cur_node:</span><br><span class="line">                board[x][y] = <span class="string">"#"</span></span><br><span class="line">                self.search(board, x+<span class="number">1</span>, y, cur_node, word+temp)</span><br><span class="line">                self.search(board, x-<span class="number">1</span>, y, cur_node, word+temp)</span><br><span class="line">                self.search(board, x, y+<span class="number">1</span>, cur_node, word+temp)</span><br><span class="line">                self.search(board, x, y-<span class="number">1</span>, cur_node, word+temp)</span><br><span class="line">                board[x][y] = temp</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出一个由小写字母组成的矩阵和一个字典。找出所有同时在字典和矩阵中出现的单词。一个单词可以从矩阵中的任意位置开始，可以向左/右/上/下四个相邻方向移动。</p>
</blockquote>
<p><strong]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Trie" scheme="http://yoursite.com/tags/Trie/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[208 Implement Trie (Prefix Tree)]]></title>
    <link href="http://yoursite.com/2016/07/21/208-Implement-Trie-Prefix-Tree/"/>
    <id>http://yoursite.com/2016/07/21/208-Implement-Trie-Prefix-Tree/</id>
    <published>2016-07-21T22:56:04.000Z</published>
    <updated>2016-07-22T05:56:38.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>实现一个 Trie，包含 insert, search, 和 startsWith 这三个方法。</p>
</blockquote>
<p><strong>样例</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">insert("lintcode")</span><br><span class="line">search("code") # return false</span><br><span class="line">startsWith("lint") # return true</span><br><span class="line">startsWith("linterror") # return false</span><br><span class="line">insert("linterror")</span><br><span class="line">search("lintcode) # return true</span><br><span class="line">startsWith("linterror") # return true</span><br></pre></td></tr></table></figure></p>
<h3 id="解题思路">解题思路</h3><ul>
<li>首先，定义一个trie树节点，包含当前的char和isWord布尔值</li>
<li>注意根节点不包含字符，每个节点最多有26叉</li>
<li>Insert - 即遍历单词的每个字符，逐层查找，有则继续，没有就创建一个新的TrieNode，左后一位<code>IsWord = True</code></li>
<li>Search - 同理，遍历单词每个字符，逐层查找，没有立即返回False，找到最后一个TrieNode，则返回 TrieNode.IsWord</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        Initialize your data structure here.</span><br><span class="line">        """</span></span><br><span class="line">        self.children = &#123;&#125;</span><br><span class="line">        self.IsWord = <span class="keyword">False</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.root = TrieNode()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, word)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        Inserts a word into the trie.</span><br><span class="line">        :type word: str</span><br><span class="line">        :rtype: void</span><br><span class="line">        """</span></span><br><span class="line">        node = self.root</span><br><span class="line">        <span class="keyword">for</span> letter <span class="keyword">in</span> word:</span><br><span class="line">            child = node.children.get(letter)</span><br><span class="line">            <span class="keyword">if</span> child <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                child = TrieNode()</span><br><span class="line">                node.children[letter] = child</span><br><span class="line">            node = child</span><br><span class="line">        node.IsWord = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, word)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        Returns if the word is in the trie.</span><br><span class="line">        :type word: str</span><br><span class="line">        :rtype: bool</span><br><span class="line">        """</span></span><br><span class="line">        node = self.root</span><br><span class="line">        <span class="keyword">for</span> letter <span class="keyword">in</span> word:</span><br><span class="line">            node = node.children.get(letter)</span><br><span class="line">            <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> node.IsWord</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">startsWith</span><span class="params">(self, prefix)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        Returns if there is any word in the trie</span><br><span class="line">        that starts with the given prefix.</span><br><span class="line">        :type prefix: str</span><br><span class="line">        :rtype: bool</span><br><span class="line">        """</span></span><br><span class="line">        node = self.root</span><br><span class="line">        <span class="keyword">for</span> letter <span class="keyword">in</span> prefix:</span><br><span class="line">            node = node.children.get(letter)</span><br><span class="line">            <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your Trie object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># trie = Trie()</span></span><br><span class="line"><span class="comment"># trie.insert("somestring")</span></span><br><span class="line"><span class="comment"># trie.search("key")</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>实现一个 Trie，包含 insert, search, 和 startsWith 这三个方法。</p>
</blockquote>
<p><strong>样例</strong><br><figure clas]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
      <category term="Trie" scheme="http://yoursite.com/tags/Trie/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[261 Graph Valid Tree]]></title>
    <link href="http://yoursite.com/2016/07/20/261-Graph-Valid-Tree/"/>
    <id>http://yoursite.com/2016/07/20/261-Graph-Valid-Tree/</id>
    <published>2016-07-21T01:46:23.000Z</published>
    <updated>2016-07-21T08:51:01.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出 n 个节点，标号分别从 0 到 n - 1 并且给出一个 无向 边的列表 (给出每条边的两个顶点), 写一个函数去判断这张｀无向｀图是否是一棵树</p>
</blockquote>
<p><strong>样例</strong><br>给出n = 5 并且 edges = [[0, 1], [0, 2], [0, 3], [1, 4]], 返回 true.<br>给出n = 5 并且 edges = [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]], 返回 false.</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>判断输入的边，是否能构成树看两点：<ul>
<li>是否有环，有环则不是树</li>
<li>是否所有点最终都相连，有不相连则不是树</li>
</ul>
</li>
<li>集合合并问题，使用并查集<ul>
<li>如果合并的时候发现两个点的father一样，则有环</li>
<li>最终统计father的个数，超过一个说明没有全部相连</li>
</ul>
</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        self.father = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            self.father[i] = i </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compressed_find</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        parent = self.father[x]</span><br><span class="line">        <span class="keyword">while</span> parent != self.father[parent]:</span><br><span class="line">            parent = self.father[parent]</span><br><span class="line"></span><br><span class="line">        temp = -<span class="number">1</span>;</span><br><span class="line">        fa = self.father[x]</span><br><span class="line">        <span class="keyword">while</span> fa != self.father[fa]:</span><br><span class="line">            temp = self.father[fa]</span><br><span class="line">            self.father[fa] = parent</span><br><span class="line">            fa = temp</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> parent</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">            fa_x = self.compressed_find(x)</span><br><span class="line">            fa_y = self.compressed_find(y)</span><br><span class="line">            <span class="keyword">if</span> fa_x != fa_y:</span><br><span class="line">                self.father[fa_x] = fa_y</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param &#123;int&#125; n an integer</span></span><br><span class="line">    <span class="comment"># @param &#123;int[][]&#125; edges a list of undirected edges</span></span><br><span class="line">    <span class="comment"># @return &#123;boolean&#125; true if it's a valid tree, or false</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validTree</span><span class="params">(self, n, edges)</span>:</span></span><br><span class="line">        <span class="comment"># Write your code here</span></span><br><span class="line">        <span class="keyword">if</span> len(edges) != n - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            </span><br><span class="line">        uf = UnionFind(n)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> edge <span class="keyword">in</span> edges:</span><br><span class="line">            pointA, pointB = edge[<span class="number">0</span>], edge[<span class="number">1</span>]</span><br><span class="line">            fpointA = uf.compressed_find(pointA)</span><br><span class="line">            fpointB = uf.compressed_find(pointB)</span><br><span class="line">            <span class="keyword">if</span> fpointA == fpointB:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                uf.union(pointA, pointB)</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出 n 个节点，标号分别从 0 到 n - 1 并且给出一个 无向 边的列表 (给出每条边的两个顶点), 写一个函数去判断这张｀无向｀图是否是一棵树</p>
</blockquote>
<p><strong>]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Union Find" scheme="http://yoursite.com/tags/Union-Find/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[130 Surrounded Regions]]></title>
    <link href="http://yoursite.com/2016/07/20/130-Surrounded-Regions/"/>
    <id>http://yoursite.com/2016/07/20/130-Surrounded-Regions/</id>
    <published>2016-07-21T00:33:02.000Z</published>
    <updated>2016-07-21T07:33:33.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给一个二维的矩阵，包含 ‘X’ 和 ‘O’, 找到所有被 ‘X’ 围绕的区域，并用 ‘X’ 填充满。</p>
</blockquote>
<p><strong>样例</strong><br>给出二维矩阵：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X X X X&#10;X O O X&#10;X X O X&#10;X O X X</span><br></pre></td></tr></table></figure></p>
<p>把被 ‘X’ 围绕的区域填充之后变为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X X X X&#10;X X X X&#10;X X X X&#10;X O X X</span><br></pre></td></tr></table></figure></p>
<h3 id="解题思路">解题思路</h3><ul>
<li>通过分析可知，就是要将所有以O组成、但没有连通到网格边缘的区域变为X。</li>
<li>所以可以沿着四个边找O，找到每一个O就把相连的都变成Y，因为 他们都是要保留的，最后遍历二维数组，遇到O变成X，遇到Y变回O</li>
<li>具体方法可以采用BFS, DFS, Union Find，但是DFS大数据会爆栈，DFS最快</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Queue</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(self, board)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type board: List[List[str]]</span><br><span class="line">        :rtype: void Do not return anything, modify board in-place instead.</span><br><span class="line">        """</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fill</span><span class="params">(x, y)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt; height-<span class="number">1</span> <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> y &gt; width-<span class="number">1</span> <span class="keyword">or</span> board[x][y] != <span class="string">"O"</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            MyQueue.put((x, y))</span><br><span class="line">            board[x][y] = <span class="string">"D"</span></span><br><span class="line">            </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">(x, y)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> board[x][y] == <span class="string">"O"</span>:</span><br><span class="line">                fill(x, y)</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">not</span> MyQueue.empty():</span><br><span class="line">                current = MyQueue.get()</span><br><span class="line">                i, j = current[<span class="number">0</span>], current[<span class="number">1</span>]</span><br><span class="line">                fill(i+<span class="number">1</span>, j)</span><br><span class="line">                fill(i-<span class="number">1</span>, j)</span><br><span class="line">                fill(i, j+<span class="number">1</span>)</span><br><span class="line">                fill(i, j-<span class="number">1</span>)</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">if</span> len(board) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        height, width, MyQueue = len(board), len(board[<span class="number">0</span>]), Queue.Queue()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(width):</span><br><span class="line">            bfs(<span class="number">0</span>, i)</span><br><span class="line">            bfs(height - <span class="number">1</span>, i)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, height - <span class="number">1</span>):</span><br><span class="line">            bfs(j, <span class="number">0</span>)</span><br><span class="line">            bfs(j, width - <span class="number">1</span>)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(height):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(width):</span><br><span class="line">                <span class="keyword">if</span> board[i][j] == <span class="string">"D"</span>:</span><br><span class="line">                    board[i][j] = <span class="string">"O"</span></span><br><span class="line">                <span class="keyword">elif</span> board[i][j] == <span class="string">"O"</span>:</span><br><span class="line">                    board[i][j] = <span class="string">"X"</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给一个二维的矩阵，包含 ‘X’ 和 ‘O’, 找到所有被 ‘X’ 围绕的区域，并用 ‘X’ 填充满。</p>
</blockquote>
<p><strong>样例</strong><br>给出二维矩阵：<br]]>
    </summary>
    
      <category term="BFS" scheme="http://yoursite.com/tags/BFS/"/>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Union Find" scheme="http://yoursite.com/tags/Union-Find/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[305 Number of Islands II]]></title>
    <link href="http://yoursite.com/2016/07/19/305-Number-of-Islands-II/"/>
    <id>http://yoursite.com/2016/07/19/305-Number-of-Islands-II/</id>
    <published>2016-07-20T00:26:41.000Z</published>
    <updated>2016-07-20T07:27:49.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定 n，m，分别代表一个2D矩阵的行数和列数，同时，给定一个大小为 k 的二元数组A。起初，2D矩阵的行数和列数均为 0，即该矩阵中只有海洋。二元数组有 k 个运算符，每个运算符有 2 个整数 A[i].x, A[i].y，你可通过改变矩阵网格中的A[i].x]，[A[i].y] 来将其由海洋改为岛屿。请在每次运算后，返回矩阵中岛屿的数量。</p>
</blockquote>
<p><strong>样例</strong><br>给定 n = 3, m = 3， 二元数组 A =[(0,0),(0,1),(2,2),(2,1)].<br>返回 [1,1,2,2].</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>作为Number of Islands的follow up，可以同样使用DFS或者BFS，每次加入新的点就再全部遍历一次二维数组 - 每次遍历O(m<em>n)，如果一共k次操作，总的时间复杂度为O(k</em>m*n)</li>
<li>由于每次操作只是把一块海洋变成陆地，它影响的点只可能是上下左右四个位置，如果是1，将它们合并。</li>
<li>集合合并 - 使用并查集，换句话说只有可能改变四个点的father</li>
<li>初始化时，每个点的father是自己的ID = x*列数 + y</li>
<li>全局变量 count = 0, 每次增加一个点 count += 1</li>
<li>考虑上下左右四个位置是否能够合并，每次合并 count -= 1</li>
<li>最终时间复杂度降为O(k*4) ~ O(k)</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a point.</span></span><br><span class="line"><span class="comment"># class Point:</span></span><br><span class="line"><span class="comment">#     def __init__(self, a=0, b=0):</span></span><br><span class="line"><span class="comment">#         self.x = a</span></span><br><span class="line"><span class="comment">#         self.y = b</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, m, n)</span>:</span></span><br><span class="line">        self.father = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">                id = self.converttoId(i,j,m);</span><br><span class="line">                self.father[id] = id </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">converttoId</span><span class="params">(self, x, y, m)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x*m + y</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, x)</span>:</span></span><br><span class="line">            parent = self.father[x]</span><br><span class="line">            <span class="keyword">while</span> parent != self.father[parent]:</span><br><span class="line">                parent = self.father[parent]</span><br><span class="line">            <span class="keyword">return</span> parent</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compressed_find</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        parent = self.father[x]</span><br><span class="line">        <span class="keyword">while</span> parent != self.father[parent]:</span><br><span class="line">            parent = self.father[parent]</span><br><span class="line"></span><br><span class="line">        temp = -<span class="number">1</span>;</span><br><span class="line">        fa = self.father[x]</span><br><span class="line">        <span class="keyword">while</span> fa != self.father[fa]:</span><br><span class="line">            temp = self.father[fa]</span><br><span class="line">            self.father[fa] = parent</span><br><span class="line">            fa = temp</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> parent</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">            fa_x = self.find(x)</span><br><span class="line">            fa_y = self.find(y)</span><br><span class="line">            <span class="keyword">if</span> fa_x != fa_y:</span><br><span class="line">                self.father[fa_x] = fa_y</span><br><span class="line">                </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param &#123;int&#125; n an integer</span></span><br><span class="line">    <span class="comment"># @param &#123;int&#125; m an integer</span></span><br><span class="line">    <span class="comment"># @param &#123;Pint[]&#125; operators an array of point</span></span><br><span class="line">    <span class="comment"># @return &#123;int[]&#125; an integer array</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numIslands2</span><span class="params">(self, n, m, operators)</span>:</span></span><br><span class="line">        dx = [<span class="number">0</span>,-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">        dy = [<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">        island = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(m)] <span class="keyword">for</span> j <span class="keyword">in</span> range(n)]</span><br><span class="line">        ans = []</span><br><span class="line">        uf = UnionFind(n, m)</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> operators != <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(operators)):</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                x = operators[i].x</span><br><span class="line">                y = operators[i].y</span><br><span class="line">                <span class="keyword">if</span> island[x][y] != <span class="number">1</span>:</span><br><span class="line">                    island[x][y]  = <span class="number">1</span></span><br><span class="line">                    id = uf.converttoId(x, y, m)</span><br><span class="line">                    <span class="comment"># 计算上下左右四个点的位置</span></span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">                        nx = x + dx[j]</span><br><span class="line">                        ny = y + dy[j]</span><br><span class="line">                        <span class="keyword">if</span> <span class="number">0</span> &lt;= nx <span class="keyword">and</span> nx &lt; n <span class="keyword">and</span> <span class="number">0</span> &lt;= ny <span class="keyword">and</span> ny &lt; m <span class="keyword">and</span> island[nx][ny] == <span class="number">1</span>:</span><br><span class="line">                            nid = uf.converttoId(nx, ny, m)</span><br><span class="line">                            fa = uf.find(id)</span><br><span class="line">                            nfa = uf.find(nid)</span><br><span class="line">                            <span class="keyword">if</span> fa != nfa:</span><br><span class="line">                                count -= <span class="number">1</span></span><br><span class="line">                                uf.union(id, nid)</span><br><span class="line"></span><br><span class="line">                ans.append(count)</span><br><span class="line">            <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定 n，m，分别代表一个2D矩阵的行数和列数，同时，给定一个大小为 k 的二元数组A。起初，2D矩阵的行数和列数均为 0，即该矩阵中只有海洋。二元数组有 k 个运算符，每个运算符有 2 个整数 A[i].x,]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Union Find" scheme="http://yoursite.com/tags/Union-Find/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[200 Number of Islands]]></title>
    <link href="http://yoursite.com/2016/07/19/200-Number-of-Islands/"/>
    <id>http://yoursite.com/2016/07/19/200-Number-of-Islands/</id>
    <published>2016-07-20T00:03:43.000Z</published>
    <updated>2016-07-20T07:04:29.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给一个01矩阵，求不同的岛屿的个数。<br>0代表海，1代表岛，如果两个1相邻，那么这两个1属于同一个岛。我们只考虑上下左右为相邻。</p>
</blockquote>
<p><strong>样例</strong><br>在矩阵：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#10;  [1, 1, 0, 0, 0],&#10;  [0, 1, 0, 0, 1],&#10;  [0, 0, 0, 1, 1],&#10;  [0, 0, 0, 0, 0],&#10;  [0, 0, 0, 0, 1]&#10;]</span><br></pre></td></tr></table></figure></p>
<p>中有 3 个岛.</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>本题就是无向图中求连通块的二维表示，所以同样可以采用DFS解决。使用Union Find大材小用了</li>
<li>设计一个removeIsland函数，每次遇到1就DFS进行查找把上下左右相邻的1都变成0</li>
<li>最后，两层for循环遍历二维数组，遇到1调用removeIsland函数</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.dx = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>]</span><br><span class="line">        self.dy = [<span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">        self.m = <span class="number">0</span></span><br><span class="line">        self.n = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeIsland</span><span class="params">(self, grid, x, y)</span>:</span></span><br><span class="line">        grid[x][y] = <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            nextX = x + self.dx[i]</span><br><span class="line">            nextY = y + self.dy[i]</span><br><span class="line">            <span class="keyword">if</span> nextX &gt;= <span class="number">0</span> <span class="keyword">and</span> nextX &lt; self.n <span class="keyword">and</span> nextY &gt;= <span class="number">0</span> <span class="keyword">and</span> nextY &lt; self.m:</span><br><span class="line">                <span class="keyword">if</span> grid[nextX][nextY] == <span class="string">'1'</span>:</span><br><span class="line">                    self.removeIsland(grid, nextX, nextY)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numIslands</span><span class="params">(self, grid)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type grid: List[List[str]]</span><br><span class="line">        :rtype: int</span><br><span class="line">        """</span></span><br><span class="line">        self.n = len(grid)</span><br><span class="line">        <span class="keyword">if</span> self.n == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        self.m = len(grid[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> self.m == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.m):</span><br><span class="line">                <span class="keyword">if</span> grid[i][j] == <span class="string">'1'</span>:</span><br><span class="line">                    self.removeIsland(grid, i, j)</span><br><span class="line">                    count += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给一个01矩阵，求不同的岛屿的个数。<br>0代表海，1代表岛，如果两个1相邻，那么这两个1属于同一个岛。我们只考虑上下左右为相邻。</p>
</blockquote>
<p><strong>样例</stron]]>
    </summary>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Recursion" scheme="http://yoursite.com/tags/Recursion/"/>
    
      <category term="Union Find" scheme="http://yoursite.com/tags/Union-Find/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[432 Find the Weak Connected Component in the Directed Graph]]></title>
    <link href="http://yoursite.com/2016/07/18/432-Find-the-Weak-Connected-Component-in-the-Directed-Graph/"/>
    <id>http://yoursite.com/2016/07/18/432-Find-the-Weak-Connected-Component-in-the-Directed-Graph/</id>
    <published>2016-07-18T23:03:51.000Z</published>
    <updated>2016-07-19T06:08:34.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>请找出有向图中弱联通分量的数目。图中的每个节点包含其邻居的 1 个标签和1 个列表。 （一个有向图中的相连节点指的是一个包含 2 个通过直接边沿路径相连的顶点的子图。）</p>
</blockquote>
<p><strong>样例</strong><br>给定图:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A-----&#62;B  C&#10; \     |  | &#10;  \    |  |&#10;   \   |  |&#10;    \  v  v&#10;     -&#62;D  E &#60;- F</span><br></pre></td></tr></table></figure></p>
<p>返回 {A,B,D}, {C,E,F}. 图中有 2 个相连要素，即{A,B,D} 和 {C,E,F} 。</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>首先了解有向图中的一个概念<ul>
<li>弱连通块 - 有向图中，A能到B，B不能到A</li>
<li>强连通块 - 有向图中，A能到B，B也能到A</li>
</ul>
</li>
<li><p>本题是使用Union Find的典型题，Union Find(并查集)主要提供以下操作：</p>
<ul>
<li><p>Find - 判断在不在同一个集合中，边查找边路径压缩，均摊时间复杂度O(1)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def compressed_find(self, x):&#10;        parent = father[x]&#10;        while parent != father[parent]:&#10;            parent = father[parent]&#10;&#10;        temp = -1;&#10;        fa = father[x]&#10;        while fa != father[fa]:&#10;            temp = father[fa]&#10;            father[fa] = parent&#10;            fa = temp&#10;&#10;        return parent</span><br></pre></td></tr></table></figure>
</li>
<li><p>Union - 合并两个集合，时间复杂度O(1)</p>
</li>
</ul>
</li>
<li>遍历所有nodes建立hashset，初始化Union Find</li>
<li>遍历第二遍，合并每个node和他们neighbors的father</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a directed graph node</span></span><br><span class="line"><span class="comment"># class DirectedGraphNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.label = x</span></span><br><span class="line"><span class="comment">#         self.neighbors = []</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, hashset)</span>:</span></span><br><span class="line">        self.father = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> hashset:</span><br><span class="line">            self.father[item] = item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        parent = self.father[x]</span><br><span class="line">        <span class="keyword">while</span> parent != self.father[parent]:</span><br><span class="line">            parent = self.father[parent]</span><br><span class="line">        <span class="keyword">return</span> parent</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compressed_find</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        parent = self.father[x]</span><br><span class="line">        <span class="keyword">while</span> parent != self.father[parent]:</span><br><span class="line">            parent = self.father[parent]</span><br><span class="line"></span><br><span class="line">        temp = -<span class="number">1</span>;</span><br><span class="line">        fa = self.father[x]</span><br><span class="line">        <span class="keyword">while</span> fa != self.father[fa]:</span><br><span class="line">            temp = self.father[fa]</span><br><span class="line">            self.father[fa] = parent</span><br><span class="line">            fa = temp</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> parent</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">            fa_x = self.find(x)</span><br><span class="line">            fa_y = self.find(y)</span><br><span class="line">            <span class="keyword">if</span> fa_x != fa_y:</span><br><span class="line">                self.father[fa_x] = fa_y</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param &#123;DirectedGraphNode[]&#125; nodes a array of directed graph node</span></span><br><span class="line">    <span class="comment"># @return &#123;int[][]&#125; a connected set of a directed graph</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connectedSet2</span><span class="params">(self, nodes)</span>:</span></span><br><span class="line">        <span class="comment"># Find all the different nodes in the Graph, store in the hashSet</span></span><br><span class="line">        myHashSet = set()</span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> nodes:</span><br><span class="line">            myHashSet.add(node.label)</span><br><span class="line">            <span class="keyword">for</span> neighbor <span class="keyword">in</span> node.neighbors:</span><br><span class="line">                myHashSet.add(neighbor.label)</span><br><span class="line">                </span><br><span class="line">        <span class="comment"># right now, one node's father is itself</span></span><br><span class="line">        unionFind = UnionFind(myHashSet)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> nodes:</span><br><span class="line">            node_father = unionFind.compressed_find(node.label)</span><br><span class="line">            <span class="keyword">for</span> neighbor <span class="keyword">in</span> node.neighbors:</span><br><span class="line">                neighbor_father = unionFind.compressed_find(neighbor.label)</span><br><span class="line">                <span class="keyword">if</span> node_father != neighbor_father:</span><br><span class="line">	        		unionFind.union(neighbor.label, node.label)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># group the node with same father</span></span><br><span class="line">        resMap = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> nodes:</span><br><span class="line">            father = unionFind.compressed_find(node.label)</span><br><span class="line">            <span class="keyword">if</span> father <span class="keyword">not</span> <span class="keyword">in</span> resMap:</span><br><span class="line">                resMap[father] = [node.label]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> node.label <span class="keyword">not</span> <span class="keyword">in</span> resMap[father]:</span><br><span class="line">                    resMap[father].append(node.label)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># append each group into the result            </span></span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> resMap.iteritems():</span><br><span class="line">            result.append(value)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>请找出有向图中弱联通分量的数目。图中的每个节点包含其邻居的 1 个标签和1 个列表。 （一个有向图中的相连节点指的是一个包含 2 个通过直接边沿路径相连的顶点的子图。）</p>
</blockquote>
<p]]>
    </summary>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="Union Find" scheme="http://yoursite.com/tags/Union-Find/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[11 Container With Most Water]]></title>
    <link href="http://yoursite.com/2016/07/18/11-Container-With-Most-Water/"/>
    <id>http://yoursite.com/2016/07/18/11-Container-With-Most-Water/</id>
    <published>2016-07-18T21:51:40.000Z</published>
    <updated>2016-07-19T04:54:25.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定 <em>n</em> 个非负整数 a1, a2, …, an, 每个数代表了坐标中的一个点 (i, ai)。画 <em>n</em> 条垂直线，使得 <em>i</em> 垂直线的两个端点分别为(i, ai)和(i, 0)。找到两条线，使得其与<em>x</em> 轴共同构成一个容器，以容纳最多水。</p>
</blockquote>
<p><strong>样例</strong><br>给出[1,3,2], 最大的储水面积是2.</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>根据题意，怎么求解容纳水的面积呢？假设有两个点i和j，面积 = min(a[i], a[j]) * (j - i)</li>
<li>首先，维护一个全局变量 - Area</li>
<li>所以每次要移动左右两个高度中较小的那一个，才有可能让面积增大。因为当你移动了较大的那一条边之后，再求两条边的最小值，还是不会超过移动之前的最小值，甚至还有可能会减小</li>
<li>Two Pointers - 对撞型指针</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxArea</span><span class="params">(self, height)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type height: List[int]</span><br><span class="line">        :rtype: int</span><br><span class="line">        """</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> height <span class="keyword">or</span> len(height) &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">            </span><br><span class="line">        left, right = <span class="number">0</span>, len(height) - <span class="number">1</span></span><br><span class="line">        res = min(height[left], height[right]) * (right - left)</span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            <span class="keyword">if</span> height[left] &lt; height[right]:</span><br><span class="line">                res = max(res, height[left] * (right - left))</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res = max(res, height[right] * (right - left))</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定 <em>n</em> 个非负整数 a1, a2, …, an, 每个数代表了坐标中的一个点 (i, ai)。画 <em>n</em> 条垂直线，使得 <em>i</em> 垂直线的两个端点分别为(i, a]]>
    </summary>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Two Pointers" scheme="http://yoursite.com/tags/Two-Pointers/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[382 Triangle Count]]></title>
    <link href="http://yoursite.com/2016/07/17/382-Triangle-Count/"/>
    <id>http://yoursite.com/2016/07/17/382-Triangle-Count/</id>
    <published>2016-07-17T15:37:42.000Z</published>
    <updated>2016-07-17T22:38:43.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个整数数组，在该数组中，寻找三个数，分别代表三角形三条边的长度，问，可以寻找到多少组这样的三个数来组成三角形？</p>
</blockquote>
<p><strong>样例</strong><br>例如，给定数组 S = {3,4,6,7}，返回 3<br>其中我们可以找到的三个三角形为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;3,4,6&#125;&#10;&#123;3,6,7&#125;&#10;&#123;4,6,7&#125;</span><br></pre></td></tr></table></figure></p>
<p>给定数组 S = {4,4,4,4}, 返回 4<br>其中我们可以找到的四个三角形为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;4(1),4(2),4(3)&#125;&#10;&#123;4(1),4(2),4(4)&#125;&#10;&#123;4(1),4(3),4(4)&#125;&#10;&#123;4(2),4(3),4(4)&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="解题思路">解题思路</h3><ul>
<li><p>最原始解法：三层for循环，下面的每层循环终止条件是为了防止重复扫描，因为<code>i = 1, j = 2, k = 3</code> 与 <code>i = 3, j = 2, k = 1</code>等这些都其实是一样的。最后时间复杂度为O(n^3)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for i = 0 ~ n&#10;    for j = 0 ~ i&#10;        for k = 0 ~ j</span><br></pre></td></tr></table></figure>
</li>
<li><p>更优解 - Two Pointers，可以将本题转化为Two Sum II问题。</p>
</li>
<li>因为k &lt; i &lt; j，所以在判断是否能组成三角形的时候，有两个判断可以省略<ul>
<li>S[i] + S[j] &gt; S[k] (可省略)</li>
<li>S[i] + S[k] &gt; S[j] (可省略)</li>
<li>S[j] + S[k] &gt; S[i]</li>
</ul>
</li>
<li>最终,即for i = 0 ~ n，<strong>求在0 ~ i中有多少S[j] + S[k] &gt; target(即S[i])</strong>。时间复杂度从O(n^3) -&gt; O(n^2)</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param S: a list of integers</span></span><br><span class="line">    <span class="comment"># @return: a integer</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">triangleCount</span><span class="params">(self, S)</span>:</span></span><br><span class="line">        <span class="comment"># write your code hereedges = sorted(S, reverse=True)</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> S <span class="keyword">or</span> len(S) &lt; <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> count</span><br><span class="line">        S.sort()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, len(S)):</span><br><span class="line">            longest = S[i]</span><br><span class="line">            left = <span class="number">0</span></span><br><span class="line">            right = i - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> left &lt; right:</span><br><span class="line">                <span class="keyword">if</span> S[left] + S[right] &lt;= longest:</span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> S[left] + S[right] &gt; longest:</span><br><span class="line">                    count += right - left</span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个整数数组，在该数组中，寻找三个数，分别代表三角形三条边的长度，问，可以寻找到多少组这样的三个数来组成三角形？</p>
</blockquote>
<p><strong>样例</strong><br>例如]]>
    </summary>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="Two Pointers" scheme="http://yoursite.com/tags/Two-Pointers/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[443 Two Sum II]]></title>
    <link href="http://yoursite.com/2016/07/17/443-Two-Sum-II/"/>
    <id>http://yoursite.com/2016/07/17/443-Two-Sum-II/</id>
    <published>2016-07-17T14:50:08.000Z</published>
    <updated>2016-07-17T21:54:17.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给一组整数，问能找出多少对整数，他们的和大于一个给定的目标值。</p>
</blockquote>
<p><strong>样例</strong><br>对于 numbers = [2, 7, 11, 15], target = 24 的情况，返回 1。因为只有11 + 15可以大于24。</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>借鉴Two Sum的解法 - Two Pointers(对撞型指针)</li>
<li>首先数组要排序，然后i在头，j在尾<ul>
<li>如果numbers[i] + numbers[j] &gt; target，不需要考虑numbers[i+1 ~ j-1] + numbers[j]的和，因为一定也大于target，所以answer += j - i，然后j–</li>
<li>如果numbers[i] + numbers[j] &lt;= target，不需要再考虑numbers[i]和numbers[i+1 ~ j-1]的和，因为一定小于target，所以直接i++</li>
</ul>
</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param nums, an array of integer</span></span><br><span class="line">    <span class="comment"># @param target, an integer</span></span><br><span class="line">    <span class="comment"># @return an integer</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum2</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">        <span class="comment"># Write your code here</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">None</span> <span class="keyword">or</span> len(nums) == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> count</span><br><span class="line">        nums.sort()</span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = len(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right):</span><br><span class="line">            <span class="keyword">if</span> nums[left] + nums[right] &lt;= target:</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> nums[left] + nums[right] &gt; target:</span><br><span class="line">                count += right - left</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给一组整数，问能找出多少对整数，他们的和大于一个给定的目标值。</p>
</blockquote>
<p><strong>样例</strong><br>对于 numbers = [2, 7, 11, 15], ]]>
    </summary>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="Sorting" scheme="http://yoursite.com/tags/Sorting/"/>
    
      <category term="Two Pointers" scheme="http://yoursite.com/tags/Two-Pointers/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[323 Number of Connected Components in an Undirected Graph]]></title>
    <link href="http://yoursite.com/2016/07/16/323-Number-of-Connected-Components-in-an-Undirected-Graph/"/>
    <id>http://yoursite.com/2016/07/16/323-Number-of-Connected-Components-in-an-Undirected-Graph/</id>
    <published>2016-07-16T22:11:38.000Z</published>
    <updated>2016-07-17T05:12:34.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>找出无向图中所有的连通块。<br>图中的每个节点包含一个label属性和一个邻接点的列表。（一个无向图的连通块是一个子图，其中任意两个顶点通过路径相连，且不与整个图中的其它顶点相连。）</p>
</blockquote>
<p><strong>样例</strong><br>给定图:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">A------B  C</span><br><span class="line"> \     |  | </span><br><span class="line">  \    |  |</span><br><span class="line">   \   |  |</span><br><span class="line">    \  |  |</span><br><span class="line">      D   E</span><br></pre></td></tr></table></figure></p>
<p>返回 {A,B,D}, {C,E}。其中有 2 个连通块，即{A,B,D}, {C,E}</p>
<h3 id="解题思路">解题思路</h3><ul>
<li><p>方法一：对于无向图，首先要建立一个hash map来去重，然后遍历每一个节点，若该节点不在hash map中，则通过DFS找到所有相连的节点</p>
</li>
<li><p>方法二：Union Find<br>本题也可以使用并查集(Union Find)来解决，虽然不是最适合Union Find的题目。在有向图中寻找连通块才是Union Find的用武之地。更多关于Union Find的知识点，详见<strong>Find the Weak Connected Component in the Directed Graph</strong></p>
</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Method 1</span></span><br><span class="line"><span class="comment"># Definition for a undirected graph node</span></span><br><span class="line"><span class="comment"># class UndirectedGraphNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.label = x</span></span><br><span class="line"><span class="comment">#         self.neighbors = []</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param &#123;UndirectedGraphNode[]&#125; nodes a array of undirected graph node</span></span><br><span class="line">    <span class="comment"># @return &#123;int[][]&#125; a connected set of a undirected graph</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connectedSet</span><span class="params">(self, nodes)</span>:</span></span><br><span class="line">        <span class="comment"># Write your code here</span></span><br><span class="line">        self.hashMap = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> nodes:</span><br><span class="line">            self.hashMap[node.label] = <span class="keyword">False</span></span><br><span class="line">            </span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> nodes:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.hashMap[node.label]:</span><br><span class="line">                temp = []</span><br><span class="line">                self.dfs(node, temp)</span><br><span class="line">                res.append(sorted(temp))</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, node, temp)</span>:</span></span><br><span class="line">        self.hashMap[node.label] = <span class="keyword">True</span></span><br><span class="line">        temp.append(node.label)</span><br><span class="line">        <span class="keyword">for</span> neighbor <span class="keyword">in</span> node.neighbors:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.hashMap[neighbor.label]:</span><br><span class="line">                self.dfs(neighbor, temp)</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>找出无向图中所有的连通块。<br>图中的每个节点包含一个label属性和一个邻接点的列表。（一个无向图的连通块是一个子图，其中任意两个顶点通过路径相连，且不与整个图中的其它顶点相连。）</p>
</block]]>
    </summary>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Union Find" scheme="http://yoursite.com/tags/Union-Find/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[90 k Sum II]]></title>
    <link href="http://yoursite.com/2016/07/14/90-k-Sum-II/"/>
    <id>http://yoursite.com/2016/07/14/90-k-Sum-II/</id>
    <published>2016-07-15T00:09:25.000Z</published>
    <updated>2016-07-15T07:10:38.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定n个不同的正整数，整数k（1&lt;= k &lt;= n）以及一个目标数字。　　　　<br>在这n个数里面找出K个数，使得这K个数的和等于目标数字，你需要找出所有满足要求的方案。</p>
</blockquote>
<p><strong>样例</strong><br>给出[1,2,3,4]，k=2， target=5，返回 [[1,4], [2,3]]</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>由于k Sum是求个数，所以考虑动态规划，直接DFS会超时。而k Sum II 是求所有具体的解，所以直接DFS.</li>
<li>思路跟 subsets 类似，可以想象成求一些特殊的subsets，加入result时，要符合subset的和等于target</li>
<li>本题与 Combination Sum II 也非常类似</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="string">"""</span><br><span class="line">    @param A: An integer array.</span><br><span class="line">    @param k: A positive integer (k &lt;= length(A))</span><br><span class="line">    @param target: Integer</span><br><span class="line">    @return a list of lists of integer </span><br><span class="line">    """</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kSumII</span><span class="params">(self, A, k, target)</span>:</span></span><br><span class="line">        <span class="comment"># write your code here</span></span><br><span class="line">        <span class="keyword">if</span> A == <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        self.dfs(sorted(A), k, <span class="number">0</span>, [], target)</span><br><span class="line">        <span class="keyword">return</span> self.res</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, nums, k, index, path, target)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> target == <span class="number">0</span> <span class="keyword">and</span> k == <span class="number">0</span>:</span><br><span class="line">            self.res.append(path[:])</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) == index <span class="keyword">or</span> k &lt; <span class="number">0</span> <span class="keyword">or</span> target &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(index, len(nums)):</span><br><span class="line">            self.dfs(nums, k - <span class="number">1</span>, i+<span class="number">1</span>, path + [nums[i]], target - nums[i])</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定n个不同的正整数，整数k（1&lt;= k &lt;= n）以及一个目标数字。　　　　<br>在这n个数里面找出K个数，使得这K个数的和等于目标数字，你需要找出所有满足要求的方案。</p>
</blockq]]>
    </summary>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="Recursion" scheme="http://yoursite.com/tags/Recursion/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[10 String Permutation II]]></title>
    <link href="http://yoursite.com/2016/07/11/10-String-Permutation-II/"/>
    <id>http://yoursite.com/2016/07/11/10-String-Permutation-II/</id>
    <published>2016-07-12T01:50:59.000Z</published>
    <updated>2016-07-12T08:51:53.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出一个字符串，找到它的所有排列，注意同一个字符串不要打印两次。</p>
</blockquote>
<p><strong>样例</strong><br>给出 “abb”，返回 [“abb”, “bab”, “bba”]。<br>给出 “aabb”，返回[“aabb”, “abab”, “baba”, “bbaa”, “abba”, “baab”]。</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>思路跟 Permutation II 完全一样</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param &#123;string&#125; str a string</span></span><br><span class="line">    <span class="comment"># @return &#123;string[]&#125; all permutations</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stringPermutation2</span><span class="params">(self, strs)</span>:</span></span><br><span class="line">        <span class="comment"># Write your code here</span></span><br><span class="line">        <span class="keyword">if</span> strs <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        res = []</span><br><span class="line">        flags = [<span class="keyword">False</span>] * len(strs)</span><br><span class="line">        self.helper(sorted(strs), flags, <span class="string">""</span>, res)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, strs, flags, path, result)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(path) == len(strs):</span><br><span class="line">            result.append(path)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(strs)):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> flags[i]:</span><br><span class="line">                <span class="keyword">if</span> i != <span class="number">0</span> <span class="keyword">and</span> <span class="keyword">not</span> flags[i - <span class="number">1</span>] <span class="keyword">and</span> strs[i] == strs[i - <span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                flags[i] = <span class="keyword">True</span></span><br><span class="line">                self.helper(strs, flags, path + strs[i], result)</span><br><span class="line">                flags[i] = <span class="keyword">False</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给出一个字符串，找到它的所有排列，注意同一个字符串不要打印两次。</p>
</blockquote>
<p><strong>样例</strong><br>给出 “abb”，返回 [“abb”, “bab”, “]]>
    </summary>
    
      <category term="Backtracking" scheme="http://yoursite.com/tags/Backtracking/"/>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="Permutation" scheme="http://yoursite.com/tags/Permutation/"/>
    
      <category term="Recursion" scheme="http://yoursite.com/tags/Recursion/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[52 N-Queens II]]></title>
    <link href="http://yoursite.com/2016/07/11/52-N-Queens-II/"/>
    <id>http://yoursite.com/2016/07/11/52-N-Queens-II/</id>
    <published>2016-07-12T01:32:21.000Z</published>
    <updated>2016-07-12T08:33:07.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>根据n皇后问题，现在返回n皇后不同的解决方案的数量而不是具体的放置布局。</p>
</blockquote>
<p><strong>样例</strong><br>比如n=4，存在2种解决方案</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>比N-Queens还要简单一些，因为不需要画出board，只需要维护一个全局变量result</li>
<li>完整思路见 N-Queens</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">totalNQueens</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type n: int</span><br><span class="line">        :rtype: int</span><br><span class="line">        """</span></span><br><span class="line">        cols = []</span><br><span class="line">        self.search(n, cols)</span><br><span class="line">        <span class="keyword">return</span> self.result</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, n, cols)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(cols) == n:</span><br><span class="line">            self.result += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.isValid(cols, col):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            self.search(n, cols + [col])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(self, cols, col)</span>:</span></span><br><span class="line">        currentRowNumber = len(cols)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(currentRowNumber):</span><br><span class="line">            <span class="comment"># same column</span></span><br><span class="line">            <span class="keyword">if</span> cols[i] == col:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="comment"># left-top to right-bottom</span></span><br><span class="line">            <span class="keyword">if</span> i - cols[i] == currentRowNumber - col:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="comment"># right-top to left-bottom</span></span><br><span class="line">            <span class="keyword">if</span> i + cols[i] == currentRowNumber + col:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>根据n皇后问题，现在返回n皇后不同的解决方案的数量而不是具体的放置布局。</p>
</blockquote>
<p><strong>样例</strong><br>比如n=4，存在2种解决方案</p>
<h3 i]]>
    </summary>
    
      <category term="Backtracking" scheme="http://yoursite.com/tags/Backtracking/"/>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Recursion" scheme="http://yoursite.com/tags/Recursion/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[51 N-Queens]]></title>
    <link href="http://yoursite.com/2016/07/11/51-N-Queens/"/>
    <id>http://yoursite.com/2016/07/11/51-N-Queens/</id>
    <published>2016-07-12T01:23:59.000Z</published>
    <updated>2016-07-12T08:24:37.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>n皇后问题是将n个皇后放置在n*n的棋盘上，皇后彼此之间不能相互攻击。<br>给定一个整数n，返回所有不同的n皇后问题的解决方案。<br>每个解决方案包含一个明确的n皇后放置布局，其中“Q”和“.”分别表示一个女王和一个空位置。</p>
</blockquote>
<p><strong>样例</strong><br>对于4皇后问题存在两种解决的方案：<br>[<br>    [“.Q..”, // Solution 1<br>     “…Q”,<br>     “Q…”,<br>     “..Q.”],<br>    [“..Q.”, // Solution 2<br>     “Q…”,<br>     “…Q”,<br>     “.Q..”]<br>]</p>
<p><img src="http://upload-images.jianshu.io/upload_images/424375-3ff96aba439fe48d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="n-queen puzzle"></p>
<h3 id="解题思路">解题思路</h3><p><img src="http://upload-images.jianshu.io/upload_images/424375-d44ebef99935ef3a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<ul>
<li><p>本题需要三个helper函数来辅助，使得代码更加清晰，第一需要DFS函数，过程如上图所示。一行一行的放置queen，当出现非法的情况时，直接返回上一级 - backtracking的思路</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># backtracking</span></span><br><span class="line">cols.append(col) <span class="comment"># 加</span></span><br><span class="line">self.dfs(cols)</span><br><span class="line">cols.pop() <span class="comment"># 减</span></span><br><span class="line"><span class="comment"># 等效于</span></span><br><span class="line">self.dfs(cols + [col])</span><br></pre></td></tr></table></figure>
</li>
<li><p>第二个函数就是判断某一点放queen是否合法</p>
<ul>
<li>因为是一行一行放，所以可以保证不在一行上</li>
<li>全局变量cols记录了那一列已经放置了queen，通过检查当前列是否在其中，即可判断是不是同一列有两个queen。同时cols的长度也表示已经有多少行放置好了queen，当len(cols) == n的时候可以drawboard并加入result中</li>
<li>同时还有检查对角线，左上右下和左下右上</li>
</ul>
</li>
<li>第三个函数是根据cols数组画出board，相对简单。比如[2, 4, 1, 3]表示第一行queen在第二列，第二行queen在第四列，第三行queen在第一列，第四行queen在第三列</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solveNQueens</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type n: int</span><br><span class="line">        :rtype: List[List[str]]</span><br><span class="line">        """</span></span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">if</span> n &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">        cols = []</span><br><span class="line">        self.search(n, cols, result);</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, n, cols, result)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(cols) == n:</span><br><span class="line">            result.append(self.drawBoard(cols))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.isValid(cols, col):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            self.search(n, cols + [col], result)</span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(self, cols, col)</span>:</span></span><br><span class="line">        currentRowNumber = len(cols)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(currentRowNumber):</span><br><span class="line">            <span class="comment"># same column</span></span><br><span class="line">            <span class="keyword">if</span> cols[i] == col:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="comment"># left-top to right-bottom</span></span><br><span class="line">            <span class="keyword">if</span> i - cols[i] == currentRowNumber - col:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="comment"># right-top to left-bottom</span></span><br><span class="line">            <span class="keyword">if</span> i + cols[i] == currentRowNumber + col:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drawBoard</span><span class="params">(self, cols)</span>:</span></span><br><span class="line">        board = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(cols)):</span><br><span class="line">            line = <span class="string">""</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(cols)):</span><br><span class="line">                <span class="keyword">if</span> j == cols[i]:</span><br><span class="line">                    line += <span class="string">"Q"</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    line += <span class="string">"."</span></span><br><span class="line">            board.append(line)</span><br><span class="line">        <span class="keyword">return</span> board</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>n皇后问题是将n个皇后放置在n*n的棋盘上，皇后彼此之间不能相互攻击。<br>给定一个整数n，返回所有不同的n皇后问题的解决方案。<br>每个解决方案包含一个明确的n皇后放置布局，其中“Q”和“.”分别表示一个]]>
    </summary>
    
      <category term="Backtracking" scheme="http://yoursite.com/tags/Backtracking/"/>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Recursion" scheme="http://yoursite.com/tags/Recursion/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[9 Palindrome Number]]></title>
    <link href="http://yoursite.com/2016/07/11/9-Palindrome-Number/"/>
    <id>http://yoursite.com/2016/07/11/9-Palindrome-Number/</id>
    <published>2016-07-12T00:06:15.000Z</published>
    <updated>2016-07-12T07:06:52.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>判断一个整数是不是回文数。不要使用额外空间。</p>
</blockquote>
<h3 id="解题思路">解题思路</h3><ul>
<li>首先，根据定义，负数不是回文数</li>
<li>把已知数字反转，与原数比较，相等则回文。比如：12321 反转是 12321，12321 == 12321，所以返回True</li>
<li>如何获得每一位上的数字<ul>
<li>12321 % 10 = 1，获得个位数，12321 / 10 = 1232， reverse = 1</li>
<li>1232 % 10 = 2, 获得十位数，1232 / 10 = 123，reverse = 1 * 10 + 2</li>
<li>123 % 10 = 3, 获得百位数，123 / 10 = 12，reverse = 12 * 10 + 3</li>
<li>12 % 10 = 2, 获得千位数，12 / 10 = 1，reverse = 123 * 10 + 2</li>
<li>1 % 10 = 1, 获得万位数，1 / 10 = 0，reverse = 1232 * 10 + 1 = 12321</li>
<li>以此类推，while循环，0时结束</li>
</ul>
</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type x: int</span><br><span class="line">        :rtype: bool</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">0</span> :</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            </span><br><span class="line">        temp = x</span><br><span class="line">        revt = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> temp:</span><br><span class="line">            revt = revt * <span class="number">10</span> + temp % <span class="number">10</span></span><br><span class="line">            temp /= <span class="number">10</span></span><br><span class="line">        <span class="keyword">return</span> revt == x</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>判断一个整数是不是回文数。不要使用额外空间。</p>
</blockquote>
<h3 id="解题思路">解题思路</h3><ul>
<li>首先，根据定义，负数不是回文数</li>
<li>把已知数字反转]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
      <category term="Palindrome" scheme="http://yoursite.com/tags/Palindrome/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[58 Length of Last Word]]></title>
    <link href="http://yoursite.com/2016/07/11/58-Length-of-Last-Word/"/>
    <id>http://yoursite.com/2016/07/11/58-Length-of-Last-Word/</id>
    <published>2016-07-11T23:42:56.000Z</published>
    <updated>2016-07-12T06:43:18.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个字符串， 包含大小写字母、空格’ ‘，请返回其最后一个单词的长度。如果不存在最后一个单词，请返回 0 。</p>
</blockquote>
<p><strong>样例</strong><br>给定 s = “Hello World”，返回 5 。</p>
<h3 id="解题思路">解题思路</h3><ul>
<li>按” “分开长字符串，得到得到一个单词数组</li>
<li>反转数组，遍历，返回第一个不是空串的单词的长度</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLastWord</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type s: str</span><br><span class="line">        :rtype: int</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            </span><br><span class="line">        words = s.split(<span class="string">" "</span>)[::-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">            <span class="keyword">if</span> len(word) != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> len(word)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个字符串， 包含大小写字母、空格’ ‘，请返回其最后一个单词的长度。如果不存在最后一个单词，请返回 0 。</p>
</blockquote>
<p><strong>样例</strong><br>给定 s]]>
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[127 Topological Sorting]]></title>
    <link href="http://yoursite.com/2016/07/09/127-Topological-Sorting/"/>
    <id>http://yoursite.com/2016/07/09/127-Topological-Sorting/</id>
    <published>2016-07-09T19:06:33.000Z</published>
    <updated>2016-07-10T02:08:26.000Z</updated>
    <content type="html"><![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个有向图，图节点的拓扑排序被定义为：<br>对于每条有向边A–&gt; B，则A必须排在B之前　　<br>拓扑排序的第一个节点可以是任何在图中没有其他节点指向它的节点　　<br>找到给定图的任一拓扑排序</p>
</blockquote>
<p><strong>样例</strong><br>对于下列图：<br><img src="http://upload-images.jianshu.io/upload_images/424375-4f5dd2c2cff0384c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Graph"></p>
<p>这个图的拓扑排序可能是：<br><strong>[0, 1, 2, 3, 4, 5]</strong><br>或者<br><strong>[0, 2, 3, 1, 5, 4]</strong><br>或者<br>….</p>
<h3 id="解题思路">解题思路</h3><ul>
<li><p>关于<strong>拓扑排序</strong>：</p>
<ul>
<li>出度：当前Node指向多少Node</li>
<li>入度：有多少Node指向当前的Node，先现实世界，可以把它理解为一个任务依赖于多少其他的任务，比如入度为0则表示完成该任务可立即执行，不依赖与其他的</li>
<li>拓扑排序就是不停的找入度为零的Node，把它从图中删除，再把它指向的Node的入度 -1</li>
<li>当然，若想要获得每一个Node入度和出度的信息，要首先自己构造。</li>
</ul>
</li>
<li><p>有向图会给出所有的Node，扫面一遍，通过Hash Map记录每一个Node的入度</p>
</li>
<li>若Node不在Hash Map中，表明其入度为0，先加入到Queue中，然后BFS</li>
<li>若最终还<strong>有入度不为零的Node存在</strong>，表明这是一个不能够拓扑排序的图。图中有环，相互依赖。</li>
</ul>
<h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a Directed graph node</span></span><br><span class="line"><span class="comment"># class DirectedGraphNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.label = x</span></span><br><span class="line"><span class="comment">#         self.neighbors = []</span></span><br><span class="line"><span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="string">"""</span><br><span class="line">    @param graph: A list of Directed graph node</span><br><span class="line">    @return: A list of integer</span><br><span class="line">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">topSort</span><span class="params">(self, graph)</span>:</span></span><br><span class="line">        result = []</span><br><span class="line">        visited = &#123;&#125;</span><br><span class="line">        <span class="comment"># BFS - calculate the in-degree for each node</span></span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> graph:</span><br><span class="line">            <span class="keyword">for</span> neighbor <span class="keyword">in</span> node.neighbors:</span><br><span class="line">                <span class="keyword">if</span> neighbor <span class="keyword">in</span> visited:</span><br><span class="line">                    visited[neighbor] += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    visited[neighbor] = <span class="number">1</span></span><br><span class="line">                </span><br><span class="line">        q = Queue.Queue()</span><br><span class="line">        <span class="comment"># enqueue the node which in-degree == 0</span></span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> graph:</span><br><span class="line">            <span class="keyword">if</span> node <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                q.put(node)</span><br><span class="line">                result.append(node)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">            node = q.get()</span><br><span class="line">            <span class="keyword">for</span> neighbor <span class="keyword">in</span> node.neighbors:</span><br><span class="line">                visited[neighbor] -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> visited[neighbor] == <span class="number">0</span>:</span><br><span class="line">                    q.put(neighbor)</span><br><span class="line">                    result.append(neighbor)</span><br><span class="line">                    </span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="原题">原题</h3><blockquote>
<p>给定一个有向图，图节点的拓扑排序被定义为：<br>对于每条有向边A–&gt; B，则A必须排在B之前　　<br>拓扑排序的第一个节点可以是任何在图中没有其他节点指向它的节点　　<br>找到给定图的任一拓扑排序<]]>
    </summary>
    
      <category term="BFS" scheme="http://yoursite.com/tags/BFS/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="Topological Sorting" scheme="http://yoursite.com/tags/Topological-Sorting/"/>
    
      <category term="LintCode" scheme="http://yoursite.com/categories/LintCode/"/>
    
  </entry>
  
</feed>
